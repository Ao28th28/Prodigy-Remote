export interface Player {
    getMaxHearts: () => number;
    _isFocusModeEnabled: boolean;
    _saveEnabled: boolean;
    _ultimateSessionStatusLocked: boolean;
    appearanceChanged: boolean;
    earlyBirdLastChance: boolean;
    hasUsedTicket: boolean;
    immortal: boolean;
    inPVP: boolean;
    isClassCodeAttached: boolean;
    isOpponent: boolean;
    it: boolean;
    justLeveled: boolean;
    memberPrompt: boolean;
    parentalLink: boolean;
    showHealthBar: boolean;
    tutorialCompletedThisSession: boolean;
    updated: boolean;
    _ultimateSessionStatus: number;
    _ultimateTaskId: number;
    answerStreak: number;
    aoaTier: number;
    broadcastId: number;
    catchAttempt: number;
    grade: number;
    pvpHP: number;
    starsEarned: number;
    starsReward: number;
    starsRewardBase: number;
    starsToProcess: number;
    userID: number;
    _locationSelectionType: string;
    _ultimateQuestId: string;
    _userDataPlatform: string;
    curriculumTreeID: string;
    parentEmail: string;
    type: string;
    username: string;
    _goalId: null;
    chatID: null;
    coOpTeam: null;
    currentVideoSkillId: null;
    danceID: null;
    emoteID: null;
    lastVisited: null;
    memberShareDate: null;
    primaryParentID: null;
    source: null;
    transformID: null;
    addAsset(V: any): void;
    addAssets(V: any): void;
    addBattle(): void;
    addBountyScore(V: any): void;
    addLoss(): void;
    addSpell(V: any): void;
    addStars(Y: any, q: any, Q: any): any;
    addWin(): void;
    anyPetsAboveLevel(V: any): any;
    canSpin(V: any): any;
    changeEnergy(V: any): void;
    changeGold(V: any, Y: any): void;
    checkVersion(): any;
    clearTransitionSessionStatus(): void;
    completeDaily(V: any, Y: any): void;
    completeTower(V: any): void;
    equip(V: any, Y: any): any;
    forceSaveCharacter(V: any, Y: any): void;
    getAnswerStreak(): any;
    getBountyScore(): any;
    getColiseum(): any;
    getDailyQuestions(): any;
    getDataAndClear(): any;
    getDrops(): any;
    getEnergy(): any;
    getLatestClassIDLegacy(): any;
    getMaxTimeForCurrentMorphMarbleEffect(): any;
    getPlayerClass(): any;
    getRegisterDate(): any;
    getSettings(): any;
    getTeamScore(): any;
    getUltimatePetId(): any;
    getUpdatedData(V: any, Y: any): any;
    hasCompletedTowerTownTutorial(): any;
    hasCompletedTutorial(): any;
    hasHouseItem(V: any): any;
    hasLegacyMembership(): any;
    hasMembership(): any;
    hasValidatedParentEmail(): any;
    hasValidatedTeacherEmail(): any;
    heal(): void;
    healTeam(V: any): void;
    healTeamMember(V: any, Y: any, q: any): void;
    init(Y: any): any;
    initEducation(): void;
    isBlockedByDarkTowerMemberGate(): any;
    isItemOwned(V: any): any;
    isPlayingAtSchool(): any;
    onEducationLoaded(V: any): void;
    onQuestionAnswered(V: any): void;
    onTutorialComplete(): void;
    processDeserter(): any;
    resetAccount(): any;
    rewardMembershipPrizes(V: any): any;
    sendInitialGTMEvents(): void;
    setAllowsHouseVisitors(Y: any): void;
    setBGMVolume(V: any): void;
    setColiseum(V: any): void;
    setEducation(V: any, Y: any): void;
    setEnergy(Y: any): void;
    setLocation(V: any): void;
    setParentEmail(V: any): void;
    setPlayerClass(V: any): void;
    setSFXVolume(V: any): void;
    setSpinDate(V: any): void;
    setUltimateSessionStatus(V: any, Y: any, q: any, Q: any): void;
    setVoiceVolume(V: any): void;
    setZone(V: any): void;
    spinWheel(V: any): void;
    swapSpells(V: any, Y: any): void;
    transformPlayer(Y: any, q: any, Q: any): void;
    unEquip(V: any, Y: any): any;
    unlockMemberItems(): void;
    unlockSessionStatus(): void;
    updateMembershipVideoAdData(V: any): void;
    validateLevel(): void;
    registerDate: Date;
    _educationData: {
        chosenGrade: number;
        curriculumTreeID: number;
        grade: number;
        placementTestID: number;
        placementTestInstanceID: number;
        subject: string;
        gradeOverride: null;
        goalId: undefined;
        classIds: never[];
        defaultCurriculum: {
            id: string;
            name: string;
            subject: string;
        };
        homework: never[];
        placementTestData: {
            placementTestComposition: {
                "1": any /* too deep */[];
                "2": any /* too deep */[];
                "3": any /* too deep */[];
                "4": any /* too deep */[];
                "5": any /* too deep */[];
                "6": any /* too deep */[];
                "7": any /* too deep */[];
                "8": any /* too deep */[];
            };
            placementTestStats: {
                potentialPlacementGradeNum: number;
                currentStrandData: {
                    gradeNum: number;
                    skillId: number;
                    strandId: number;
                    momentum: null;
                };
                pastStrandData: {
                    placed: any /* too deep */;
                };
                placementTestSkillsEncountered: any /* too deep */[];
            };
        };
        plans: never[];
        skills: ({ correct: number; decay: number; incorrect: number; last_updated: number; lock: number; skillID: number; theta: number; time_spent: number; date_mastered: null; } | { correct: number; decay: number; incorrect: number; last_updated: number; lock: number; skillID: number; theta: number; time_spent: number; date_mastered: string; })[];
    };
    _playerContainer: {
        _accessibleActive: boolean;
        _cacheAsBitmap: boolean;
        _destroyed: boolean;
        _isCreatedInBackpack: boolean;
        _isModalWithTransparency: boolean;
        _mountPending: boolean;
        accessible: boolean;
        accessibleChildren: boolean;
        battleShy: boolean;
        buttonMode: boolean;
        cacheAsBitmap: boolean;
        clickEnabled: boolean;
        complete: boolean;
        destroyed: boolean;
        digSetup: boolean;
        disableTransform: boolean;
        evtProc: boolean;
        exists: boolean;
        fixedToCamera: boolean;
        forceWeaponVisual: boolean;
        headOnly: boolean;
        hideHat: boolean;
        hideMount: boolean;
        interactive: boolean;
        interactiveChildren: boolean;
        isInTransformedMode: boolean;
        isMainPlayer: boolean;
        isMask: boolean;
        isModalWithTransparency: boolean;
        isSprite: boolean;
        loading: boolean;
        outOfDate: boolean;
        pendingDestroy: boolean;
        ran: boolean;
        renderable: boolean;
        showHandIK: boolean;
        showTransformationEffect: boolean;
        sortableChildren: boolean;
        sortDirty: boolean;
        transformationCompleted: boolean;
        transforming: boolean;
        visible: boolean;
        walkIntoBattle: boolean;
        worldVisible: boolean;
        _boundsID: number;
        _cacheAsBitmapMultisample: number;
        _eventsCount: number;
        _lastSortedIndex: number;
        _zIndex: number;
        alpha: number;
        anchorOffsetY: number;
        angle: number;
        bottom: number;
        broadcastId: number;
        cacheAsBitmapMultisample: number;
        castDelay: number;
        centerX: number;
        centerY: number;
        flagsToComplete: number;
        fxQueue: number;
        height: number;
        left: number;
        length: number;
        offsetX: number;
        offsetY: number;
        renderId: number;
        right: number;
        rotation: number;
        setScale: number;
        speed: number;
        tabIndex: number;
        timerForPlayerDataUpdate: number;
        top: number;
        updateTime: number;
        walkSpeed: number;
        width: number;
        worldAlpha: number;
        worldRotation: number;
        x: number;
        y: number;
        z: number;
        zIndex: number;
        _sortProperty: string;
        accessiblePointerEvents: string;
        accessibleType: string;
        animState: string;
        bootsTag: string;
        faceTag: string;
        hairTag: string;
        hatTag: string;
        name: string;
        outfitTag: string;
        weaponTag: string;
        _accessibleDiv: null;
        _boundsRect: null;
        _cacheAsBitmapResolution: null;
        _cacheData: null;
        _enabledFilters: null;
        _localBounds: {
            maxX: number;
            maxY: number;
            minX: number;
            minY: number;
            updateID: number;
            rect: null;
            addBounds(t: any): void;
            addBoundsArea(t: any, e: any): void;
            addBoundsMask(t: any, e: any): void;
            addBoundsMatrix(t: any, e: any): void;
            addFrame(t: any, e: any, r: any, i: any, n: any): void;
            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
            addPoint(t: any): void;
            addPointMatrix(t: any, e: any): void;
            addQuad(t: any): void;
            addVertexData(t: any, e: any, r: any): void;
            addVertices(t: any, e: any, r: any, i: any): void;
            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
            clear(): void;
            getRectangle(t: any): any;
            isEmpty(): any;
            pad(t: any, e: any): void;
        };
        _localBoundsRect: {
            bottom: number;
            height: number;
            left: number;
            right: number;
            top: number;
            type: number;
            width: number;
            x: number;
            y: number;
            ceil(t: any, e: any): any;
            clone(): any;
            contains(t: any, e: any): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            enlarge(t: any): any;
            fit(t: any): any;
            pad(t: any, e: any): any;
        };
        _mask: null;
        accessibleHint: null;
        accessibleTitle: null;
        activeMount: null;
        cacheAsBitmapResolution: null;
        captured: null;
        cursor: null;
        filterArea: null;
        filters: null;
        hitArea: null;
        lastSmoothing: null;
        mask: null;
        membershipSprite: null;
        morph: null;
        pairs: null;
        potencyIcon: null;
        potionIcon: null;
        smoke: null;
        statusEffects: null;
        tempDisplayObjectParent: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isMask: boolean;
            isSprite: boolean;
            renderable: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _eventsCount: number;
            _lastSortedIndex: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            cacheAsBitmapMultisample: number;
            renderId: number;
            rotation: number;
            tabIndex: number;
            worldAlpha: number;
            x: number;
            y: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _localBoundsRect: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            name: null;
            parent: null;
            sortDirty: null;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["tempDisplayObjectParent"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["tempDisplayObjectParent"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["tempDisplayObjectParent"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["tempDisplayObjectParent"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["tempDisplayObjectParent"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["tempDisplayObjectParent"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["tempDisplayObjectParent"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            _recursivePostUpdateTransform(): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addListener(t: any, e: any, r: any): any;
            destroy(t: any): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            removeAllListeners(t: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            setParent(t: any): any;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            updateTransform(): void;
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
            _trackedPointers: {};
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["tempDisplayObjectParent"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["tempDisplayObjectParent"]["pivot"]["scope"];
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["tempDisplayObjectParent"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["tempDisplayObjectParent"]["pivot"]["scope"];
            };
            trackedPointers: Player["_playerContainer"]["tempDisplayObjectParent"]["_trackedPointers"];
            transform: Player["_playerContainer"]["tempDisplayObjectParent"]["pivot"]["scope"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        transformID: null;
        weapon: null;
        loadedCallback: undefined;
        _cacheAsBitmapDestroy(t: any): void;
        _calculateBounds(): void;
        _calculateCachedBounds(): void;
        _destroyCachedDisplayObject(): void;
        _getCachedLocalBounds(): any;
        _initCachedDisplayObject(t: any): void;
        _initCachedDisplayObjectCanvas(t: any): void;
        _recursivePostUpdateTransform(): void;
        _render(t: any): void;
        _renderCached(t: any): void;
        _renderCachedCanvas(t: any): void;
        add(V: any, Y: any): any;
        addAt(V: any, Y: any): any;
        addBarrierSpritesheet(V: any, Y: any, q: any): void;
        addChild(): any;
        addChildAt(t: any, e: any): any;
        addListener(t: any, e: any, r: any): any;
        addOnClick(V: any): void;
        attack(): void;
        bringChildToTop(V: any): void;
        broadcastPlayerFullInfo(V: any): void;
        broadcastStopPlayer(): void;
        calculateBounds(): void;
        callAll(V: any, Y: any): void;
        callbackFromArray(V: any, Y: any): any;
        chat(V: any, Y: any, q: any): void;
        cleanup(): void;
        clickCallback(arg0: any): void;
        containerUpdateTransform(): void;
        createActiveMount(V: any): void;
        createHealthBar(V: any): any;
        createMountByID(V: any): void;
        damaged(): void;
        dance(V: any, Y: any): void;
        defeated(): void;
        destroy(): void;
        destroyMount(): void;
        dig(V: any, Y: any): void;
        disableMovement(): void;
        disableTempParent(t: any): void;
        displayDamage(V: any, Y: any, q: any, Q: any): void;
        displayHeal(V: any, Y: any): void;
        displayObjectUpdateTransform(): void;
        doBarrierAnimation(): void;
        doBarrierBreakAnimation(): void;
        doesMountMatchCurrentMount(V: any): any;
        doPuppetBreakAnimation(V: any): void;
        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
        emote(V: any, Y: any, q: any): any;
        enableLocomotion(V: any, Y: any): void;
        enableTempParent(): any;
        endChat(): void;
        eventNames(): any;
        faceToward(V: any): void;
        flip(): void;
        float(V: any): void;
        forceOutfit(V: any): void;
        getAt(V: any): any;
        getBounds(t: any, e: any): any;
        getByName(V: any): any;
        getChildAt(t: any): any;
        getChildByName(t: any, e: any): any;
        getChildIndex(t: any): any;
        getGlobalPosition(t: any, e: any): any;
        getHitboxHeight(): any;
        getHitboxLeft(): any;
        getHitboxTop(): any;
        getHitboxWidth(): any;
        getIndex(V: any): any;
        getInjectedValue(V: any): any;
        getLocalBounds(e: any, r: any): any;
        getRemainingTransformationTime(): any;
        getSource(): any;
        getTargetingOffset(): any;
        handlePostSprites(): void;
        hasTooltip(): any;
        hideName(): void;
        highlight(V: any, Y: any, q: any, Q: any): void;
        hop(V: any, Y: any, q: any, Q: any): void;
        initListeners(): void;
        isDefeated(): any;
        isFacingLeft(): any;
        isHighlighted(): any;
        isMounted(): any;
        isTransformed(): any;
        listenerCount(t: any): any;
        listeners(t: any): any;
        loadPrefabs(): any;
        lockOpponentSpell(): void;
        moonwalk(): void;
        mount(V: any): void;
        mountSprites(): void;
        moveDown(V: any): any;
        moveUp(V: any): any;
        off(t: any, e: any, i: any, n: any): any;
        on(t: any, e: any, r: any): any;
        once(t: any, e: any, r: any): any;
        onChildrenChange(t: any): void;
        onCreatureLevelUp(V: any, Y: any): void;
        onFxAnimationDone(): void;
        onLoadComplete(): void;
        onStarsAdded(): void;
        patrol(V: any, Y: any): void;
        play(V: any, Y: any): void;
        playAll(V: any): void;
        playerClicked(): void;
        postStartLoad(): void;
        randomSetup(): void;
        reload(V: any): void;
        remove(V: any, Y: any): any;
        removeAll(V: any): void;
        removeAllListeners(t: any): any;
        removeBetween(V: any, Y: any, q: any, Q: any): void;
        removeChild(): any;
        removeChildAt(t: any): any;
        removeChildren(t: any, e: any): any;
        removeListener(t: any, e: any, i: any, n: any): any;
        render(t: any): void;
        renderAdvanced(t: any): void;
        resetCharacterPosition(): void;
        resetItemTransformation(V: any): void;
        retreat(V: any): void;
        sendChildToBack(V: any): void;
        sendNpcClickedEvent(): void;
        setChildIndex(t: any, e: any): void;
        setData(): void;
        setElementAsModal(V: any): void;
        setHitbox(V: any): void;
        setNewAnimationState(V: any, Y: any, q: any): void;
        setNewTarget(V: any, Y: any): void;
        setParent(t: any): any;
        setPath(V: any, Y: any, q: any): void;
        setRenderState(V: any, Y: any): void;
        setSpriteInput(V: any): void;
        setSpritesVisible(V: any): void;
        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
        setTransformationContainer(V: any, Y: any, q: any): void;
        setup(Y: any, q: any): void;
        setupAnimations(): void;
        setupAssetsToLoad(): any;
        setupCollisionBlock(): void;
        setValidPath(V: any, Y: any, q: any, Q: any, X: any): void;
        shouldPlayRetreatOnDefeat(): any;
        shouldResetArmsOnDance(): any;
        showChat(V: any): void;
        showName(Y: any): void;
        showSmoke(): void;
        showTooltip(V: any, Y: any): void;
        showTransformationContainer(): void;
        showTransformationSmoke(V: any): void;
        sortChildren(): void;
        stand(): void;
        standStill(): void;
        startChat(V: any): void;
        startLoad(): void;
        stopAllAnimations(): void;
        stopAnimation(V: any): void;
        stopListeners(): void;
        stopMoveTween(): void;
        stopTweens(): void;
        swap(V: any, Y: any): void;
        swapChildren(t: any, e: any): void;
        switchOpponent(V: any): void;
        toggleMount(): void;
        toGlobal(t: any, e: any, r: any): any;
        toLocal(t: any, e: any, r: any, i: any): any;
        transformToItem(V: any, Y: any, q: any, Q: any): void;
        unmount(): void;
        update(): void;
        updateFace(V: any): void;
        updateHair(V: any): void;
        updateHat(V: any): void;
        updateHead(V: any): void;
        updateLeftArm(V: any): void;
        updateLegs(V: any): void;
        updateNeck(V: any): void;
        updateRightArm(V: any): void;
        updateShirt(V: any): void;
        updateSprites(): void;
        updateTransform(): void;
        updateWeapon(V: any): void;
        updateZ(): void;
        walk(): void;
        _bounds: {
            maxX: number;
            maxY: number;
            minX: number;
            minY: number;
            updateID: number;
            rect: null;
            addBounds(t: any): void;
            addBoundsArea(t: any, e: any): void;
            addBoundsMask(t: any, e: any): void;
            addBoundsMatrix(t: any, e: any): void;
            addFrame(t: any, e: any, r: any, i: any, n: any): void;
            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
            addPoint(t: any): void;
            addPointMatrix(t: any, e: any): void;
            addQuad(t: any): void;
            addVertexData(t: any, e: any, r: any): void;
            addVertices(t: any, e: any, r: any, i: any): void;
            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
            clear(): void;
            getRectangle(t: any): any;
            isEmpty(): any;
            pad(t: any, e: any): void;
        };
        _events: {};
        _game: {
            _paused: boolean;
            _pausedByCode: boolean;
            isBooted: boolean;
            paused: boolean;
            pausedByCode: boolean;
            transparent: boolean;
            versioned: boolean;
            _height: number;
            _width: number;
            broadcastId: number;
            height: number;
            resolution: number;
            width: number;
            clientVersion: string;
            windowHeight: undefined;
            windowWidth: undefined;
            boot(): void;
            bootSystems(): void;
            createApp(Y: any, q: any): any;
            createSystems(): void;
            destroy(): void;
            focusGain(V: any): void;
            focusLoss(V: any): void;
            gamePaused(V: any): void;
            gameResumed(Y: any): void;
            init(): void;
            pauseGame(Y: any): void;
            postUpdate(V: any): void;
            showDebugHeader(): void;
            toggleFpsGraph(): void;
            update(Y: any): void;
            canvas: HTMLCanvasElement;
            parent: HTMLCanvasElement;
            _add: {
                audio(V: any, Y: any, q: any, Q: any): any;
                bitmapData(V: any, Y: any, q: any, Q: any): any;
                container(V: any, Y: any, q: any): any;
                existing(V: any): any;
                graphics(V: any, Y: any, q: any): any;
                group(V: any, Y: any, q: any): any;
                renderTexture(V: any, Y: any, q: any, Q: any): any;
                sound(V: any, Y: any, q: any, Q: any): any;
                spine(V: any, Y: any, q: any, Q: any): any;
                sprite(V: any, Y: any, q: any, Q: any, X: any, J: any): any;
                text(V: any, Y: any, q: any, X: any, J: any): any;
                tileSprite(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any): any;
                tween(V: any, Y: any, q: any): any;
                game: Player["_playerContainer"]["_game"];
                prodigyGame: Player["_playerContainer"]["_game"];
                stage: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    disableVisibilityChange: boolean;
                    exists: boolean;
                    fixedToCamera: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    _hiddenVar: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    name: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    camera: undefined;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    boot(): void;
                    calculateBounds(): void;
                    checkVisibility(): void;
                    containerUpdateTransform(): void;
                    destroy(): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(e: any, r: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    parseConfig(V: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setBackgroundColor(V: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    update(): void;
                    updateTransform(): void;
                    visibilityChange(V: any): any;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _game: Player["_playerContainer"]["_game"];
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    children: any /* too deep */;
                    game: Player["_playerContainer"]["_game"];
                    localTransform: any /* too deep */;
                    onDestroy: any /* too deep */;
                    parent: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    tempDisplayObjectParent: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            _app: {
                _resizeId: null;
                _resizeTo: null;
                cancelResize(): void;
                destroy(e: any, r: any): void;
                queueResize(): any;
                render(): void;
                resize(): void;
                start(): void;
                stop(): void;
                view: HTMLCanvasElement;
                _ticker: {
                    _protected: boolean;
                    autoStart: boolean;
                    started: boolean;
                    _lastFrame: number;
                    _maxElapsedMS: number;
                    _minElapsedMS: number;
                    _requestId: number;
                    count: number;
                    deltaMS: number;
                    deltaTime: number;
                    elapsedMS: number;
                    FPS: number;
                    lastTime: number;
                    maxFPS: number;
                    minFPS: number;
                    speed: number;
                    _addListener(t: any): any;
                    _cancelIfNeeded(): void;
                    _requestIfNeeded(): void;
                    _startIfPossible(): void;
                    _tick(e: any): void;
                    add(e: any, r: any, i: any): any;
                    addOnce(e: any, r: any, i: any): any;
                    destroy(): void;
                    remove(t: any, e: any): any;
                    start(): void;
                    stop(): void;
                    update(t: any): any;
                    _head: any /* too deep */;
                };
                loader: {
                    _protected: boolean;
                    loading: boolean;
                    concurrency: number;
                    progress: number;
                    baseUrl: string;
                    defaultQueryString: string;
                    _add(e: any, r: any, i: any, n: any): any;
                    _boundLoadResource(t: any, e: any): any;
                    _loadResource(t: any, e: any): void;
                    _onComplete(): void;
                    _onLoad(t: any): void;
                    _onStart(): void;
                    _prepareUrl(t: any): any;
                    add(t: any, e: any, r: any, i: any): any;
                    destroy(): void;
                    load(t: any): any;
                    pre(t: any): any;
                    reset(): any;
                    use(t: any): any;
                    _afterMiddleware: any /* too deep */;
                    _beforeMiddleware: any /* too deep */;
                    _queue: any /* too deep */;
                    _resourcesParsing: any /* too deep */;
                    onComplete: any /* too deep */;
                    onError: any /* too deep */;
                    onLoad: any /* too deep */;
                    onProgress: any /* too deep */;
                    onStart: any /* too deep */;
                    resources: any /* too deep */;
                };
                renderer: {
                    autoDensity: boolean;
                    clearBeforeRender: boolean;
                    preserveDrawingBuffer: boolean;
                    renderingToScreen: boolean;
                    useContextAlpha: boolean;
                    _backgroundColor: number;
                    _eventsCount: number;
                    backgroundAlpha: number;
                    backgroundColor: number;
                    CONTEXT_UID: number;
                    height: number;
                    multisample: number;
                    resolution: number;
                    type: number;
                    width: number;
                    _backgroundColorString: string;
                    addListener(t: any, e: any, r: any): any;
                    addSystem(t: any, e: any): any;
                    clear(): void;
                    contextChange(): void;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    generateTexture(t: any, r: any, i: any, n: any): any;
                    initPlugins(t: any): void;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any, e: any): void;
                    reset(): any;
                    resize(t: any, r: any): void;
                    gl: WebGL2RenderingContext;
                    view: HTMLCanvasElement;
                    _backgroundColorRgba: any /* too deep */;
                    _events: any /* too deep */;
                    _lastObjectRendered: any /* too deep */;
                    batch: any /* too deep */;
                    buffer: any /* too deep */;
                    context: any /* too deep */;
                    extract: any /* too deep */;
                    filter: any /* too deep */;
                    framebuffer: any /* too deep */;
                    geometry: any /* too deep */;
                    globalUniforms: any /* too deep */;
                    mask: any /* too deep */;
                    options: any /* too deep */;
                    plugins: any /* too deep */;
                    projection: any /* too deep */;
                    renderTexture: any /* too deep */;
                    runners: any /* too deep */;
                    scissor: any /* too deep */;
                    screen: any /* too deep */;
                    shader: any /* too deep */;
                    state: any /* too deep */;
                    stencil: any /* too deep */;
                    texture: any /* too deep */;
                    textureGC: any /* too deep */;
                };
                screen: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                stage: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    containerUpdateTransform(): void;
                    destroy(e: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(e: any, r: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _localBounds: any /* too deep */;
                    _localBoundsRect: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    children: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    tempDisplayObjectParent: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            _cache: {
                addAtlasAlias(V: any, Y: any, q: any): void;
                addBitmapData(Y: any, q: any, Q: any): any;
                addImage(Y: any, q: any, Q: any): any;
                addItem(V: any, Y: any, q: any): void;
                addJSON(Y: any, q: any): any;
                addRenderTexture(Y: any, q: any): any;
                addSound(Y: any, q: any): any;
                addSpine(Y: any, q: any): any;
                addText(Y: any, q: any): any;
                addTextureAtlas(Y: any, q: any, Q: any): any;
                checkBitmapDataKey(Y: any): any;
                checkFrameData(Y: any): any;
                checkImageKey(Y: any): any;
                checkJSONKey(Y: any): any;
                checkRenderTextureKey(Y: any): any;
                checkSoundKey(Y: any): any;
                checkSpineKey(Y: any): any;
                checkTextKey(Y: any): any;
                deleteStaleCache(Y: any, q: any, Q: any): void;
                destroy(): void;
                getAtlasAlias(V: any): any;
                getBitmapData(Y: any): any;
                getFrameByName(Y: any, q: any, Q: any): any;
                getFrameData(Y: any, q: any): any;
                getGameKey(V: any): any;
                getImage(Y: any): any;
                getJSON(Y: any): any;
                getKeys(V: any): any;
                getMap(V: any): any;
                getRenderTexture(Y: any): any;
                getSound(Y: any): any;
                getSpine(Y: any): any;
                getText(Y: any): any;
                getTexture(Y: any, q: any): any;
                getTextureAtlas(V: any): any;
                hasMap(V: any): any;
                isSoundDecoded(V: any): any;
                removeAllItems(): void;
                removeAllItemsOfType(V: any): void;
                removeAtlasAlias(V: any): void;
                removeBitmapData(Y: any): any;
                removeImage(Y: any): any;
                removeItem(V: any, Y: any): void;
                removeJSON(Y: any): any;
                removeRenderTexture(Y: any): any;
                removeSound(Y: any): any;
                removeSpine(Y: any): any;
                removeText(Y: any): any;
                removeTextureAtlas(Y: any): any;
                _atlasFrameAlias: Map<never, never>;
                _cacheMap: Map<number, (Map<string, any /* too deep */> | Map<never, never>)>;
                cacheMap: Map<number, (Map<string, any /* too deep */> | Map<never, never>)>;
                _game: Player["_playerContainer"]["_game"];
                game: Player["_playerContainer"]["_game"];
            };
            _cameraCollisions: {
                addCollider(V: any): void;
                removeCollider(V: any): any;
                _cameraColliders: never[];
                cameraColliders: Player["_playerContainer"]["_game"]["_cameraCollisions"]["_cameraColliders"];
            };
            _config: {
                failIfMajorPerformanceCaveat: boolean;
                roundPixels: boolean;
                height: number;
                width: number;
                parent: string;
            };
            _consoleLogger: {
                _shouldColorCodeLogs: boolean;
                _minimumLogLevel: number;
                _stackTraceLogLevel: number;
                getLogStyle(V: any): any;
                getTextStyle(): any;
                log(V: any, Y: any): void;
                setColoredLogsEnabled(V: any): void;
                setLogLevel(V: any): void;
            };
            _destroyQueue: {
                addGameObjectToDestroyQueue(V: any): void;
                destroy(): void;
                processDestroyQueue(): void;
                _queue: Set<never>;
            };
            _device: {
                isInitialized: boolean;
                deviceReadyAt: number;
                cleanUp(): void;
                initialize(): void;
                onDeviceRotation(): void;
                whenReady(V: any): void;
                callbacks: never[];
                rotationEvent: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
            };
            _input: {
                enabled: boolean;
                pollLocked: boolean;
                recordPointerHistory: boolean;
                resetLocked: boolean;
                _pollCounter: number;
                _x: number;
                _y: number;
                doubleTapRate: number;
                holdRate: number;
                justPressedRate: number;
                justReleasedRate: number;
                maxPointers: number;
                minPriorityID: number;
                multiInputOverride: number;
                pollRate: number;
                recordLimit: number;
                recordRate: number;
                tapRate: number;
                totalActivePointers: number;
                totalInactivePointers: number;
                worldX: number;
                worldY: number;
                x: number;
                y: number;
                customCandidateHandler: null;
                customCandidateHandlerContext: null;
                addMoveCallback(V: any, Y: any): void;
                addPointer(): any;
                addTouchLockCallback(V: any, Y: any, q: any): void;
                boot(V: any): void;
                clearEnterCallback(): void;
                countActivePointers(V: any): any;
                deleteMoveCallback(V: any, Y: any): void;
                destroy(): void;
                executeTouchLockCallbacks(V: any, Y: any): void;
                getLocalPosition(V: any, Y: any, q: any): any;
                getPointer(V: any): any;
                getPointerFromId(V: any): any;
                getPointerFromIdentifier(V: any): any;
                hitTest(V: any, Y: any): any;
                preUpdate(): void;
                removeTouchLockCallback(V: any, Y: any): any;
                reset(V: any): void;
                resetSpeed(V: any, Y: any): void;
                setEnterCallback(V: any): void;
                setInteractiveCandidateHandler(V: any, Y: any): void;
                startPointer(V: any): any;
                stopPointer(V: any, Y: any): any;
                update(): void;
                updateChildren(V: any): void;
                updateInteractiveItems(): void;
                updatePointer(V: any): any;
                hitCanvas: HTMLCanvasElement;
                hitContext: CanvasRenderingContext2D;
                _oldPosition: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                activePointer: {
                    _holdSent: boolean;
                    _stateReset: boolean;
                    active: boolean;
                    dirty: boolean;
                    exists: boolean;
                    isDown: boolean;
                    isMouse: boolean;
                    isUp: boolean;
                    withinGame: boolean;
                    _nextDrop: number;
                    button: number;
                    clientX: number;
                    clientY: number;
                    duration: number;
                    id: number;
                    movementX: number;
                    movementY: number;
                    msSinceLastClick: number;
                    pageX: number;
                    pageY: number;
                    pointerMode: number;
                    previousTapTime: number;
                    rawMovementX: number;
                    rawMovementY: number;
                    screenX: number;
                    screenY: number;
                    timeDown: number;
                    timeUp: number;
                    totalTouches: number;
                    x: number;
                    y: number;
                    identifier: null;
                    pointerId: null;
                    targetObject: null;
                    justPressed(V: any): any;
                    justReleased(V: any): any;
                    leave(V: any): void;
                    move(V: any, Y: any): any;
                    processButtonsDown(V: any, Y: any): void;
                    processButtonsUp(V: any, Y: any): void;
                    processButtonsUpDown(V: any, Y: any): void;
                    processInteractiveObjects(V: any): any;
                    reset(): void;
                    resetButtons(): void;
                    resetMovement(): void;
                    start(V: any): any;
                    stop(V: any, Y: any): any;
                    swapTarget(V: any, Y: any): void;
                    update(): void;
                    updateButtons(V: any): void;
                    updateWorldPosition(): void;
                    target: HTMLCanvasElement;
                    _history: any /* too deep */;
                    backButton: any /* too deep */;
                    circle: any /* too deep */;
                    eraserButton: any /* too deep */;
                    forwardButton: any /* too deep */;
                    game: Player["_playerContainer"]["_game"];
                    interactiveCandidates: any /* too deep */;
                    leftButton: any /* too deep */;
                    middleButton: any /* too deep */;
                    position: any /* too deep */;
                    positionDown: any /* too deep */;
                    positionUp: any /* too deep */;
                    rightButton: any /* too deep */;
                    worldPosition: any /* too deep */;
                };
                circle: {
                    _diameter: number;
                    _radius: number;
                    circumference: number;
                    diameter: number;
                    radius: number;
                    x: number;
                    y: number;
                    circumferencePoint(V: any, Y: any, q: any): any;
                    getBounds(): any;
                    setTo(V: any, Y: any, q: any): any;
                };
                game: Player["_playerContainer"]["_game"];
                interactiveItems: {
                    _cursor: number;
                    total: number;
                    add(V: any): any;
                    callAll(V: any): void;
                    exists(V: any): any;
                    getByKey(V: any, Y: any): any;
                    getIndex(V: any): any;
                    remove(V: any): any;
                    removeAll(V: any): void;
                    reset(): void;
                    setAll(V: any, Y: any): void;
                    _list: any /* too deep */;
                    first: any /* too deep */;
                    list: any /* too deep */;
                    next: any /* too deep */;
                };
                keyboard: {
                    active: boolean;
                    enabled: boolean;
                    _i: number;
                    _k: number;
                    lastChar: null;
                    pressEvent: null;
                    _onKeyDown(Y: any): void;
                    _onKeyPress(Y: any): void;
                    _onKeyUp(Y: any): void;
                    addCallbacks(V: any, Y: any, q: any, Q: any): void;
                    addKey(V: any): any;
                    addKeyCapture(V: any): void;
                    addKeys(V: any): any;
                    clearCaptures(): void;
                    createCursorKeys(): any;
                    destroy(): void;
                    downDuration(V: any, Y: any): any;
                    isDown(V: any): any;
                    justPressed(V: any): any;
                    justReleased(V: any): any;
                    onDownCallback(arg0: any): void;
                    onPressCallback(arg0: any): void;
                    onUpCallback(arg0: any): void;
                    processKeyDown(V: any): void;
                    processKeyPress(V: any): void;
                    processKeyUp(V: any): void;
                    removeCallbacks(): void;
                    removeKey(V: any): void;
                    removeKeyCapture(V: any): void;
                    reset(V: any): void;
                    start(): any;
                    stop(): void;
                    update(): void;
                    upDuration(V: any, Y: any): any;
                    event: KeyboardEvent;
                    _capture: any /* too deep */;
                    _keys: any /* too deep */;
                    callbackContext: Player["_playerContainer"]["_game"]["_input"]["keyboard"];
                    game: Player["_playerContainer"]["_game"];
                    lastKey: any /* too deep */;
                };
                mouse: {
                    active: boolean;
                    capture: boolean;
                    enabled: boolean;
                    stopOnGameOut: boolean;
                    wheelDelta: number;
                    _onMouseDown(Y: any): void;
                    _onMouseMove(Y: any): void;
                    _onMouseOut(Y: any): void;
                    _onMouseOutGlobal(Y: any): void;
                    _onMouseOver(Y: any): void;
                    _onMouseUp(Y: any): void;
                    _onMouseUpGlobal(Y: any): void;
                    addMouseWheelCallback(V: any): any;
                    onMouseDown(V: any): void;
                    onMouseMove(V: any): void;
                    onMouseOut(V: any): void;
                    onMouseOutGlobal(V: any): void;
                    onMouseOver(V: any): void;
                    onMouseUp(V: any): void;
                    onMouseUpGlobal(V: any): void;
                    removeMouseWheelCallback(V: any): void;
                    start(): any;
                    stop(): void;
                    event: MouseEvent;
                    callbackContext: Player["_playerContainer"]["_game"];
                    game: Player["_playerContainer"]["_game"];
                    input: Player["_playerContainer"]["_game"]["_input"];
                };
                mousePointer: Player["_playerContainer"]["_game"]["_input"]["activePointer"];
                mouseWheel: {
                    active: boolean;
                    preventDefault: boolean;
                    delta: number;
                    wheelEventName: string;
                    boundOnWheelHandler(arg0: any): void;
                    onWheelHandler(V: any): void;
                    start(): any;
                    stop(): void;
                    element: HTMLCanvasElement;
                    callbackContext: Player["_playerContainer"]["_game"];
                    callbacks: any /* too deep */;
                    game: Player["_playerContainer"]["_game"];
                };
                mspointer: {
                    active: boolean;
                    pointerDownCallback: null;
                    pointerMoveCallback: null;
                    pointerUpCallback: null;
                    onPointerDown(Y: any): void;
                    onPointerMove(Y: any): void;
                    onPointerOut(Y: any): void;
                    onPointerOver(Y: any): void;
                    onPointerUp(Y: any): void;
                    onPointerUpGlobal(Y: any): void;
                    start(): any;
                    stop(): void;
                    callbackContext: Player["_playerContainer"]["_game"];
                    game: Player["_playerContainer"]["_game"];
                    input: Player["_playerContainer"]["_game"]["_input"];
                };
                onDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onHold: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onPointerMove: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onTap: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onTouchEndEvent: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onTouchStartEvent: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                pointer1: {
                    _holdSent: boolean;
                    _stateReset: boolean;
                    active: boolean;
                    dirty: boolean;
                    exists: boolean;
                    isDown: boolean;
                    isMouse: boolean;
                    isUp: boolean;
                    withinGame: boolean;
                    _nextDrop: number;
                    clientX: number;
                    clientY: number;
                    duration: number;
                    id: number;
                    identifier: number;
                    movementX: number;
                    movementY: number;
                    msSinceLastClick: number;
                    pageX: number;
                    pageY: number;
                    pointerMode: number;
                    previousTapTime: number;
                    rawMovementX: number;
                    rawMovementY: number;
                    screenX: number;
                    screenY: number;
                    timeDown: number;
                    timeUp: number;
                    totalTouches: number;
                    x: number;
                    y: number;
                    targetObject: null;
                    justPressed(V: any): any;
                    justReleased(V: any): any;
                    leave(V: any): void;
                    move(V: any, Y: any): any;
                    processButtonsDown(V: any, Y: any): void;
                    processButtonsUp(V: any, Y: any): void;
                    processButtonsUpDown(V: any, Y: any): void;
                    processInteractiveObjects(V: any): any;
                    reset(): void;
                    resetButtons(): void;
                    resetMovement(): void;
                    start(V: any): any;
                    stop(V: any, Y: any): any;
                    swapTarget(V: any, Y: any): void;
                    update(): void;
                    updateButtons(V: any): void;
                    updateWorldPosition(): void;
                    _history: any /* too deep */;
                    backButton: any /* too deep */;
                    circle: any /* too deep */;
                    eraserButton: any /* too deep */;
                    forwardButton: any /* too deep */;
                    game: Player["_playerContainer"]["_game"];
                    interactiveCandidates: any /* too deep */;
                    leftButton: any /* too deep */;
                    middleButton: any /* too deep */;
                    position: any /* too deep */;
                    positionDown: any /* too deep */;
                    positionUp: any /* too deep */;
                    rightButton: any /* too deep */;
                    worldPosition: any /* too deep */;
                };
                pointer2: {
                    _holdSent: boolean;
                    _stateReset: boolean;
                    active: boolean;
                    dirty: boolean;
                    exists: boolean;
                    isDown: boolean;
                    isMouse: boolean;
                    isUp: boolean;
                    withinGame: boolean;
                    _nextDrop: number;
                    clientX: number;
                    clientY: number;
                    duration: number;
                    id: number;
                    identifier: number;
                    movementX: number;
                    movementY: number;
                    msSinceLastClick: number;
                    pageX: number;
                    pageY: number;
                    pointerMode: number;
                    previousTapTime: number;
                    rawMovementX: number;
                    rawMovementY: number;
                    screenX: number;
                    screenY: number;
                    timeDown: number;
                    timeUp: number;
                    totalTouches: number;
                    x: number;
                    y: number;
                    targetObject: null;
                    justPressed(V: any): any;
                    justReleased(V: any): any;
                    leave(V: any): void;
                    move(V: any, Y: any): any;
                    processButtonsDown(V: any, Y: any): void;
                    processButtonsUp(V: any, Y: any): void;
                    processButtonsUpDown(V: any, Y: any): void;
                    processInteractiveObjects(V: any): any;
                    reset(): void;
                    resetButtons(): void;
                    resetMovement(): void;
                    start(V: any): any;
                    stop(V: any, Y: any): any;
                    swapTarget(V: any, Y: any): void;
                    update(): void;
                    updateButtons(V: any): void;
                    updateWorldPosition(): void;
                    _history: any /* too deep */;
                    backButton: any /* too deep */;
                    circle: any /* too deep */;
                    eraserButton: any /* too deep */;
                    forwardButton: any /* too deep */;
                    game: Player["_playerContainer"]["_game"];
                    interactiveCandidates: any /* too deep */;
                    leftButton: any /* too deep */;
                    middleButton: any /* too deep */;
                    position: any /* too deep */;
                    positionDown: any /* too deep */;
                    positionUp: any /* too deep */;
                    rightButton: any /* too deep */;
                    worldPosition: any /* too deep */;
                };
                pointerLock: {
                    active: boolean;
                    locked: boolean;
                    pointerlockchange: undefined;
                    pointerLockElement: undefined;
                    pointerlockerror: undefined;
                    boundOnChangeHandler(arg0: any): void;
                    boundOnErrorHandler(arg0: any): void;
                    cleanUp(): void;
                    exit(): void;
                    onChangeHandler(V: any): void;
                    onErrorHandler(V: any): void;
                    request(): void;
                    start(): any;
                    stop(): void;
                    element: HTMLCanvasElement;
                    game: Player["_playerContainer"]["_game"];
                    onChange: any /* too deep */;
                    onError: any /* too deep */;
                };
                pointers: (Player["_playerContainer"]["_game"]["_input"]["pointer1"] | Player["_playerContainer"]["_game"]["_input"]["pointer2"])[];
                position: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                scale: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                speed: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                touch: {
                    active: boolean;
                    enabled: boolean;
                    consumeDocumentTouches(): void;
                    onTouchCancel(V: any): void;
                    onTouchEnd(V: any): void;
                    onTouchEnter(V: any): void;
                    onTouchLeave(V: any): void;
                    onTouchMove(V: any): void;
                    onTouchStart(V: any): void;
                    start(): any;
                    stop(): void;
                    callbackContext: Player["_playerContainer"]["_game"];
                    game: Player["_playerContainer"]["_game"];
                };
            };
            _load: {
                _isLoading: boolean;
                _wasFail: boolean;
                isLoading: boolean;
                _crossOrigin: string;
                baseURL: string;
                crossOrigin: string;
                addFile(V: any, Y: any, q: any, Q: any, X: any): void;
                addFileToInternalLoader(V: any): void;
                atlasJSONHash(V: any, Y: any, q: any): void;
                audio(V: any, Y: any, q: any, Q: any): void;
                destroy(): void;
                fileCompleteCallback(V: any, Y: any): void;
                fileStartCallback(V: any): void;
                getMaxParallelDownloads(): any;
                getNumLoadedFiles(): any;
                image(V: any, Y: any, q: any, Q: any): void;
                isInLoadingQueue(V: any): any;
                isInQueue(V: any): any;
                json(V: any, Y: any, q: any, Q: any): void;
                processImage(V: any, Y: any, q: any): void;
                processJSON(V: any, Y: any, q: any): void;
                processScript(V: any, Y: any): void;
                processSound(V: any, Y: any, q: any): void;
                processSpine(V: any, Y: any, q: any): void;
                processSpritesheet(V: any, Y: any, q: any): void;
                processTextureAtlas(V: any, Y: any, q: any): void;
                removeFromLoadingQueue(V: any): any;
                reset(V: any): void;
                script(V: any, Y: any, q: any, Q: any, X: any): void;
                setupFileCallbacks(V: any): void;
                spine(V: any, Y: any, q: any, Q: any): void;
                spritesheet(V: any, Y: any, q: any, Q: any, X: any, J: any): void;
                start(): void;
                startLoad(): void;
                totalQueuedFiles(): any;
                _immediateQueue: never[];
                _loader: {
                    _protected: boolean;
                    loading: boolean;
                    concurrency: number;
                    progress: number;
                    baseUrl: string;
                    defaultQueryString: string;
                    _add(e: any, r: any, i: any, n: any): any;
                    _boundLoadResource(t: any, e: any): any;
                    _loadResource(t: any, e: any): void;
                    _onComplete(): void;
                    _onLoad(t: any): void;
                    _onStart(): void;
                    _prepareUrl(t: any): any;
                    add(t: any, e: any, r: any, i: any): any;
                    destroy(): void;
                    load(t: any): any;
                    pre(t: any): any;
                    reset(): any;
                    use(t: any): any;
                    _afterMiddleware: any /* too deep */;
                    _beforeMiddleware: any /* too deep */;
                    _queue: any /* too deep */;
                    _resourcesParsing: any /* too deep */;
                    onComplete: any /* too deep */;
                    onError: any /* too deep */;
                    onLoad: any /* too deep */;
                    onProgress: any /* too deep */;
                    onStart: any /* too deep */;
                    resources: any /* too deep */;
                };
                _loadingQueue: never[];
                _onFileComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                _onFileStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                _onLoadComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                _queue: never[];
                loader: Player["_playerContainer"]["_game"]["_load"]["_loader"];
                onFileComplete: Player["_playerContainer"]["_game"]["_load"]["_onFileComplete"];
                onFileStart: Player["_playerContainer"]["_game"]["_load"]["_onFileStart"];
                onLoadComplete: Player["_playerContainer"]["_game"]["_load"]["_onLoadComplete"];
                onReset: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
            };
            _navMeshSystem: {
                _currentStreamedMap: null;
                _navMeshConstructorWorker: null;
                addNonWalkableArea(V: any): any;
                addWalkableArea(V: any): void;
                bindStreamedMap(V: any): void;
                buildNavMeshFromGlobalPolys(): any;
                constructBlockMesh(V: any): any;
                destroy(): void;
                findPath(V: any, Y: any): any;
                generateBlockID(V: any): any;
                getNavMeshConstructor(): any;
                getPolyBoolPoly(V: any): any;
                modifyNavMesh(V: any, Y: any, q: any): any;
                onStreamedMapBlocksChanged(V: any, Y: any): any;
                releaseStreamedMap(): any;
                reloadStreamedBlock(V: any): any;
                unloadStreamedBlock(V: any): any;
                _blockPolygonIDs: Map<never, never>;
                _streamedBlockMeshes: Map<never, never>;
                _globalNonWalkableAreas: never[];
                _globalPolygonIDs: never[];
                _globalWalkableAreas: never[];
                _navMesh: {
                    _fromPolySearchRadius: number;
                    _meshShrinkAmount: number;
                    _nextId: number;
                    addPolygon(V: any): any;
                    calculateAllNeighbours(): void;
                    calculatePairNeighbours(V: any, Y: any): any;
                    calculatePolyNeighbours(V: any): void;
                    destroy(): any;
                    findPath(V: any, Y: any): any;
                    getPolygons(): any;
                    getSegmentOverlap(V: any, Y: any): any;
                    projectPointToEdge(V: any, Y: any): any;
                    projectPointToPolygon(V: any, Y: any): any;
                    removePolygon(V: any): any;
                    _graph: any /* too deep */;
                    _navPolygons: any /* too deep */;
                };
                navMesh: Player["_playerContainer"]["_game"]["_navMeshSystem"]["_navMesh"];
            };
            _onPause: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            _onResume: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            _rnd: {
                c: number;
                s0: number;
                s1: number;
                s2: number;
                angle(): any;
                frac(): any;
                hash(V: any): any;
                integer(): any;
                integerInRange(V: any, Y: any): any;
                normal(): any;
                pick(V: any): any;
                real(): any;
                realInRange(V: any, Y: any): any;
                rnd(): any;
                shuffle(V: any): any;
                sign(): any;
                sow(V: any): void;
                state(V: any): any;
                uuid(): any;
                weightedPick(V: any): any;
            };
            _rootContainer: {
                _parentContainer: null;
                parent: null;
                bind(V: any): any;
                get(V: any): any;
                hasBinding(V: any, Y: any): any;
                rebind(V: any): any;
                resolve(V: any): any;
                unbind(V: any): void;
                unbindAll(): void;
                _inversifyContainer: {
                    guid: string;
                    _middleware: null;
                    parent: null;
                    _get(t: any, n: any, e: any, i: any, o: any, a: any): any;
                    _planAndResolve(): any;
                    applyCustomMetadataReader(t: any): void;
                    applyMiddleware(): any;
                    bind(t: any): any;
                    createChild(): any;
                    get(t: any): any;
                    getAll(t: any): any;
                    getAllNamed(t: any, n: any): any;
                    getAllTagged(t: any, n: any, e: any): any;
                    getNamed(t: any, n: any): any;
                    getTagged(t: any, n: any, e: any): any;
                    isBound(t: any): any;
                    isBoundNamed(t: any, n: any): any;
                    isBoundTagged(t: any, n: any, e: any): any;
                    load(): any;
                    rebind(t: any): any;
                    resolve(n: any): any;
                    restore(): void;
                    snapshot(): void;
                    unbind(t: any): void;
                    unbindAll(): void;
                    unload(): any;
                    _bindingDictionary: any /* too deep */;
                    _metadataReader: any /* too deep */;
                    _snapshots: any /* too deep */;
                    options: any /* too deep */;
                };
                sourceContainer: Player["_playerContainer"]["_game"]["_rootContainer"]["_inversifyContainer"];
            };
            _scale: {
                _booted: boolean;
                _forceLandscape: boolean;
                _forcePortrait: boolean;
                _incorrectOrientation: boolean;
                isFullScreen: boolean;
                isLandscape: boolean;
                isPortrait: boolean;
                pageAlignHorizontally: boolean;
                pageAlignVertically: boolean;
                parentIsWindow: boolean;
                _lastUpdate: number;
                _updateThrottle: number;
                _updateThrottleReset: number;
                aspectRatio: number;
                currentScaleMode: number;
                fullScreenScaleMode: number;
                height: number;
                scaleMode: number;
                sourceAspectRatio: number;
                trackParentInterval: number;
                width: number;
                screenOrientation: string;
                _onResizeContext: null;
                _pendingScaleMode: null;
                _fullScreenChange(Y: any): void;
                _fullScreenError(Y: any): void;
                _gameResumed(): void;
                _orientationChange(Y: any): void;
                _windowResize(Y: any): void;
                align(V: any, Y: any): void;
                alignCanvas(V: any, Y: any): void;
                boot(): void;
                cleanupCreatedTarget(): void;
                createFullScreenTarget(): any;
                destroy(): void;
                forceOrientation(V: any, Y: any): void;
                fullScreenChange(V: any): void;
                fullScreenError(V: any): void;
                getParentBounds(V: any, Y: any): any;
                orientationChange(V: any): void;
                parseConfig(V: any): void;
                pauseUpdate(): void;
                prepScreenMode(Y: any): void;
                preUpdate(): void;
                queueUpdate(V: any): void;
                recalculateCanvasOffset(): void;
                reflowCanvas(): void;
                reflowGame(): void;
                refresh(): void;
                resetCanvas(V: any, Y: any): void;
                setExactFit(): void;
                setGameSize(Y: any, q: any): void;
                setMaximum(): void;
                setMinMax(V: any, Y: any, q: any, Q: any): void;
                setResizeCallback(V: any, Y: any): void;
                setShowAll(V: any): void;
                setupScale(V: any, Y: any): void;
                signalSizeChange(): void;
                startFullScreen(): any;
                stopFullScreen(): any;
                updateDimensions(Y: any, q: any, Q: any): void;
                updateLayout(): void;
                updateOrientationState(): any;
                updateScalingAndBounds(): void;
                windowResize(V: any): void;
                boundingParent: HTMLDivElement;
                parentNode: HTMLCanvasElement;
                _dom: {
                    scrollX: number;
                    scrollY: number;
                    getOffset(V: any, Y: any): any;
                    getScreenOrientation(): any;
                    onDeviceReady(): void;
                    layoutBounds: any /* too deep */;
                    visualBounds: any /* too deep */;
                };
                _game: Player["_playerContainer"]["_game"];
                _gameSize: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                _lastReportedCanvasSize: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                _lastReportedGameSize: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                _parentBounds: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                _scaleFactorInverted: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                _tempBounds: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                bounds: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                canvasOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                enterIncorrectOrientation: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                leaveIncorrectOrientation: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                margin: {
                    bottom: number;
                    left: number;
                    right: number;
                    top: number;
                    x: number;
                    y: number;
                };
                onFullScreenChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onFullScreenError: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onFullScreenInit: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOrientationChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onSizeChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parentScaleFactor: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                scaleFactor: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                windowConstraints: {
                    bottom: string;
                    right: string;
                };
            };
            _sound: {
                _codeMuted: boolean;
                _muted: boolean;
                _watching: boolean;
                connectToMaster: boolean;
                mute: boolean;
                muteOnPause: boolean;
                noAudio: boolean;
                touchLocked: boolean;
                baseLatency: number;
                channels: number;
                volume: number;
                _unlockSource: null;
                _watchCallback: null;
                _watchContext: null;
                _onResumeWebAudioOnClick(): void;
                _resumeWebAudioOnClick(): void;
                add(V: any, Y: any, q: any, Q: any): any;
                boot(): void;
                destroy(): void;
                pauseAll(): void;
                play(V: any, Y: any, q: any): any;
                remove(V: any): any;
                removeAll(): void;
                removeByKey(V: any): any;
                resumeAll(): void;
                resumeWebAudio(): any;
                setDecodedCallback(V: any, Y: any, q: any): void;
                setMute(): void;
                setTouchUnlock(): void;
                stopAll(): void;
                unlock(): any;
                unsetMute(): void;
                update(): void;
                context: AudioContext;
                emptyBuffer: AudioBuffer;
                _sounds: never[];
                _watchList: {
                    _cursor: number;
                    total: number;
                    first: null;
                    next: null;
                    add(V: any): any;
                    callAll(V: any): void;
                    exists(V: any): any;
                    getByKey(V: any, Y: any): any;
                    getIndex(V: any): any;
                    remove(V: any): any;
                    removeAll(V: any): void;
                    reset(): void;
                    setAll(V: any, Y: any): void;
                    _list: any /* too deep */;
                    list: any /* too deep */;
                };
                game: Player["_playerContainer"]["_game"];
                onMute: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onSoundDecode: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onTouchUnlock: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onUnMute: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onVolumeChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                sounds: Player["_playerContainer"]["_game"]["_sound"]["_sounds"];
            };
            _stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            _state: {
                _clearWorld: boolean;
                current: string;
                _pendingState: null;
                add(V: any, Y: any, q: any): any;
                boot(): void;
                clearCurrentState(): void;
                destroy(): void;
                get(V: any): any;
                getCurrentState(): any;
                loadComplete(): void;
                pause(): void;
                preUpdate(): any;
                remove(V: any): void;
                resume(): void;
                setCurrentState(V: any): void;
                start(V: any, Y: any): void;
                update(): void;
                _states: Map<string, (any | any /* too deep */)>;
                states: Map<string, (any | any /* too deep */)>;
                _current: {
                    _loadCompleteSent: boolean;
                    complete: boolean;
                    fadeInSet: boolean;
                    hasBroadcastedInfo: boolean;
                    hideHex: boolean;
                    isMapScreen: boolean;
                    showMenu: boolean;
                    walkEnabled: boolean;
                    frameUntilAddNextPlayer: number;
                    hudMenuStyle: number;
                    startX: number;
                    startY: number;
                    tileSize: number;
                    _key: string;
                    key: string;
                    saveTag: string;
                    screenName: string;
                    zoneName: string;
                    _friendListLoadTimeoutID: null;
                    _modalFilters: null;
                    _modalRenderTexture: null;
                    screenData: null;
                    previousMapData: undefined;
                    previousZone: undefined;
                    addAreaEvent(V: any, Y: any, q: any, Q: any, X: any): any;
                    addBlock(V: any, Y: any, q: any): any;
                    addBounty(V: any, Y: any, q: any, Q: any, X: any, Z: any, $: any): any;
                    addChest(V: any, Y: any, q: any, Q: any, X: any, J: any): any;
                    addClickableArea(V: any, Y: any, q: any, Q: any, X: any): void;
                    addClickableEvent(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any, $: any): any;
                    addClickableMoveEvent(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any, $: any, tt: any, it: any): any;
                    addCollect(V: any, Y: any, q: any, Q: any): any;
                    addConstructedNPC(V: any, Y: any, q: any, Q: any, J: any, Z: any): any;
                    addConstructedQuestNPC(V: any, Y: any, q: any, Q: any, X: any): any;
                    addDoor(V: any, Y: any): void;
                    addFireflyEvent(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any): any;
                    addFollow(V: any, Y: any): any;
                    addGnome(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any): any;
                    addMimic(V: any, Y: any, q: any, Q: any, X: any, J: any): any;
                    addMonster(V: any, Y: any, q: any, Q: any, X: any, Z: any, $: any, tt: any): any;
                    addNPC(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any): any;
                    addPathingIcon(V: any, Y: any): void;
                    addPippet(V: any, Y: any): any;
                    addPlayer(V: any): void;
                    addQuestNPC(V: any, Y: any, q: any, Q: any, X: any, J: any): any;
                    addUltimate(V: any, Y: any, q: any): any;
                    addWizard(V: any, Y: any, q: any, Q: any): any;
                    arePopupsEnabled(): any;
                    bitmapCacheGameRender(V: any): void;
                    callFunctionOrSignal(V: any, Y: any): void;
                    canAddUsersToScreen(): any;
                    clearAndResetRenderCache(): void;
                    create(): void;
                    createBackground(): void;
                    disableOverlay(V: any): void;
                    enableOverlay(V: any): void;
                    endFX(): void;
                    fadeIn(): void;
                    fadeOut(V: any, Y: any): void;
                    fadeOutCachedGameRender(): void;
                    findTargetEvent(V: any): any;
                    generateNPCTrail(V: any): void;
                    generateTamingUI(V: any, Y: any): void;
                    generateTrackingUI(): any;
                    generateUltimateTrail(V: any, Y: any): void;
                    getInjectedValue(V: any): any;
                    getParentalConsentBanner(): any;
                    handlePlayerChatMessage(V: any): void;
                    handleSessionStatusChange(V: any, Y: any): any;
                    hideChat(V: any): void;
                    hideOtherPlayer(V: any): any;
                    hideParentalConsentBanner(): void;
                    init(): void;
                    initListeners(): void;
                    initMap(V: any, Y: any, q: any, Q: any): void;
                    initScene(V: any, Y: any): void;
                    listener(V: any, Y: any): any;
                    movePlayer(V: any): void;
                    onAddChild(V: any, Y: any, q: any): void;
                    onDoorClick(V: any, Y: any): void;
                    onEnableBackground(V: any): void;
                    onEnableContent(V: any): void;
                    onGetLayer(V: any): any;
                    onMessage(V: any): void;
                    onPlayerFullInfo(V: any): void;
                    onPlayerJoined(V: any): void;
                    onPlayerLeft(V: any): void;
                    onPlayerList(V: any): any;
                    openFeed(V: any): void;
                    openHUD(): void;
                    paused(): void;
                    playerEffect(V: any): void;
                    preload(): void;
                    preprocess(): any;
                    process(V: any): void;
                    processAddCollect(V: any): void;
                    processPopups(V: any): any;
                    processUltimatesIndicators(): void;
                    removeFollow(V: any): void;
                    removePlayer(V: any): void;
                    resumed(): void;
                    screenSetup(): void;
                    screenUpdate(): void;
                    setFakePlayer(V: any): void;
                    setUpModalTransition(): void;
                    showCollisions(V: any): void;
                    showMessage(V: any, Y: any): void;
                    showParentalConsentBanner(V: any): void;
                    shutdown(): any;
                    start(Y: any, q: any): any;
                    startFX(): void;
                    stopListeners(): void;
                    transformPlayer(V: any): void;
                    triggerElementClick(V: any): void;
                    update(): void;
                    updatePlayer(V: any): void;
                    pendingCoordinates: Map<never, never>;
                    _background: any /* too deep */;
                    _bgSprite: any /* too deep */;
                    _consentUiLayer: any /* too deep */;
                    _content: any /* too deep */;
                    _dialogue: any /* too deep */;
                    _foreground: any /* too deep */;
                    _gameRenderCache: any /* too deep */;
                    _menuBarCreationPromise: any /* too deep */;
                    _menus: any /* too deep */;
                    _opaque: any /* too deep */;
                    _overlay: any /* too deep */;
                    _parentalConsentLoadPromise: any /* too deep */;
                    _root: any /* too deep */;
                    _uiLayer: any /* too deep */;
                    _ultimatesElements: any /* too deep */;
                    _world: any /* too deep */;
                    above: any /* too deep */;
                    aboveGameObject: any /* too deep */;
                    add: Player["_playerContainer"]["_game"]["_add"];
                    area: any /* too deep */;
                    assets: any /* too deep */;
                    background: any /* too deep */;
                    backgroundGameObject: any /* too deep */;
                    below: any /* too deep */;
                    belowGameObject: any /* too deep */;
                    clickAreas: any /* too deep */;
                    content: any /* too deep */;
                    contentGameObject: any /* too deep */;
                    data: any /* too deep */;
                    dialogue: any /* too deep */;
                    events: any /* too deep */;
                    floor: any /* too deep */;
                    foreground: any /* too deep */;
                    foregroundGameObject: any /* too deep */;
                    game: Player["_playerContainer"]["_game"];
                    gameRenderCache: any /* too deep */;
                    input: Player["_playerContainer"]["_game"]["_input"];
                    menuBar: any /* too deep */;
                    menus: any /* too deep */;
                    metricsManager: any /* too deep */;
                    opaque: any /* too deep */;
                    overlay: any /* too deep */;
                    path: any /* too deep */;
                    pendingPlayers: any /* too deep */;
                    playerList: any /* too deep */;
                    playersInfo: any /* too deep */;
                    prodigyGame: Player["_playerContainer"]["_game"];
                    questProgress: any /* too deep */;
                    stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                    uiLayer: any /* too deep */;
                    user: Player["_playerContainer"];
                    zone: any /* too deep */;
                };
                _initArgs: never[];
                _onStateChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                game: Player["_playerContainer"]["_game"];
                onStateChange: Player["_playerContainer"]["_game"]["_state"]["_onStateChange"];
            };
            _time: {
                _deltaMS: number;
                _timeMS: number;
                deltaMS: number;
                timeMS: number;
                add(V: any): any;
                boot(): void;
                create(V: any): any;
                gamePaused(): any;
                gameResumed(): any;
                removeAll(): any;
                update(): void;
                updateTime(): void;
                _events: {
                    _destroyOnExpire: boolean;
                    _expired: boolean;
                    _timeAtLastUpdate: number;
                    _updateTimeThreshold: number;
                    _state: string;
                    addTimer(V: any, Y: any, q: any): any;
                    canDestroy(): any;
                    createTimer(V: any, Y: any, q: any, X: any): any;
                    destroy(): void;
                    getGameTime(): any;
                    loop(V: any, Y: any, q: any): any;
                    offsetEventTimers(V: any): any;
                    pause(): void;
                    remove(V: any): any;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): any;
                    repeat(V: any, Y: any, q: any, X: any): any;
                    resume(): void;
                    sortEvents(): any;
                    start(V: any): any;
                    stop(V: any, Y: any): void;
                    update(): void;
                    _events: any /* too deep */;
                    _game: Player["_playerContainer"]["_game"];
                    onComplete: any /* too deep */;
                };
                _game: Player["_playerContainer"]["_game"];
                _timers: never[];
                events: Player["_playerContainer"]["_game"]["_time"]["_events"];
            };
            _tweens: {
                add(V: any, Y: any, q: any): any;
                create(V: any, Y: any, q: any): any;
                destroy(): void;
                findOwnerForTween(V: any): any;
                getAll(): any;
                pauseAll(): void;
                remove(V: any): void;
                removeAll(): void;
                removeAllFromOwner(V: any): void;
                removeFrom(V: any, Y: any): void;
                removeTweenFromOwner(V: any): any;
                resumeAll(): void;
                update(): any;
                _owners: Map<any /* too deep */, Set<any /* too deep */>>;
                _tweens: any /* too deep */[];
                game: Player["_playerContainer"]["_game"];
            };
            add: Player["_playerContainer"]["_game"]["_add"];
            app: Player["_playerContainer"]["_game"]["_app"];
            broadcaster: {
                broadcastIdCount: number;
                addAppListener(V: any, Y: any, q: any, Q: any, X: any): void;
                broadcast(V: any, Y: any, q: any): any;
                clear(): void;
                hashContext(V: any): any;
                removeAppListener(V: any, Y: any, q: any): void;
                callbacks: {
                    bId0: any /* too deep */;
                    bId2: any /* too deep */;
                    bId5: any /* too deep */;
                    bId6: any /* too deep */;
                    bId8: any /* too deep */;
                    bId9: any /* too deep */;
                    Card: any /* too deep */;
                    ConjureCubes: any /* too deep */;
                    FriendsList: any /* too deep */;
                    FriendsListOfActualFriends: any /* too deep */;
                    HUD: any /* too deep */;
                    mount: any /* too deep */;
                    NetworkHandlers: any /* too deep */;
                    ProdigyMailerButton: any /* too deep */;
                    ProdigyMailView: any /* too deep */;
                    Titan: any /* too deep */;
                    UI: any /* too deep */;
                };
                game: Player["_playerContainer"]["_game"];
                listeners: {
                    bId0: any /* too deep */;
                    bId2: any /* too deep */;
                    bId5: any /* too deep */;
                    bId6: any /* too deep */;
                    bId8: any /* too deep */;
                    bId9: any /* too deep */;
                    Card: any /* too deep */;
                    ConjureCubes: any /* too deep */;
                    FriendsList: any /* too deep */;
                    FriendsListOfActualFriends: any /* too deep */;
                    HUD: any /* too deep */;
                    mount: any /* too deep */;
                    NetworkHandlers: any /* too deep */;
                    ProdigyMailerButton: any /* too deep */;
                    ProdigyMailView: any /* too deep */;
                    Titan: any /* too deep */;
                    UI: any /* too deep */;
                };
            };
            cache: Player["_playerContainer"]["_game"]["_cache"];
            cameraCollisions: Player["_playerContainer"]["_game"]["_cameraCollisions"];
            config: Player["_playerContainer"]["_game"]["_config"];
            destroyQueue: Player["_playerContainer"]["_game"]["_destroyQueue"];
            device: Player["_playerContainer"]["_game"]["_device"];
            fps: {
                _isPendingResumeRecordFPS: boolean;
                _record: boolean;
                record: boolean;
                _framerate: number;
                _frames: number;
                _prevTime: number;
                _rollingCount: number;
                _rollingSum: number;
                endFrame(): void;
                getAverageFramerate(): any;
                getFramerate(): any;
                timeNow(): any;
            };
            frameWorkManager: {
                _frameWorkDone: boolean;
                _frameStartTime: number;
                frameBudget: number;
                frameBudgetRemaining: number;
                frameTimeElapsed: number;
                _now(): void;
                awaitFreeTime(V: any, Y: any): void;
                cancelWork(): any;
                flushWorkQueue(): void;
                markFrameEnd(): void;
                markFrameStart(): void;
                _workPromises: never[];
            };
            input: Player["_playerContainer"]["_game"]["_input"];
            inputDispatcher: {
                dispatchKeyboardEvent(V: any, Y: any): void;
                dispatchKeyPressEvent(V: any, Y: any, q: any): void;
                dispatchMouseEvent(V: any, Y: any): void;
                game: Player["_playerContainer"]["_game"];
            };
            load: Player["_playerContainer"]["_game"]["_load"];
            navMeshSystem: Player["_playerContainer"]["_game"]["_navMeshSystem"];
            onPause: Player["_playerContainer"]["_game"]["_onPause"];
            onResume: Player["_playerContainer"]["_game"]["_onResume"];
            renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
            rnd: Player["_playerContainer"]["_game"]["_rnd"];
            rootContainer: Player["_playerContainer"]["_game"]["_rootContainer"];
            scale: Player["_playerContainer"]["_game"]["_scale"];
            seededRandom: {
                frac(V: any): any;
                pick(V: any, Y: any): any;
                shuffleArray(V: any, Y: any): any;
                randomDataGenerator: {
                    c: number;
                    s0: number;
                    s1: number;
                    s2: number;
                    angle(): any;
                    frac(): any;
                    hash(V: any): any;
                    integer(): any;
                    integerInRange(V: any, Y: any): any;
                    normal(): any;
                    pick(V: any): any;
                    real(): any;
                    realInRange(V: any, Y: any): any;
                    rnd(): any;
                    shuffle(V: any): any;
                    sign(): any;
                    sow(V: any): void;
                    state(V: any): any;
                    uuid(): any;
                    weightedPick(V: any): any;
                };
            };
            sound: Player["_playerContainer"]["_game"]["_sound"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            state: Player["_playerContainer"]["_game"]["_state"];
            time: Player["_playerContainer"]["_game"]["_time"];
            tweens: Player["_playerContainer"]["_game"]["_tweens"];
            world: Player["_playerContainer"]["_game"]["_add"]["stage"];
        };
        _gsap: {
            id: number;
            harness: undefined;
            get(V: any, Y: any): any;
            set(V: any, Y: any): any;
            target: Player["_playerContainer"];
        };
        _onLoad: {
            _shouldPropagate: boolean;
            active: boolean;
            add(V: any, Y: any, q: any): any;
            addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
            addOnce(V: any, Y: any, q: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(V: any, Y: any): any;
            indexOfListener(V: any, Y: any): any;
            remove(V: any, Y: any): void;
            removeAll(V: any): void;
            removeAtIndex(V: any): void;
            toString(): any;
            validateListener(V: any, Y: any): void;
            _bindings: never[];
        };
        _tempDisplayObjectParent: Player["_playerContainer"]["tempDisplayObjectParent"];
        _trackedPointers: {};
        anchor: {
            x: number;
            y: number;
            clone(): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            equals(t: any): any;
            set(t: any, e: any): any;
        };
        bootsMetadata: {
            vIcon: number;
        };
        bounds: {
            bottom: number;
            height: number;
            left: number;
            right: number;
            top: number;
            type: number;
            width: number;
            x: number;
            y: number;
            ceil(t: any, e: any): any;
            clone(): any;
            contains(t: any, e: any): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            enlarge(t: any): any;
            fit(t: any): any;
            pad(t: any, e: any): any;
        };
        chatText: {
            _isCreated: boolean;
            Active: boolean;
            isActive: boolean;
            IsActiveInHierarchy: boolean;
            isCreated: boolean;
            alignment: number;
            Alignment: number;
            BlendMode: number;
            FontSize: number;
            FontStyle: number;
            LineSpacing: number;
            ShadowAlpha: number;
            ShadowAngle: number;
            ShadowBlur: number;
            ShadowDistance: number;
            StrokeThickness: number;
            TextHeight: number;
            TextWidth: number;
            FillColor: string;
            Font: string;
            ShadowColor: string;
            StrokeColor: string;
            TextConfig: undefined;
            create(): any;
            customDeserialize(V: any): void;
            destroy(): void;
            firstUpdate(): void;
            getInjectedValue(V: any): any;
            isValidColor(V: any): any;
            onDisable(): void;
            onEnable(): void;
            postCreate(): void;
            postDeserialize(): void;
            preDeserialize(V: any): void;
            setText(V: any): void;
            update(): void;
            updateAlignment(): void;
            updateFunction(): void;
            updateText(): void;
            gameObject: {
                _destroyed: boolean;
                _isActive: boolean;
                _isActiveInHierarchy: boolean;
                active: boolean;
                activeInHierarchy: boolean;
                isDestroyed: boolean;
                _name: string;
                layer: string;
                name: string;
                _parent: null;
                _transform: null;
                parent: null;
                transform: null;
                activeInHierarchyChanged(): void;
                addChild(V: any): void;
                addChildAt(V: any, Y: any): void;
                addComponent(V: any, Y: any): any;
                bringToFront(): void;
                destroy(): void;
                destroyDeferred(): void;
                dispatchComponentAddedInHierarchy(V: any, Y: any): void;
                findChildByName(V: any): any;
                findComponent(V: any): any;
                findComponentInChildren(V: any, Y: any): any;
                findComponentInParent(V: any, Y: any): any;
                findComponents(V: any): any;
                findComponentsInChildren(V: any, Y: any): any;
                firstUpdate(): void;
                getRenderOrder(): any;
                hasComponent(V: any): any;
                isActiveInHierarchy(): any;
                isInBack(): any;
                isInFront(): any;
                removeComponent(V: any): void;
                removeFromParent(): any;
                sendToBack(): void;
                setLayer(V: any, Y: any): void;
                setParent(V: any, Y: any): any;
                setRenderOrder(V: any): void;
                update(): void;
                updateFunction(): void;
                _children: never[];
                _components: (any /* too deep */ | Player["_playerContainer"]["chatText"])[];
                _legacyTransform: {
                    _isCreated: boolean;
                    Active: boolean;
                    isActive: boolean;
                    IsActiveInHierarchy: boolean;
                    isCreated: boolean;
                    roundRelativeValues: boolean;
                    RoundRelativeValues: boolean;
                    anchorX: number;
                    anchorY: number;
                    height: number;
                    relativeHeight: number;
                    relativeWidth: number;
                    relativeX: number;
                    relativeY: number;
                    roundedHeight: number;
                    roundedWidth: number;
                    roundedX: number;
                    roundedY: number;
                    scaleX: number;
                    scaleY: number;
                    width: number;
                    x: number;
                    y: number;
                    cachedRelativeHeight: null;
                    cachedRelativeWidth: null;
                    cachedRelativeX: null;
                    cachedRelativeY: null;
                    dimensionPlaceholder: null;
                    create(): void;
                    customDeserialize(Y: any): void;
                    destroy(): void;
                    firstUpdate(): void;
                    getInjectedValue(V: any): any;
                    onDisable(): void;
                    onEnable(): void;
                    postCreate(): void;
                    postDeserialize(): void;
                    preDeserialize(V: any): void;
                    reapplyChildRelativeValues(): void;
                    update(): void;
                    updateFunction(): void;
                    updateGroupVisibility(): void;
                    updateParentGroup(): void;
                    updatePivotXFromAnchorX(): void;
                    updatePivotYFromAnchorY(): void;
                    _group: any /* too deep */;
                    anchor: any /* too deep */;
                    gameObject: Player["_playerContainer"]["chatText"]["gameObject"];
                    GameObject: Player["_playerContainer"]["chatText"]["gameObject"];
                    group: any /* too deep */;
                    onActiveChanged: any /* too deep */;
                    OnActiveChanged: any /* too deep */;
                    onDestroy: any /* too deep */;
                    OnDestroy: any /* too deep */;
                };
                children: Player["_playerContainer"]["chatText"]["gameObject"]["_children"];
                components: Player["_playerContainer"]["chatText"]["gameObject"]["_components"];
                legacyTransform: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onActiveInHierarchyChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onChildAdded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onChildRemoved: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onComponentAdded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onComponentAddedToHierarchy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onComponentRemoved: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onHierarchyChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onLayerChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
            };
            GameObject: Player["_playerContainer"]["chatText"]["gameObject"];
            onActiveChanged: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            OnActiveChanged: Player["_playerContainer"]["chatText"]["onActiveChanged"];
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            OnDestroy: Player["_playerContainer"]["chatText"]["onDestroy"];
            Source: {
                source: string;
                cleanUp(): void;
                getText(): any;
                setText(V: any): void;
                onTextChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnTextChanged: Player["_playerContainer"]["chatText"]["Source"]["onTextChanged"];
            };
            textObject: {
                _isCreated: boolean;
                _underline: boolean;
                Active: boolean;
                isActive: boolean;
                IsActiveInHierarchy: boolean;
                isCreated: boolean;
                resizeRectTransform: boolean;
                underline: boolean;
                wordWrap: boolean;
                _paddingX: number;
                _paddingY: number;
                blendMode: number;
                dropShadowAlpha: number;
                dropShadowAngle: number;
                dropShadowBlur: number;
                dropShadowDistance: number;
                fontSize: number;
                lineSpacing: number;
                paddingX: number;
                paddingY: number;
                strokeThickness: number;
                tint: number;
                wordWrapWidth: number;
                _boundsAlignH: string;
                _boundsAlignV: string;
                align: string;
                boundsAlignH: string;
                boundsAlignV: string;
                dropShadowColor: string;
                fill: string;
                font: string;
                fontStyle: string;
                fontWeight: string;
                stroke: string;
                text: string;
                _filter: null;
                _parentRenderComponent: null;
                _underlineEndIndex: null;
                _underlineStartIndex: null;
                underlineEndIndex: null;
                underlineStartIndex: null;
                applyScalingToTransform(V: any, Y: any, q: any): void;
                applyTextPivot(): void;
                applyToMatrix(V: any, Y: any): void;
                attachRootContainer(): void;
                attachRootToCurrentLayer(): void;
                attachRootToRenderComponentParent(): void;
                buildRenderComponentOrder(V: any): any;
                clearListeners(): void;
                clearParentRenderComponent(): void;
                componentAddedToHierarchy(V: any, Y: any): void;
                create(): any;
                createPixiTransformOverride(): any;
                createTextObject(): void;
                customDeserialize(V: any): void;
                destroy(): void;
                drawUnderline(V: any, Y: any): void;
                findChildIndex(): any;
                firstUpdate(): void;
                gameObjectHierarchyChanged(): void;
                getDimensions(): any;
                getInjectedValue(V: any): any;
                getOverriddenTransform(): any;
                getParentContainer(): any;
                getRootContainer(): any;
                isValidColor(V: any): any;
                onDisable(): void;
                onEnable(): void;
                onLegacyTransformDestroyed(): void;
                onOverrideTransformDestroyed(): void;
                onParentRenderComponentDestroyed(): void;
                onRenderComponentContainerWasSet(): void;
                overridePIXIUpdateFunction(): void;
                postCreate(): void;
                postDeserialize(): void;
                preDeserialize(V: any): void;
                resetPIXIUpdateFunction(): void;
                resizeRectTransformUponTextChange(): void;
                setFilter(V: any): void;
                setRootContainer(V: any): void;
                setUpDisplayObject(V: any): void;
                trackTransformAddingToOverride(V: any): void;
                update(): void;
                updateFunction(): void;
                updateText(): void;
                updateTextSize(): void;
                updateVisibility(): void;
                _rootContainer: {
                    _accessibleActive: boolean;
                    _autoResolution: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    _ownCanvas: boolean;
                    _roundPixels: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    dirty: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    roundPixels: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _cachedTint: number;
                    _eventsCount: number;
                    _height: number;
                    _lastSortedIndex: number;
                    _resolution: number;
                    _textureID: number;
                    _textureTrimmedID: number;
                    _tint: number;
                    _tintRGB: number;
                    _transformID: number;
                    _transformTrimmedID: number;
                    _width: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    blendMode: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    localStyleID: number;
                    renderId: number;
                    resolution: number;
                    rotation: number;
                    tabIndex: number;
                    tint: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    _font: string;
                    _text: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    pluginName: string;
                    text: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    _styleListener: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    vertexTrimmedData: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _generateFillStyle(e: any, r: any, i: any): any;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _onAnchorUpdate(): void;
                    _onTextureUpdate(): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    calculateTrimmedVertices(): any;
                    calculateVertices(): void;
                    containerUpdateTransform(): void;
                    containsPoint(t: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    drawLetterSpacing(t: any, e: any, r: any, i: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateText(t: any): void;
                    updateTexture(): void;
                    updateTransform(): void;
                    canvas: HTMLCanvasElement;
                    context: CanvasRenderingContext2D;
                    indices: Uint16Array;
                    uvs: Float32Array;
                    vertexData: Float32Array;
                    _anchor: any /* too deep */;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _style: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _texture: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    anchor: any /* too deep */;
                    children: any /* too deep */;
                    localTransform: any /* too deep */;
                    parent: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    style: any /* too deep */;
                    tempDisplayObjectParent: any /* too deep */;
                    texture: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _textBounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _textSize: {
                    _halfHeight: number;
                    _halfWidth: number;
                    _height: number;
                    _width: number;
                    height: number;
                    width: number;
                    copyFrom(V: any): void;
                    getHalfHeight(): any;
                    getHalfWidth(): any;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    setTo(V: any, Y: any): void;
                };
                _underlines: never[];
                gameObject: Player["_playerContainer"]["chatText"]["gameObject"];
                GameObject: Player["_playerContainer"]["chatText"]["gameObject"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnActiveChanged: Player["_playerContainer"]["chatText"]["textObject"]["onActiveChanged"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnDestroy: Player["_playerContainer"]["chatText"]["textObject"]["onDestroy"];
                onRootContainerSet: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                Source: {
                    source: string;
                    cleanUp(): void;
                    getText(): any;
                    setText(V: any): void;
                    onTextChanged: any /* too deep */;
                    OnTextChanged: any /* too deep */;
                };
                textObject: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"];
                TextObject: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"];
                textSource: Player["_playerContainer"]["chatText"]["textObject"]["Source"];
            };
            TextObject: Player["_playerContainer"]["chatText"]["textObject"];
            textSource: Player["_playerContainer"]["chatText"]["Source"];
        };
        children: ({ _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _isModalWithTransparency: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isModalWithTransparency: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; add(V: any, Y: any): any; addAt(V: any, Y: any): any; addChild(): any; addChildAt(t: any, e: any): any; bringChildToTop(V: any): void; callAll(V: any, Y: any): void; callbackFromArray(V: any, Y: any): any; destroy(Y: any): void; getAt(V: any): any; getByName(V: any): any; getChildIndex(t: any): any; getIndex(V: any): any; getInjectedValue(V: any): any; moveDown(V: any): any; moveUp(V: any): any; onChildrenChange(t: any): void; remove(V: any, Y: any): any; removeAll(V: any): void; removeBetween(V: any, Y: any, q: any, Q: any): void; sendChildToBack(V: any): void; setElementAsModal(V: any): void; swap(V: any, Y: any): void; swapChildren(t: any, e: any): void; update(): void; updateZ(): void; _localBounds: any /* too deep */; _localBoundsRect: any /* too deep */; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; calculateBounds(): void; containerUpdateTransform(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(e: any, r: any): any; tempDisplayObjectParent: any /* too deep */; hasTooltip(): any; highlight(V: any, Y: any, q: any, Q: any): void; isHighlighted(): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; setChildIndex(t: any, e: any): void; setParent(t: any): any; setRenderState(V: any, Y: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; showTooltip(V: any, Y: any): void; sortChildren(): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _game: Player["_playerContainer"]["_game"]; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; bounds: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; metricsManager: any /* too deep */; onDestroy: any /* too deep */; parent: Player["_playerContainer"]; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; trackedPointers: any /* too deep */; transform: any /* too deep */; world: any /* too deep */; worldGamePosition: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; height: number; renderId: number; rotation: number; tabIndex: number; width: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; calculateBounds(): void; containerUpdateTransform(): void; destroy(Y: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(e: any, r: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; setChildIndex(t: any, e: any): void; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _localBounds: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; children: any /* too deep */; gameObjectRef: any /* too deep */; localTransform: any /* too deep */; onDestroy: any /* too deep */; parent: Player["_playerContainer"]; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; height: number; renderId: number; rotation: number; tabIndex: number; width: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; calculateBounds(): void; containerUpdateTransform(): void; destroy(Y: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(e: any, r: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; setChildIndex(t: any, e: any): void; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _localBounds: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; children: any /* too deep */; gameObjectRef: Player["_playerContainer"]["chatText"]["gameObject"]; localTransform: any /* too deep */; onDestroy: any /* too deep */; parent: Player["_playerContainer"]; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; })[];
        collisionBody: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            loadingTween: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["collisionBody"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["collisionBody"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["collisionBody"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["collisionBody"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["collisionBody"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["collisionBody"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            uvs: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionBody"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["tempDisplayObjectParent"];
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: any /* too deep */;
                    _glTextures: any /* too deep */;
                    resource: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["collisionBody"]["_texture"]["_frame"];
                orig: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                textureCacheIds: never[];
                trim: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["collisionBody"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["collisionBody"];
            };
            game: Player["_playerContainer"]["_game"];
            input: {
                _dragDistancePass: boolean;
                _dragPhase: boolean;
                _dragTimePass: boolean;
                _pendingDrag: boolean;
                _setHandCursor: boolean;
                _wasEnabled: boolean;
                allowHorizontalDrag: boolean;
                allowVerticalDrag: boolean;
                attachToCamera: boolean;
                bringToTop: boolean;
                checked: boolean;
                dragFromCenter: boolean;
                draggable: boolean;
                dragStopBlocksInputUp: boolean;
                enabled: boolean;
                isDragged: boolean;
                snapOnDrag: boolean;
                snapOnRelease: boolean;
                useHandCursor: boolean;
                dragDistanceThreshold: number;
                dragTimeThreshold: number;
                priorityID: number;
                snapOffsetX: number;
                snapOffsetY: number;
                snapX: number;
                snapY: number;
                boundsRect: null;
                boundsSprite: null;
                _pointerOutHandler(V: any, Y: any): void;
                _pointerOverHandler(V: any, Y: any): void;
                _releasedHandler(V: any): void;
                _touchedHandler(V: any): any;
                addedToGroup(): void;
                checkBoundsRect(): void;
                checkBoundsSprite(): void;
                checkPointerDown(V: any): any;
                checkPointerOver(V: any): any;
                destroy(): void;
                disableDrag(): void;
                disableSnap(): void;
                downDuration(V: any): any;
                dragTimeElapsed(V: any): void;
                enableDrag(V: any, Y: any, q: any, X: any, J: any): void;
                enableSnap(V: any, Y: any, q: any, Q: any, X: any, J: any): void;
                globalToLocal(V: any): any;
                justOut(V: any, Y: any): any;
                justOver(V: any, Y: any): any;
                justPressed(V: any, Y: any): any;
                justReleased(V: any, Y: any): any;
                overDuration(V: any): any;
                pointerDown(V: any): any;
                pointerDragged(V: any): any;
                pointerOut(V: any): any;
                pointerOver(V: any): any;
                pointerTimeDown(V: any): any;
                pointerTimeOut(V: any): any;
                pointerTimeOver(V: any): any;
                pointerTimeUp(V: any): any;
                pointerUp(V: any): any;
                pointerX(V: any): any;
                pointerY(V: any): any;
                removedFromGroup(): void;
                reset(): void;
                setDragLock(V: any, Y: any): void;
                start(V: any, Y: any): any;
                startDrag(V: any): void;
                stop(): void;
                stopDrag(V: any): void;
                update(V: any): any;
                updateDrag(V: any, Y: any): any;
                validForInput(V: any): any;
                _dragPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                _pointerData: any /* too deep */[];
                downPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                dragOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                dragStartPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                game: Player["_playerContainer"]["_game"];
                snapOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                snapPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                sprite: Player["_playerContainer"]["collisionBody"];
            };
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _isModalWithTransparency: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isModalWithTransparency: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                length: number;
                offsetX: number;
                offsetY: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                _sortProperty: string;
                accessiblePointerEvents: string;
                accessibleType: string;
                name: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                add(V: any, Y: any): any;
                addAt(V: any, Y: any): any;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(V: any): void;
                calculateBounds(): void;
                callAll(V: any, Y: any): void;
                callbackFromArray(V: any, Y: any): any;
                containerUpdateTransform(): void;
                destroy(Y: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getAt(V: any): any;
                getBounds(t: any, e: any): any;
                getByName(V: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getIndex(V: any): any;
                getInjectedValue(V: any): any;
                getLocalBounds(e: any, r: any): any;
                hasTooltip(): any;
                highlight(V: any, Y: any, q: any, Q: any): void;
                isHighlighted(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                moveDown(V: any): any;
                moveUp(V: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                remove(V: any, Y: any): any;
                removeAll(V: any): void;
                removeAllListeners(t: any): any;
                removeBetween(V: any, Y: any, q: any, Q: any): void;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                sendChildToBack(V: any): void;
                setChildIndex(t: any, e: any): void;
                setElementAsModal(V: any): void;
                setParent(t: any): any;
                setRenderState(V: any, Y: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                showTooltip(V: any, Y: any): void;
                sortChildren(): void;
                swap(V: any, Y: any): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateTransform(): void;
                updateZ(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _game: Player["_playerContainer"]["_game"];
                _localBounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _trackedPointers: {};
                anchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                children: (any /* too deep */ | Player["_playerContainer"]["collisionBody"])[];
                events: {
                    destroy(): void;
                    onAddedToGroup: any /* too deep */;
                    onAnimationComplete: any /* too deep */;
                    onAnimationLoop: any /* too deep */;
                    onAnimationStart: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onDragStart: any /* too deep */;
                    onDragStop: any /* too deep */;
                    onDragUpdate: any /* too deep */;
                    onEnterBounds: any /* too deep */;
                    onInputDown: any /* too deep */;
                    onInputOut: any /* too deep */;
                    onInputOver: any /* too deep */;
                    onInputUp: any /* too deep */;
                    onOutOfBounds: any /* too deep */;
                    onRemovedFromGroup: any /* too deep */;
                    onRemovedFromWorld: any /* too deep */;
                    parent: Player["_playerContainer"]["collisionBody"]["parent"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                metricsManager: {
                    _supportsWasm: boolean;
                    crashedLastLogin: boolean;
                    _averageDownloadSpeed: number;
                    _networkRequestCount: number;
                    _totalAssetDownloadSize: number;
                    _totalAssetDownloadTime: number;
                    _totalAssetsDownloaded: number;
                    lastGameSessionStartTime: number;
                    timeInLoadingMS: number;
                    crashedLastTime: string;
                    timeToPlayMS: null;
                    assetDownloaded(V: any, Y: any): void;
                    checkForCrash(): void;
                    createLoadingMetricEvent(V: any, q: any, J: any, $: any): any;
                    getCustomMetrics(): any;
                    getLastGameSessionStartTime(): any;
                    increaseNetworkRequestCount(): void;
                    objectCreated(V: any): void;
                    objectDestroyed(V: any): void;
                    sendLoadFunnelEvent(V: any, q: any, X: any, J: any, Z: any): void;
                    sendOnboardingFunnelEvent(V: any): void;
                    setInBattle(V: any): void;
                    setLastGameSessionStartTime(V: any): void;
                    setLastMapLoadStarted(V: any): void;
                    deviceInfoProvider: any /* too deep */;
                    game: Player["_playerContainer"]["_game"];
                    gameCompleteDataFactory: any /* too deep */;
                    loadingMetricProperties: any /* too deep */;
                    objectCountProperties: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    _gsap: any /* too deep */;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["collisionBody"]["parent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["collisionBody"]["parent"]["localTransform"];
                    pivot: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"];
                    position: Player["_playerContainer"]["collisionBody"]["parent"]["position"];
                    scale: Player["_playerContainer"]["collisionBody"]["parent"]["scale"];
                    skew: Player["_playerContainer"]["collisionBody"]["parent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldGamePosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["collisionBody"]["parent"]["scale"];
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["collisionBody"]["localTransform"];
                    pivot: Player["_playerContainer"]["collisionBody"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["collisionBody"]["_texture"];
            trackedPointers: Player["_playerContainer"]["collisionBody"]["_trackedPointers"];
            transform: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["collisionBody"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        collisionHead: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            loadingTween: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["collisionHead"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["collisionHead"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["collisionHead"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["collisionHead"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["collisionHead"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["collisionHead"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["collisionHead"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            uvs: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionHead"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["collisionHead"]["tempDisplayObjectParent"];
            _texture: Player["_playerContainer"]["collisionBody"]["_texture"];
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["collisionHead"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["collisionHead"];
            };
            game: Player["_playerContainer"]["_game"];
            input: {
                _dragDistancePass: boolean;
                _dragPhase: boolean;
                _dragTimePass: boolean;
                _pendingDrag: boolean;
                _setHandCursor: boolean;
                _wasEnabled: boolean;
                allowHorizontalDrag: boolean;
                allowVerticalDrag: boolean;
                attachToCamera: boolean;
                bringToTop: boolean;
                checked: boolean;
                dragFromCenter: boolean;
                draggable: boolean;
                dragStopBlocksInputUp: boolean;
                enabled: boolean;
                isDragged: boolean;
                snapOnDrag: boolean;
                snapOnRelease: boolean;
                useHandCursor: boolean;
                dragDistanceThreshold: number;
                dragTimeThreshold: number;
                priorityID: number;
                snapOffsetX: number;
                snapOffsetY: number;
                snapX: number;
                snapY: number;
                boundsRect: null;
                boundsSprite: null;
                _pointerOutHandler(V: any, Y: any): void;
                _pointerOverHandler(V: any, Y: any): void;
                _releasedHandler(V: any): void;
                _touchedHandler(V: any): any;
                addedToGroup(): void;
                checkBoundsRect(): void;
                checkBoundsSprite(): void;
                checkPointerDown(V: any): any;
                checkPointerOver(V: any): any;
                destroy(): void;
                disableDrag(): void;
                disableSnap(): void;
                downDuration(V: any): any;
                dragTimeElapsed(V: any): void;
                enableDrag(V: any, Y: any, q: any, X: any, J: any): void;
                enableSnap(V: any, Y: any, q: any, Q: any, X: any, J: any): void;
                globalToLocal(V: any): any;
                justOut(V: any, Y: any): any;
                justOver(V: any, Y: any): any;
                justPressed(V: any, Y: any): any;
                justReleased(V: any, Y: any): any;
                overDuration(V: any): any;
                pointerDown(V: any): any;
                pointerDragged(V: any): any;
                pointerOut(V: any): any;
                pointerOver(V: any): any;
                pointerTimeDown(V: any): any;
                pointerTimeOut(V: any): any;
                pointerTimeOver(V: any): any;
                pointerTimeUp(V: any): any;
                pointerUp(V: any): any;
                pointerX(V: any): any;
                pointerY(V: any): any;
                removedFromGroup(): void;
                reset(): void;
                setDragLock(V: any, Y: any): void;
                start(V: any, Y: any): any;
                startDrag(V: any): void;
                stop(): void;
                stopDrag(V: any): void;
                update(V: any): any;
                updateDrag(V: any, Y: any): any;
                validForInput(V: any): any;
                _dragPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                _pointerData: any /* too deep */[];
                downPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                dragOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                dragStartPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                game: Player["_playerContainer"]["_game"];
                snapOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                snapPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                sprite: Player["_playerContainer"]["collisionHead"];
            };
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["collisionHead"]["localTransform"];
                    pivot: Player["_playerContainer"]["collisionHead"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["collisionBody"]["_texture"];
            trackedPointers: Player["_playerContainer"]["collisionHead"]["_trackedPointers"];
            transform: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["collisionHead"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        data: {
            boots: number;
            eyeColor: number;
            face: number;
            faceColor: number;
            hat: number;
            outfit: number;
            skinColor: number;
            weapon: number;
            mount: undefined;
            hair: {
                color: number;
                style: number;
            };
        };
        events: {
            destroy(): void;
            onAddedToGroup: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onAnimationComplete: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onAnimationLoop: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onAnimationStart: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onDragStart: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onDragStop: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onDragUpdate: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onEnterBounds: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onInputDown: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onInputOut: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onInputOver: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onInputUp: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onOutOfBounds: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onRemovedFromGroup: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onRemovedFromWorld: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            parent: Player["_playerContainer"];
        };
        eyes: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            frameName: null;
            loadingTween: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["eyes"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["eyes"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["eyes"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["eyes"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["eyes"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["eyes"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            key: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["eyes"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["tempDisplayObjectParent"];
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                multisample: number;
                resolution: number;
                rotate: number;
                width: number;
                filterFrame: null;
                filterPoolKey: null;
                uvMatrix: null;
                trim: undefined;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                resize(t: any, e: any, r: any): void;
                setResolution(t: any): void;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    resource: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    resize(t: any, e: any): void;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: any /* too deep */;
                    _glTextures: any /* too deep */;
                    clearColor: any /* too deep */;
                    filterStack: any /* too deep */;
                    framebuffer: any /* too deep */;
                    maskStack: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["eyes"]["_texture"]["_frame"];
                framebuffer: {
                    depth: boolean;
                    stencil: boolean;
                    dirtyFormat: number;
                    dirtyId: number;
                    dirtySize: number;
                    height: number;
                    multisample: number;
                    width: number;
                    depthTexture: null;
                    addColorTexture(e: any, r: any): any;
                    addDepthTexture(e: any): any;
                    destroyDepthTexture(): void;
                    dispose(): void;
                    enableDepth(): any;
                    enableStencil(): any;
                    resize(t: any, e: any): void;
                    colorTexture: Player["_playerContainer"]["eyes"]["_texture"]["baseTexture"];
                    colorTextures: any /* too deep */;
                    disposeRunner: any /* too deep */;
                    glFramebuffers: any /* too deep */;
                };
                orig: Player["_playerContainer"]["eyes"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["eyes"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["eyes"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _roundPixels: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                inputEnabled: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isLoaded: boolean;
                isMask: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                roundPixels: boolean;
                smoothed: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _cachedTint: number;
                _eventsCount: number;
                _height: number;
                _lastSortedIndex: number;
                _textureID: number;
                _textureTrimmedID: number;
                _tint: number;
                _tintRGB: number;
                _transformID: number;
                _transformTrimmedID: number;
                _width: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                blendMode: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                tint: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                pluginName: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                frameName: null;
                loadingTween: null;
                _localBounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                scaleMax: null;
                scaleMin: null;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                transformCallbackContext: null;
                vertexTrimmedData: null;
                forcedHeight: undefined;
                forcedWidth: undefined;
                frame: undefined;
                key: undefined;
                onTextureLoaded: undefined;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _onAnchorUpdate(): void;
                _onTextureUpdate(): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(V: any): void;
                calculateBounds(): void;
                calculateTrimmedVertices(): any;
                calculateVertices(): void;
                checkCallback(): void;
                checkSpriteDimension(): void;
                containerUpdateTransform(): void;
                containsPoint(t: any): any;
                destroy(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                getOffsetX(): any;
                getOffsetY(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                loadNewTexture(V: any, Y: any, q: any, Q: any): void;
                loadTexture(V: any, Y: any): void;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                rotateMiddleBased(V: any): void;
                sendChildToBack(V: any): void;
                setActive(V: any): void;
                setChildIndex(t: any, e: any): void;
                setFrame(V: any): void;
                setParent(t: any): any;
                setTexture(V: any, Y: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateFrame(Y: any): void;
                updateTexture(V: any): void;
                updateTransform(): void;
                indices: Uint16Array;
                uvs: Float32Array;
                vertexData: Float32Array;
                _anchor: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["eyes"]["parent"];
                };
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["parent"]["tempDisplayObjectParent"];
                _texture: {
                    noFrame: boolean;
                    valid: boolean;
                    _eventsCount: number;
                    _rotate: number;
                    _updateID: number;
                    height: number;
                    multisample: number;
                    resolution: number;
                    rotate: number;
                    width: number;
                    filterFrame: null;
                    filterPoolKey: null;
                    uvMatrix: null;
                    trim: undefined;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    clone(): any;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    onBaseTextureUpdated(t: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    resize(t: any, e: any, r: any): void;
                    setResolution(t: any): void;
                    update(): void;
                    updateUvs(): void;
                    _events: any /* too deep */;
                    _frame: any /* too deep */;
                    _uvs: any /* too deep */;
                    baseTexture: any /* too deep */;
                    defaultAnchor: any /* too deep */;
                    frame: any /* too deep */;
                    framebuffer: any /* too deep */;
                    orig: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                };
                _trackedPointers: {};
                anchor: Player["_playerContainer"]["eyes"]["parent"]["_anchor"];
                animations: never;
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                cameraOffset: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                children: (Player["_playerContainer"]["eyes"] | any /* too deep */)[];
                events: {
                    destroy(): void;
                    onAddedToGroup: any /* too deep */;
                    onAnimationComplete: any /* too deep */;
                    onAnimationLoop: any /* too deep */;
                    onAnimationStart: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onDragStart: any /* too deep */;
                    onDragStop: any /* too deep */;
                    onDragUpdate: any /* too deep */;
                    onEnterBounds: any /* too deep */;
                    onInputDown: any /* too deep */;
                    onInputOut: any /* too deep */;
                    onInputOver: any /* too deep */;
                    onInputUp: any /* too deep */;
                    onOutOfBounds: any /* too deep */;
                    onRemovedFromGroup: any /* too deep */;
                    onRemovedFromWorld: any /* too deep */;
                    parent: Player["_playerContainer"]["eyes"]["parent"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                parent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    _isModalWithTransparency: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    exists: boolean;
                    fixedToCamera: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isModalWithTransparency: boolean;
                    isSprite: boolean;
                    pendingDestroy: boolean;
                    renderable: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    bottom: number;
                    cacheAsBitmapMultisample: number;
                    centerX: number;
                    centerY: number;
                    height: number;
                    left: number;
                    length: number;
                    offsetX: number;
                    offsetY: number;
                    renderId: number;
                    right: number;
                    rotation: number;
                    tabIndex: number;
                    top: number;
                    width: number;
                    worldAlpha: number;
                    worldRotation: number;
                    x: number;
                    y: number;
                    z: number;
                    zIndex: number;
                    _sortProperty: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    name: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    add(V: any, Y: any): any;
                    addAt(V: any, Y: any): any;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    bringChildToTop(V: any): void;
                    callAll(V: any, Y: any): void;
                    callbackFromArray(V: any, Y: any): any;
                    destroy(Y: any): void;
                    getAt(V: any): any;
                    getByName(V: any): any;
                    getChildIndex(t: any): any;
                    getIndex(V: any): any;
                    getInjectedValue(V: any): any;
                    moveDown(V: any): any;
                    moveUp(V: any): any;
                    onChildrenChange(t: any): void;
                    remove(V: any, Y: any): any;
                    removeAll(V: any): void;
                    removeBetween(V: any, Y: any, q: any, Q: any): void;
                    sendChildToBack(V: any): void;
                    setElementAsModal(V: any): void;
                    swap(V: any, Y: any): void;
                    swapChildren(t: any, e: any): void;
                    update(): void;
                    updateZ(): void;
                    _localBounds: any /* too deep */;
                    _localBoundsRect: any /* too deep */;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    containerUpdateTransform(): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(e: any, r: any): any;
                    tempDisplayObjectParent: any /* too deep */;
                    hasTooltip(): any;
                    highlight(V: any, Y: any, q: any, Q: any): void;
                    isHighlighted(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setRenderState(V: any, Y: any): void;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    showTooltip(V: any, Y: any): void;
                    sortChildren(): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _game: Player["_playerContainer"]["_game"];
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    anchor: any /* too deep */;
                    bounds: any /* too deep */;
                    children: any /* too deep */;
                    events: any /* too deep */;
                    game: Player["_playerContainer"]["_game"];
                    localTransform: any /* too deep */;
                    metricsManager: Player["_playerContainer"]["collisionBody"]["parent"]["metricsManager"];
                    onDestroy: any /* too deep */;
                    parent: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    world: any /* too deep */;
                    worldGamePosition: any /* too deep */;
                    worldPosition: any /* too deep */;
                    worldScale: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                previousPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                texture: Player["_playerContainer"]["eyes"]["parent"]["_texture"];
                trackedPointers: Player["_playerContainer"]["eyes"]["parent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["eyes"]["parent"]["localTransform"];
                    pivot: Player["_playerContainer"]["eyes"]["parent"]["pivot"];
                    position: Player["_playerContainer"]["eyes"]["parent"]["position"];
                    scale: Player["_playerContainer"]["eyes"]["parent"]["scale"];
                    skew: Player["_playerContainer"]["eyes"]["parent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                transformCallback: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["eyes"]["parent"]["scale"];
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["eyes"]["localTransform"];
                    pivot: Player["_playerContainer"]["eyes"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["eyes"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["eyes"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["eyes"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["eyes"]["_texture"];
            trackedPointers: Player["_playerContainer"]["eyes"]["_trackedPointers"];
            transform: Player["_playerContainer"]["eyes"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["eyes"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        faceMetadata: {
            v: number;
            vIcon: number;
            type: string;
        };
        fixedIKPositions: {
            head: {
                x: number;
                y: number;
            };
            neck: {
                x: number;
                y: number;
            };
        };
        follow: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _isModalWithTransparency: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            battleShy: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            complete: boolean;
            destroyed: boolean;
            evtProc: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isMask: boolean;
            isModalWithTransparency: boolean;
            isSprite: boolean;
            loading: boolean;
            outOfDate: boolean;
            pendingDestroy: boolean;
            ran: boolean;
            renderable: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            walkIntoBattle: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _eventsCount: number;
            _lastSortedIndex: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            castDelay: number;
            centerX: number;
            centerY: number;
            fxQueue: number;
            height: number;
            left: number;
            length: number;
            mode: number;
            offsetX: number;
            offsetY: number;
            renderId: number;
            right: number;
            rotation: number;
            setScale: number;
            speed: number;
            tabIndex: number;
            top: number;
            walkSpeed: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            _sortProperty: string;
            accessiblePointerEvents: string;
            accessibleType: string;
            name: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            captured: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            locomotion: null;
            mask: null;
            moveTween: null;
            pairs: null;
            potencyIcon: null;
            potionIcon: null;
            statusEffects: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["follow"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["follow"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["follow"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["follow"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["follow"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["follow"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["follow"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            loadedCallback: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            add(V: any, Y: any): any;
            addAt(V: any, Y: any): any;
            addBarrierSpritesheet(V: any, Y: any, q: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            addOnClick(V: any): void;
            attack(V: any): void;
            bringChildToTop(V: any): void;
            cacheAssets(): void;
            calculateBounds(): void;
            callAll(V: any, Y: any): void;
            callbackFromArray(V: any, Y: any): any;
            chat(V: any, Y: any, q: any): void;
            containerUpdateTransform(): void;
            createBird(V: any): void;
            createCactus(V: any): void;
            createCat(V: any, Y: any): void;
            createDog(V: any): void;
            createFox(V: any): void;
            createHealthBar(V: any): any;
            createLizard(V: any): void;
            createPanda(V: any): void;
            createPenguin(V: any): void;
            createReindeer(V: any): void;
            createRodent(V: any): void;
            createSheep(V: any): void;
            createSnowman(V: any): void;
            createSparkleCat(V: any, Y: any): void;
            createSparkleDog(V: any): void;
            createSparkleRodent(V: any): void;
            createTurtle(V: any, Y: any): void;
            damaged(): void;
            defeated(): void;
            destroy(): void;
            disableTempParent(t: any): void;
            displayDamage(V: any, Y: any, q: any, Q: any): void;
            displayHeal(V: any, Y: any): void;
            displayObjectUpdateTransform(): void;
            doBarrierAnimation(): void;
            doBarrierBreakAnimation(): void;
            doPuppetBreakAnimation(V: any): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            emote(V: any, Y: any, q: any): any;
            enableLocomotion(V: any, Y: any): void;
            enableTempParent(): any;
            endChat(): void;
            eventNames(): any;
            faceToward(V: any): void;
            flip(): void;
            float(V: any): void;
            getAt(V: any): any;
            getBounds(t: any, e: any): any;
            getByName(V: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getHitboxHeight(): any;
            getHitboxLeft(): any;
            getHitboxTop(): any;
            getHitboxWidth(): any;
            getIndex(V: any): any;
            getInjectedValue(V: any): any;
            getLocalBounds(e: any, r: any): any;
            getPosition(): any;
            getSource(): any;
            getTargetingOffset(): any;
            hasTooltip(): any;
            hideName(): void;
            highlight(V: any, Y: any, q: any, Q: any): void;
            hop(V: any, Y: any, q: any, Q: any): void;
            initListeners(): void;
            isDefeated(): any;
            isFacingLeft(): any;
            isHighlighted(): any;
            isMoving(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadPrefabs(): any;
            lockOpponentSpell(): void;
            moonwalk(): void;
            moveDown(V: any): any;
            moveUp(V: any): any;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onCreatureLevelUp(V: any, Y: any): void;
            onFxAnimationDone(): void;
            onStarsAdded(): void;
            pathTo(V: any): void;
            patrol(V: any, Y: any): void;
            play(V: any, Y: any): void;
            playAll(V: any): void;
            reload(V: any): void;
            remove(V: any, Y: any): any;
            removeAll(V: any): void;
            removeAllListeners(t: any): any;
            removeBetween(V: any, Y: any, q: any, Q: any): void;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            retreat(V: any): void;
            sendChildToBack(V: any): void;
            sendNpcClickedEvent(): void;
            setChildIndex(t: any, e: any): void;
            setElementAsModal(V: any): void;
            setHitbox(V: any): void;
            setNewTarget(V: any, Y: any): void;
            setParent(t: any): any;
            setPath(V: any, Y: any, q: any): void;
            setRenderState(V: any, Y: any): void;
            setSpriteDefaults(V: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            setup(V: any, Y: any): any;
            setupStand(V: any): void;
            setupWalk(V: any): void;
            setValidPath(V: any, Y: any, q: any, Q: any, X: any): void;
            shouldPlayRetreatOnDefeat(): any;
            showChat(V: any): void;
            showName(V: any): void;
            showTooltip(V: any, Y: any): void;
            sortChildren(): void;
            stand(): void;
            startChat(V: any): void;
            startLoad(): void;
            stopAllAnimations(): void;
            stopAnimation(V: any): void;
            stopListeners(): void;
            stopMoveTween(): void;
            stopMoving(): void;
            stopTweens(): void;
            swap(V: any, Y: any): void;
            swapChildren(t: any, e: any): void;
            switchOpponent(V: any): void;
            targetStopped(): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateTransform(): void;
            updateZ(): void;
            walk(): void;
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _game: Player["_playerContainer"]["_game"];
            _gsap: {
                id: number;
                harness: undefined;
                get(V: any, Y: any): any;
                set(V: any, Y: any): any;
                target: Player["_playerContainer"]["follow"];
            };
            _onLoad: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            _tempDisplayObjectParent: Player["_playerContainer"]["follow"]["tempDisplayObjectParent"];
            _trackedPointers: {};
            anchor: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            assets: string[];
            body: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _roundPixels: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                inputEnabled: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isLoaded: boolean;
                isMask: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                roundPixels: boolean;
                smoothed: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _cachedTint: number;
                _eventsCount: number;
                _height: number;
                _lastSortedIndex: number;
                _textureID: number;
                _textureTrimmedID: number;
                _tint: number;
                _tintRGB: number;
                _transformID: number;
                _transformTrimmedID: number;
                _width: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                blendMode: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                tint: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                frameName: string;
                key: string;
                pluginName: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                loadingTween: null;
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                scaleMax: null;
                scaleMin: null;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                transformCallbackContext: null;
                vertexTrimmedData: null;
                forcedHeight: undefined;
                forcedWidth: undefined;
                frame: undefined;
                onTextureLoaded: undefined;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _onAnchorUpdate(): void;
                _onTextureUpdate(): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(V: any): void;
                calculateBounds(): void;
                calculateTrimmedVertices(): any;
                calculateVertices(): void;
                checkCallback(): void;
                checkSpriteDimension(): void;
                containerUpdateTransform(): void;
                containsPoint(t: any): any;
                destroy(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                getOffsetX(): any;
                getOffsetY(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                loadNewTexture(V: any, Y: any, q: any, Q: any): void;
                loadTexture(V: any, Y: any): void;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                rotateMiddleBased(V: any): void;
                sendChildToBack(V: any): void;
                setActive(V: any): void;
                setChildIndex(t: any, e: any): void;
                setFrame(V: any): void;
                setParent(t: any): any;
                setTexture(V: any, Y: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateFrame(Y: any): void;
                updateTexture(V: any): void;
                updateTransform(): void;
                indices: Uint16Array;
                uvs: Float32Array;
                vertexData: Float32Array;
                _anchor: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["follow"]["body"];
                };
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["follow"]["body"]["tempDisplayObjectParent"];
                _texture: {
                    noFrame: boolean;
                    valid: boolean;
                    _eventsCount: number;
                    _rotate: number;
                    _updateID: number;
                    height: number;
                    resolution: number;
                    rotate: number;
                    width: number;
                    trim: null;
                    uvMatrix: null;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    clone(): any;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    onBaseTextureUpdated(t: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    update(): void;
                    updateUvs(): void;
                    _events: any /* too deep */;
                    _frame: any /* too deep */;
                    _uvs: any /* too deep */;
                    baseTexture: any /* too deep */;
                    defaultAnchor: any /* too deep */;
                    frame: any /* too deep */;
                    orig: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                };
                _trackedPointers: {};
                anchor: Player["_playerContainer"]["follow"]["body"]["_anchor"];
                animations: never;
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                cameraOffset: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                children: never[];
                events: {
                    destroy(): void;
                    onAddedToGroup: any /* too deep */;
                    onAnimationComplete: any /* too deep */;
                    onAnimationLoop: any /* too deep */;
                    onAnimationStart: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onDragStart: any /* too deep */;
                    onDragStop: any /* too deep */;
                    onDragUpdate: any /* too deep */;
                    onEnterBounds: any /* too deep */;
                    onInputDown: any /* too deep */;
                    onInputOut: any /* too deep */;
                    onInputOver: any /* too deep */;
                    onInputUp: any /* too deep */;
                    onOutOfBounds: any /* too deep */;
                    onRemovedFromGroup: any /* too deep */;
                    onRemovedFromWorld: any /* too deep */;
                    parent: Player["_playerContainer"]["follow"]["body"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                parent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    _isModalWithTransparency: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    exists: boolean;
                    fixedToCamera: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isModalWithTransparency: boolean;
                    isSprite: boolean;
                    pendingDestroy: boolean;
                    renderable: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    bottom: number;
                    cacheAsBitmapMultisample: number;
                    centerX: number;
                    centerY: number;
                    height: number;
                    left: number;
                    length: number;
                    offsetX: number;
                    offsetY: number;
                    renderId: number;
                    right: number;
                    rotation: number;
                    tabIndex: number;
                    top: number;
                    width: number;
                    worldAlpha: number;
                    worldRotation: number;
                    x: number;
                    y: number;
                    z: number;
                    zIndex: number;
                    _sortProperty: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    name: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    add(V: any, Y: any): any;
                    addAt(V: any, Y: any): any;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    bringChildToTop(V: any): void;
                    callAll(V: any, Y: any): void;
                    callbackFromArray(V: any, Y: any): any;
                    destroy(Y: any): void;
                    getAt(V: any): any;
                    getByName(V: any): any;
                    getChildIndex(t: any): any;
                    getIndex(V: any): any;
                    getInjectedValue(V: any): any;
                    moveDown(V: any): any;
                    moveUp(V: any): any;
                    onChildrenChange(t: any): void;
                    remove(V: any, Y: any): any;
                    removeAll(V: any): void;
                    removeBetween(V: any, Y: any, q: any, Q: any): void;
                    sendChildToBack(V: any): void;
                    setElementAsModal(V: any): void;
                    swap(V: any, Y: any): void;
                    swapChildren(t: any, e: any): void;
                    update(): void;
                    updateZ(): void;
                    _localBounds: any /* too deep */;
                    _localBoundsRect: any /* too deep */;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    containerUpdateTransform(): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(e: any, r: any): any;
                    tempDisplayObjectParent: any /* too deep */;
                    hasTooltip(): any;
                    highlight(V: any, Y: any, q: any, Q: any): void;
                    isHighlighted(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setRenderState(V: any, Y: any): void;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    showTooltip(V: any, Y: any): void;
                    sortChildren(): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _game: Player["_playerContainer"]["_game"];
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    anchor: any /* too deep */;
                    bounds: any /* too deep */;
                    children: any /* too deep */;
                    events: any /* too deep */;
                    game: Player["_playerContainer"]["_game"];
                    localTransform: any /* too deep */;
                    metricsManager: Player["_playerContainer"]["collisionBody"]["parent"]["metricsManager"];
                    onDestroy: any /* too deep */;
                    parent: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    world: any /* too deep */;
                    worldGamePosition: any /* too deep */;
                    worldPosition: any /* too deep */;
                    worldScale: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                previousPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                texture: Player["_playerContainer"]["follow"]["body"]["_texture"];
                trackedPointers: Player["_playerContainer"]["follow"]["body"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["follow"]["body"]["localTransform"];
                    pivot: Player["_playerContainer"]["follow"]["body"]["pivot"];
                    position: Player["_playerContainer"]["follow"]["body"]["position"];
                    scale: Player["_playerContainer"]["follow"]["body"]["scale"];
                    skew: Player["_playerContainer"]["follow"]["body"]["skew"];
                    worldTransform: any /* too deep */;
                };
                transformCallback: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["follow"]["body"]["scale"];
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            chatText: {
                _isCreated: boolean;
                Active: boolean;
                isActive: boolean;
                IsActiveInHierarchy: boolean;
                isCreated: boolean;
                alignment: number;
                Alignment: number;
                BlendMode: number;
                FontSize: number;
                FontStyle: number;
                LineSpacing: number;
                ShadowAlpha: number;
                ShadowAngle: number;
                ShadowBlur: number;
                ShadowDistance: number;
                StrokeThickness: number;
                TextHeight: number;
                TextWidth: number;
                FillColor: string;
                Font: string;
                ShadowColor: string;
                StrokeColor: string;
                TextConfig: undefined;
                create(): any;
                customDeserialize(V: any): void;
                destroy(): void;
                firstUpdate(): void;
                getInjectedValue(V: any): any;
                isValidColor(V: any): any;
                onDisable(): void;
                onEnable(): void;
                postCreate(): void;
                postDeserialize(): void;
                preDeserialize(V: any): void;
                setText(V: any): void;
                update(): void;
                updateAlignment(): void;
                updateFunction(): void;
                updateText(): void;
                gameObject: {
                    _destroyed: boolean;
                    _isActive: boolean;
                    _isActiveInHierarchy: boolean;
                    active: boolean;
                    activeInHierarchy: boolean;
                    isDestroyed: boolean;
                    _name: string;
                    layer: string;
                    name: string;
                    _parent: null;
                    _transform: null;
                    parent: null;
                    transform: null;
                    activeInHierarchyChanged(): void;
                    addChild(V: any): void;
                    addChildAt(V: any, Y: any): void;
                    addComponent(V: any, Y: any): any;
                    bringToFront(): void;
                    destroy(): void;
                    destroyDeferred(): void;
                    dispatchComponentAddedInHierarchy(V: any, Y: any): void;
                    findChildByName(V: any): any;
                    findComponent(V: any): any;
                    findComponentInChildren(V: any, Y: any): any;
                    findComponentInParent(V: any, Y: any): any;
                    findComponents(V: any): any;
                    findComponentsInChildren(V: any, Y: any): any;
                    firstUpdate(): void;
                    getRenderOrder(): any;
                    hasComponent(V: any): any;
                    isActiveInHierarchy(): any;
                    isInBack(): any;
                    isInFront(): any;
                    removeComponent(V: any): void;
                    removeFromParent(): any;
                    sendToBack(): void;
                    setLayer(V: any, Y: any): void;
                    setParent(V: any, Y: any): any;
                    setRenderOrder(V: any): void;
                    update(): void;
                    updateFunction(): void;
                    _children: any /* too deep */;
                    _components: any /* too deep */;
                    _legacyTransform: any /* too deep */;
                    children: any /* too deep */;
                    components: any /* too deep */;
                    legacyTransform: any /* too deep */;
                    onActiveChanged: any /* too deep */;
                    onActiveInHierarchyChanged: any /* too deep */;
                    onChildAdded: any /* too deep */;
                    onChildRemoved: any /* too deep */;
                    onComponentAdded: any /* too deep */;
                    onComponentAddedToHierarchy: any /* too deep */;
                    onComponentRemoved: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onHierarchyChanged: any /* too deep */;
                    onLayerChanged: any /* too deep */;
                };
                GameObject: Player["_playerContainer"]["follow"]["chatText"]["gameObject"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnActiveChanged: Player["_playerContainer"]["follow"]["chatText"]["onActiveChanged"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnDestroy: Player["_playerContainer"]["follow"]["chatText"]["onDestroy"];
                Source: {
                    source: string;
                    cleanUp(): void;
                    getText(): any;
                    setText(V: any): void;
                    onTextChanged: any /* too deep */;
                    OnTextChanged: any /* too deep */;
                };
                textObject: {
                    _isCreated: boolean;
                    _underline: boolean;
                    Active: boolean;
                    isActive: boolean;
                    IsActiveInHierarchy: boolean;
                    isCreated: boolean;
                    resizeRectTransform: boolean;
                    underline: boolean;
                    wordWrap: boolean;
                    _paddingX: number;
                    _paddingY: number;
                    blendMode: number;
                    dropShadowAlpha: number;
                    dropShadowAngle: number;
                    dropShadowBlur: number;
                    dropShadowDistance: number;
                    fontSize: number;
                    lineSpacing: number;
                    paddingX: number;
                    paddingY: number;
                    strokeThickness: number;
                    tint: number;
                    wordWrapWidth: number;
                    _boundsAlignH: string;
                    _boundsAlignV: string;
                    align: string;
                    boundsAlignH: string;
                    boundsAlignV: string;
                    dropShadowColor: string;
                    fill: string;
                    font: string;
                    fontStyle: string;
                    fontWeight: string;
                    stroke: string;
                    text: string;
                    _filter: null;
                    _parentRenderComponent: null;
                    _underlineEndIndex: null;
                    _underlineStartIndex: null;
                    underlineEndIndex: null;
                    underlineStartIndex: null;
                    applyScalingToTransform(V: any, Y: any, q: any): void;
                    applyTextPivot(): void;
                    applyToMatrix(V: any, Y: any): void;
                    attachRootContainer(): void;
                    attachRootToCurrentLayer(): void;
                    attachRootToRenderComponentParent(): void;
                    buildRenderComponentOrder(V: any): any;
                    clearListeners(): void;
                    clearParentRenderComponent(): void;
                    componentAddedToHierarchy(V: any, Y: any): void;
                    create(): any;
                    createPixiTransformOverride(): any;
                    createTextObject(): void;
                    customDeserialize(V: any): void;
                    destroy(): void;
                    drawUnderline(V: any, Y: any): void;
                    findChildIndex(): any;
                    firstUpdate(): void;
                    gameObjectHierarchyChanged(): void;
                    getDimensions(): any;
                    getInjectedValue(V: any): any;
                    getOverriddenTransform(): any;
                    getParentContainer(): any;
                    getRootContainer(): any;
                    isValidColor(V: any): any;
                    onDisable(): void;
                    onEnable(): void;
                    onLegacyTransformDestroyed(): void;
                    onOverrideTransformDestroyed(): void;
                    onParentRenderComponentDestroyed(): void;
                    onRenderComponentContainerWasSet(): void;
                    overridePIXIUpdateFunction(): void;
                    postCreate(): void;
                    postDeserialize(): void;
                    preDeserialize(V: any): void;
                    resetPIXIUpdateFunction(): void;
                    resizeRectTransformUponTextChange(): void;
                    setFilter(V: any): void;
                    setRootContainer(V: any): void;
                    setUpDisplayObject(V: any): void;
                    trackTransformAddingToOverride(V: any): void;
                    update(): void;
                    updateFunction(): void;
                    updateText(): void;
                    updateTextSize(): void;
                    updateVisibility(): void;
                    _rootContainer: any /* too deep */;
                    _textBounds: any /* too deep */;
                    _textSize: any /* too deep */;
                    _underlines: any /* too deep */;
                    gameObject: Player["_playerContainer"]["follow"]["chatText"]["gameObject"];
                    GameObject: Player["_playerContainer"]["follow"]["chatText"]["gameObject"];
                    onActiveChanged: any /* too deep */;
                    OnActiveChanged: any /* too deep */;
                    onDestroy: any /* too deep */;
                    OnDestroy: any /* too deep */;
                    onRootContainerSet: any /* too deep */;
                    Source: any /* too deep */;
                    textObject: any /* too deep */;
                    TextObject: any /* too deep */;
                    textSource: any /* too deep */;
                };
                TextObject: Player["_playerContainer"]["follow"]["chatText"]["textObject"];
                textSource: Player["_playerContainer"]["follow"]["chatText"]["Source"];
            };
            children: any /* too deep */[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["follow"];
            };
            followController: {
                lastTargetDistance: number;
                waitingToFollowDelay: number;
                queuedPath: null;
                getPointNearPathEnd(V: any, Y: any, q: any): any;
                handleDestroy(): void;
                stop(): void;
                targetMoving(V: any): void;
                targetStopped(): void;
                update(): void;
                game: Player["_playerContainer"]["_game"];
                lastTargetPosition: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                source: Player["_playerContainer"]["follow"];
                target: Player["_playerContainer"];
            };
            game: Player["_playerContainer"]["_game"];
            indicatorE: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _isModalWithTransparency: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isModalWithTransparency: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                length: number;
                offsetX: number;
                offsetY: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                _sortProperty: string;
                accessiblePointerEvents: string;
                accessibleType: string;
                name: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                add(V: any, Y: any): any;
                addAt(V: any, Y: any): any;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                bringChildToTop(V: any): void;
                callAll(V: any, Y: any): void;
                callbackFromArray(V: any, Y: any): any;
                destroy(Y: any): void;
                getAt(V: any): any;
                getByName(V: any): any;
                getChildIndex(t: any): any;
                getIndex(V: any): any;
                getInjectedValue(V: any): any;
                moveDown(V: any): any;
                moveUp(V: any): any;
                onChildrenChange(t: any): void;
                remove(V: any, Y: any): any;
                removeAll(V: any): void;
                removeBetween(V: any, Y: any, q: any, Q: any): void;
                sendChildToBack(V: any): void;
                setElementAsModal(V: any): void;
                swap(V: any, Y: any): void;
                swapChildren(t: any, e: any): void;
                update(): void;
                updateZ(): void;
                _localBounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                calculateBounds(): void;
                containerUpdateTransform(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(e: any, r: any): any;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                hasTooltip(): any;
                highlight(V: any, Y: any, q: any, Q: any): void;
                isHighlighted(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                setChildIndex(t: any, e: any): void;
                setParent(t: any): any;
                setRenderState(V: any, Y: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                showTooltip(V: any, Y: any): void;
                sortChildren(): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _game: Player["_playerContainer"]["_game"];
                _tempDisplayObjectParent: Player["_playerContainer"]["follow"]["indicatorE"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                anchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                children: never[];
                events: {
                    destroy(): void;
                    onAddedToGroup: any /* too deep */;
                    onAnimationComplete: any /* too deep */;
                    onAnimationLoop: any /* too deep */;
                    onAnimationStart: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onDragStart: any /* too deep */;
                    onDragStop: any /* too deep */;
                    onDragUpdate: any /* too deep */;
                    onEnterBounds: any /* too deep */;
                    onInputDown: any /* too deep */;
                    onInputOut: any /* too deep */;
                    onInputOver: any /* too deep */;
                    onInputUp: any /* too deep */;
                    onOutOfBounds: any /* too deep */;
                    onRemovedFromGroup: any /* too deep */;
                    onRemovedFromWorld: any /* too deep */;
                    parent: Player["_playerContainer"]["follow"]["indicatorE"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                metricsManager: Player["_playerContainer"]["collisionBody"]["parent"]["metricsManager"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["follow"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                trackedPointers: Player["_playerContainer"]["follow"]["indicatorE"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["follow"]["indicatorE"]["localTransform"];
                    pivot: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"];
                    position: Player["_playerContainer"]["follow"]["indicatorE"]["position"];
                    scale: Player["_playerContainer"]["follow"]["indicatorE"]["scale"];
                    skew: Player["_playerContainer"]["follow"]["indicatorE"]["skew"];
                    worldTransform: any /* too deep */;
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldGamePosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["follow"]["indicatorE"]["scale"];
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            itemData: {
                member: number;
                price: number;
                rarity: number;
                flavorText: string;
                name: string;
                tag: string;
            };
            legs: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _roundPixels: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                inputEnabled: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isLoaded: boolean;
                isMask: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                roundPixels: boolean;
                smoothed: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _cachedTint: number;
                _eventsCount: number;
                _height: number;
                _lastSortedIndex: number;
                _textureID: number;
                _textureTrimmedID: number;
                _tint: number;
                _tintRGB: number;
                _transformID: number;
                _transformTrimmedID: number;
                _width: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                blendMode: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                tint: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                frameName: string;
                key: string;
                pluginName: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                loadingTween: null;
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                scaleMax: null;
                scaleMin: null;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                transformCallbackContext: null;
                vertexTrimmedData: null;
                forcedHeight: undefined;
                forcedWidth: undefined;
                frame: undefined;
                onTextureLoaded: undefined;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _onAnchorUpdate(): void;
                _onTextureUpdate(): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(V: any): void;
                calculateBounds(): void;
                calculateTrimmedVertices(): any;
                calculateVertices(): void;
                checkCallback(): void;
                checkSpriteDimension(): void;
                containerUpdateTransform(): void;
                containsPoint(t: any): any;
                destroy(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                getOffsetX(): any;
                getOffsetY(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                loadNewTexture(V: any, Y: any, q: any, Q: any): void;
                loadTexture(V: any, Y: any): void;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                rotateMiddleBased(V: any): void;
                sendChildToBack(V: any): void;
                setActive(V: any): void;
                setChildIndex(t: any, e: any): void;
                setFrame(V: any): void;
                setParent(t: any): any;
                setTexture(V: any, Y: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateFrame(Y: any): void;
                updateTexture(V: any): void;
                updateTransform(): void;
                indices: Uint16Array;
                uvs: Float32Array;
                vertexData: Float32Array;
                _anchor: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["follow"]["legs"];
                };
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["follow"]["legs"]["tempDisplayObjectParent"];
                _texture: {
                    noFrame: boolean;
                    valid: boolean;
                    _eventsCount: number;
                    _rotate: number;
                    _updateID: number;
                    height: number;
                    resolution: number;
                    rotate: number;
                    width: number;
                    uvMatrix: null;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    clone(): any;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    onBaseTextureUpdated(t: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    update(): void;
                    updateUvs(): void;
                    _events: any /* too deep */;
                    _frame: any /* too deep */;
                    _uvs: any /* too deep */;
                    baseTexture: any /* too deep */;
                    defaultAnchor: any /* too deep */;
                    frame: any /* too deep */;
                    orig: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                    trim: any /* too deep */;
                };
                _trackedPointers: {};
                anchor: Player["_playerContainer"]["follow"]["legs"]["_anchor"];
                animations: never;
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                cameraOffset: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                children: never[];
                events: {
                    destroy(): void;
                    onAddedToGroup: any /* too deep */;
                    onAnimationComplete: any /* too deep */;
                    onAnimationLoop: any /* too deep */;
                    onAnimationStart: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onDragStart: any /* too deep */;
                    onDragStop: any /* too deep */;
                    onDragUpdate: any /* too deep */;
                    onEnterBounds: any /* too deep */;
                    onInputDown: any /* too deep */;
                    onInputOut: any /* too deep */;
                    onInputOver: any /* too deep */;
                    onInputUp: any /* too deep */;
                    onOutOfBounds: any /* too deep */;
                    onRemovedFromGroup: any /* too deep */;
                    onRemovedFromWorld: any /* too deep */;
                    parent: Player["_playerContainer"]["follow"]["legs"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                parent: Player["_playerContainer"]["follow"]["body"]["parent"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                previousPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                texture: Player["_playerContainer"]["follow"]["legs"]["_texture"];
                trackedPointers: Player["_playerContainer"]["follow"]["legs"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["follow"]["legs"]["localTransform"];
                    pivot: Player["_playerContainer"]["follow"]["legs"]["pivot"];
                    position: Player["_playerContainer"]["follow"]["legs"]["position"];
                    scale: Player["_playerContainer"]["follow"]["legs"]["scale"];
                    skew: Player["_playerContainer"]["follow"]["legs"]["skew"];
                    worldTransform: any /* too deep */;
                };
                transformCallback: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["follow"]["legs"]["scale"];
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            metricsManager: Player["_playerContainer"]["collisionBody"]["parent"]["metricsManager"];
            nameText: {
                _isCreated: boolean;
                Active: boolean;
                isActive: boolean;
                IsActiveInHierarchy: boolean;
                isCreated: boolean;
                alignment: number;
                Alignment: number;
                BlendMode: number;
                FontSize: number;
                FontStyle: number;
                LineSpacing: number;
                ShadowAlpha: number;
                ShadowAngle: number;
                ShadowBlur: number;
                ShadowDistance: number;
                StrokeThickness: number;
                TextHeight: number;
                TextWidth: number;
                FillColor: string;
                Font: string;
                ShadowColor: string;
                StrokeColor: string;
                TextConfig: undefined;
                create(): any;
                customDeserialize(V: any): void;
                destroy(): void;
                firstUpdate(): void;
                getInjectedValue(V: any): any;
                isValidColor(V: any): any;
                onDisable(): void;
                onEnable(): void;
                postCreate(): void;
                postDeserialize(): void;
                preDeserialize(V: any): void;
                setText(V: any): void;
                update(): void;
                updateAlignment(): void;
                updateFunction(): void;
                updateText(): void;
                gameObject: {
                    _destroyed: boolean;
                    _isActive: boolean;
                    _isActiveInHierarchy: boolean;
                    active: boolean;
                    activeInHierarchy: boolean;
                    isDestroyed: boolean;
                    _name: string;
                    layer: string;
                    name: string;
                    _parent: null;
                    _transform: null;
                    parent: null;
                    transform: null;
                    activeInHierarchyChanged(): void;
                    addChild(V: any): void;
                    addChildAt(V: any, Y: any): void;
                    addComponent(V: any, Y: any): any;
                    bringToFront(): void;
                    destroy(): void;
                    destroyDeferred(): void;
                    dispatchComponentAddedInHierarchy(V: any, Y: any): void;
                    findChildByName(V: any): any;
                    findComponent(V: any): any;
                    findComponentInChildren(V: any, Y: any): any;
                    findComponentInParent(V: any, Y: any): any;
                    findComponents(V: any): any;
                    findComponentsInChildren(V: any, Y: any): any;
                    firstUpdate(): void;
                    getRenderOrder(): any;
                    hasComponent(V: any): any;
                    isActiveInHierarchy(): any;
                    isInBack(): any;
                    isInFront(): any;
                    removeComponent(V: any): void;
                    removeFromParent(): any;
                    sendToBack(): void;
                    setLayer(V: any, Y: any): void;
                    setParent(V: any, Y: any): any;
                    setRenderOrder(V: any): void;
                    update(): void;
                    updateFunction(): void;
                    _children: any /* too deep */;
                    _components: any /* too deep */;
                    _legacyTransform: any /* too deep */;
                    children: any /* too deep */;
                    components: any /* too deep */;
                    legacyTransform: any /* too deep */;
                    onActiveChanged: any /* too deep */;
                    onActiveInHierarchyChanged: any /* too deep */;
                    onChildAdded: any /* too deep */;
                    onChildRemoved: any /* too deep */;
                    onComponentAdded: any /* too deep */;
                    onComponentAddedToHierarchy: any /* too deep */;
                    onComponentRemoved: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onHierarchyChanged: any /* too deep */;
                    onLayerChanged: any /* too deep */;
                };
                GameObject: Player["_playerContainer"]["follow"]["nameText"]["gameObject"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnActiveChanged: Player["_playerContainer"]["follow"]["nameText"]["onActiveChanged"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnDestroy: Player["_playerContainer"]["follow"]["nameText"]["onDestroy"];
                Source: {
                    source: string;
                    cleanUp(): void;
                    getText(): any;
                    setText(V: any): void;
                    onTextChanged: any /* too deep */;
                    OnTextChanged: any /* too deep */;
                };
                textObject: {
                    _isCreated: boolean;
                    _underline: boolean;
                    Active: boolean;
                    isActive: boolean;
                    IsActiveInHierarchy: boolean;
                    isCreated: boolean;
                    resizeRectTransform: boolean;
                    underline: boolean;
                    wordWrap: boolean;
                    _paddingX: number;
                    _paddingY: number;
                    blendMode: number;
                    dropShadowAlpha: number;
                    dropShadowAngle: number;
                    dropShadowBlur: number;
                    dropShadowDistance: number;
                    fontSize: number;
                    lineSpacing: number;
                    paddingX: number;
                    paddingY: number;
                    strokeThickness: number;
                    tint: number;
                    wordWrapWidth: number;
                    _boundsAlignH: string;
                    _boundsAlignV: string;
                    align: string;
                    boundsAlignH: string;
                    boundsAlignV: string;
                    dropShadowColor: string;
                    fill: string;
                    font: string;
                    fontStyle: string;
                    fontWeight: string;
                    stroke: string;
                    text: string;
                    _filter: null;
                    _parentRenderComponent: null;
                    _underlineEndIndex: null;
                    _underlineStartIndex: null;
                    underlineEndIndex: null;
                    underlineStartIndex: null;
                    applyScalingToTransform(V: any, Y: any, q: any): void;
                    applyTextPivot(): void;
                    applyToMatrix(V: any, Y: any): void;
                    attachRootContainer(): void;
                    attachRootToCurrentLayer(): void;
                    attachRootToRenderComponentParent(): void;
                    buildRenderComponentOrder(V: any): any;
                    clearListeners(): void;
                    clearParentRenderComponent(): void;
                    componentAddedToHierarchy(V: any, Y: any): void;
                    create(): any;
                    createPixiTransformOverride(): any;
                    createTextObject(): void;
                    customDeserialize(V: any): void;
                    destroy(): void;
                    drawUnderline(V: any, Y: any): void;
                    findChildIndex(): any;
                    firstUpdate(): void;
                    gameObjectHierarchyChanged(): void;
                    getDimensions(): any;
                    getInjectedValue(V: any): any;
                    getOverriddenTransform(): any;
                    getParentContainer(): any;
                    getRootContainer(): any;
                    isValidColor(V: any): any;
                    onDisable(): void;
                    onEnable(): void;
                    onLegacyTransformDestroyed(): void;
                    onOverrideTransformDestroyed(): void;
                    onParentRenderComponentDestroyed(): void;
                    onRenderComponentContainerWasSet(): void;
                    overridePIXIUpdateFunction(): void;
                    postCreate(): void;
                    postDeserialize(): void;
                    preDeserialize(V: any): void;
                    resetPIXIUpdateFunction(): void;
                    resizeRectTransformUponTextChange(): void;
                    setFilter(V: any): void;
                    setRootContainer(V: any): void;
                    setUpDisplayObject(V: any): void;
                    trackTransformAddingToOverride(V: any): void;
                    update(): void;
                    updateFunction(): void;
                    updateText(): void;
                    updateTextSize(): void;
                    updateVisibility(): void;
                    _rootContainer: any /* too deep */;
                    _textBounds: any /* too deep */;
                    _textSize: any /* too deep */;
                    _underlines: any /* too deep */;
                    gameObject: Player["_playerContainer"]["follow"]["nameText"]["gameObject"];
                    GameObject: Player["_playerContainer"]["follow"]["nameText"]["gameObject"];
                    onActiveChanged: any /* too deep */;
                    OnActiveChanged: any /* too deep */;
                    onDestroy: any /* too deep */;
                    OnDestroy: any /* too deep */;
                    onRootContainerSet: any /* too deep */;
                    Source: any /* too deep */;
                    textObject: any /* too deep */;
                    TextObject: any /* too deep */;
                    textSource: any /* too deep */;
                };
                TextObject: Player["_playerContainer"]["follow"]["nameText"]["textObject"];
                textSource: Player["_playerContainer"]["follow"]["nameText"]["Source"];
            };
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            OnLoad: Player["_playerContainer"]["follow"]["_onLoad"];
            onPathFound: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onStand: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onStopped: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            onTargetStopped: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            parent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                height: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                width: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                name: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _recursivePostUpdateTransform(): void;
                _localBounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                _cacheAsBitmapDestroy(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                calculateBounds(): void;
                containerUpdateTransform(): void;
                destroy(Y: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(e: any, r: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                setChildIndex(t: any, e: any): void;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["follow"]["parent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                children: (any /* too deep */ | Player["_playerContainer"]["follow"] | Player["_playerContainer"])[];
                gameObjectRef: {
                    _destroyed: boolean;
                    _isActive: boolean;
                    _isActiveInHierarchy: boolean;
                    active: boolean;
                    activeInHierarchy: boolean;
                    isDestroyed: boolean;
                    _name: string;
                    layer: string;
                    name: string;
                    _transform: null;
                    transform: null;
                    activeInHierarchyChanged(): void;
                    addChild(V: any): void;
                    addChildAt(V: any, Y: any): void;
                    addComponent(V: any, Y: any): any;
                    bringToFront(): void;
                    destroy(): void;
                    destroyDeferred(): void;
                    dispatchComponentAddedInHierarchy(V: any, Y: any): void;
                    findChildByName(V: any): any;
                    findComponent(V: any): any;
                    findComponentInChildren(V: any, Y: any): any;
                    findComponentInParent(V: any, Y: any): any;
                    findComponents(V: any): any;
                    findComponentsInChildren(V: any, Y: any): any;
                    firstUpdate(): void;
                    getRenderOrder(): any;
                    hasComponent(V: any): any;
                    isActiveInHierarchy(): any;
                    isInBack(): any;
                    isInFront(): any;
                    removeComponent(V: any): void;
                    removeFromParent(): any;
                    sendToBack(): void;
                    setLayer(V: any, Y: any): void;
                    setParent(V: any, Y: any): any;
                    setRenderOrder(V: any): void;
                    update(): void;
                    updateFunction(): void;
                    _children: any /* too deep */;
                    _components: any /* too deep */;
                    _legacyTransform: any /* too deep */;
                    _parent: any /* too deep */;
                    children: any /* too deep */;
                    components: any /* too deep */;
                    legacyTransform: any /* too deep */;
                    onActiveChanged: any /* too deep */;
                    onActiveInHierarchyChanged: any /* too deep */;
                    onChildAdded: any /* too deep */;
                    onChildRemoved: any /* too deep */;
                    onComponentAdded: any /* too deep */;
                    onComponentAddedToHierarchy: any /* too deep */;
                    onComponentRemoved: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onHierarchyChanged: any /* too deep */;
                    onLayerChanged: any /* too deep */;
                    parent: any /* too deep */;
                };
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    exists: boolean;
                    fixedToCamera: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    name: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _recursivePostUpdateTransform(): void;
                    _localBounds: any /* too deep */;
                    _localBoundsRect: any /* too deep */;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    containerUpdateTransform(): void;
                    destroy(Y: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(e: any, r: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    update(): void;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    children: any /* too deep */;
                    gameObjectRef: any /* too deep */;
                    localTransform: any /* too deep */;
                    onDestroy: any /* too deep */;
                    parent: Player["_playerContainer"]["_game"]["_add"]["stage"];
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["follow"]["parent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["follow"]["parent"]["localTransform"];
                    pivot: Player["_playerContainer"]["follow"]["parent"]["pivot"];
                    position: Player["_playerContainer"]["follow"]["parent"]["position"];
                    scale: Player["_playerContainer"]["follow"]["parent"]["scale"];
                    skew: Player["_playerContainer"]["follow"]["parent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["follow"]["localTransform"];
                    pivot: Player["_playerContainer"]["follow"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["follow"]["pivot"]["scope"];
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["follow"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["follow"]["pivot"]["scope"];
            };
            source: never;
            sprite: Player["_playerContainer"]["follow"]["body"]["parent"];
            sprites: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _isModalWithTransparency: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isModalWithTransparency: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                length: number;
                offsetX: number;
                offsetY: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                _sortProperty: string;
                accessiblePointerEvents: string;
                accessibleType: string;
                name: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                add(V: any, Y: any): any;
                addAt(V: any, Y: any): any;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                bringChildToTop(V: any): void;
                callAll(V: any, Y: any): void;
                callbackFromArray(V: any, Y: any): any;
                destroy(Y: any): void;
                getAt(V: any): any;
                getByName(V: any): any;
                getChildIndex(t: any): any;
                getIndex(V: any): any;
                getInjectedValue(V: any): any;
                moveDown(V: any): any;
                moveUp(V: any): any;
                onChildrenChange(t: any): void;
                remove(V: any, Y: any): any;
                removeAll(V: any): void;
                removeBetween(V: any, Y: any, q: any, Q: any): void;
                sendChildToBack(V: any): void;
                setElementAsModal(V: any): void;
                swap(V: any, Y: any): void;
                swapChildren(t: any, e: any): void;
                update(): void;
                updateZ(): void;
                _localBounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                calculateBounds(): void;
                containerUpdateTransform(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(e: any, r: any): any;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                hasTooltip(): any;
                highlight(V: any, Y: any, q: any, Q: any): void;
                isHighlighted(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                setChildIndex(t: any, e: any): void;
                setParent(t: any): any;
                setRenderState(V: any, Y: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                showTooltip(V: any, Y: any): void;
                sortChildren(): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _game: Player["_playerContainer"]["_game"];
                _tempDisplayObjectParent: Player["_playerContainer"]["follow"]["sprites"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                anchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                children: Player["_playerContainer"]["follow"]["body"]["parent"][];
                events: {
                    destroy(): void;
                    onAddedToGroup: any /* too deep */;
                    onAnimationComplete: any /* too deep */;
                    onAnimationLoop: any /* too deep */;
                    onAnimationStart: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onDragStart: any /* too deep */;
                    onDragStop: any /* too deep */;
                    onDragUpdate: any /* too deep */;
                    onEnterBounds: any /* too deep */;
                    onInputDown: any /* too deep */;
                    onInputOut: any /* too deep */;
                    onInputOver: any /* too deep */;
                    onInputUp: any /* too deep */;
                    onOutOfBounds: any /* too deep */;
                    onRemovedFromGroup: any /* too deep */;
                    onRemovedFromWorld: any /* too deep */;
                    parent: Player["_playerContainer"]["follow"]["sprites"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                metricsManager: Player["_playerContainer"]["collisionBody"]["parent"]["metricsManager"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["follow"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    _gsap: any /* too deep */;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                trackedPointers: Player["_playerContainer"]["follow"]["sprites"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["follow"]["sprites"]["localTransform"];
                    pivot: Player["_playerContainer"]["follow"]["sprites"]["pivot"];
                    position: Player["_playerContainer"]["follow"]["sprites"]["position"];
                    scale: Player["_playerContainer"]["follow"]["sprites"]["scale"];
                    skew: Player["_playerContainer"]["follow"]["sprites"]["skew"];
                    worldTransform: any /* too deep */;
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldGamePosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["follow"]["sprites"]["scale"];
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            standTween: any /* too deep */[];
            tail: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _roundPixels: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                inputEnabled: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isLoaded: boolean;
                isMask: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                roundPixels: boolean;
                smoothed: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _cachedTint: number;
                _eventsCount: number;
                _height: number;
                _lastSortedIndex: number;
                _textureID: number;
                _textureTrimmedID: number;
                _tint: number;
                _tintRGB: number;
                _transformID: number;
                _transformTrimmedID: number;
                _width: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                blendMode: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                tint: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                frameName: string;
                key: string;
                pluginName: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                loadingTween: null;
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                scaleMax: null;
                scaleMin: null;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                transformCallbackContext: null;
                vertexTrimmedData: null;
                forcedHeight: undefined;
                forcedWidth: undefined;
                frame: undefined;
                onTextureLoaded: undefined;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _onAnchorUpdate(): void;
                _onTextureUpdate(): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(V: any): void;
                calculateBounds(): void;
                calculateTrimmedVertices(): any;
                calculateVertices(): void;
                checkCallback(): void;
                checkSpriteDimension(): void;
                containerUpdateTransform(): void;
                containsPoint(t: any): any;
                destroy(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                getOffsetX(): any;
                getOffsetY(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                loadNewTexture(V: any, Y: any, q: any, Q: any): void;
                loadTexture(V: any, Y: any): void;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                rotateMiddleBased(V: any): void;
                sendChildToBack(V: any): void;
                setActive(V: any): void;
                setChildIndex(t: any, e: any): void;
                setFrame(V: any): void;
                setParent(t: any): any;
                setTexture(V: any, Y: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateFrame(Y: any): void;
                updateTexture(V: any): void;
                updateTransform(): void;
                indices: Uint16Array;
                uvs: Float32Array;
                vertexData: Float32Array;
                _anchor: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["follow"]["tail"];
                };
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["follow"]["tail"]["tempDisplayObjectParent"];
                _texture: {
                    noFrame: boolean;
                    valid: boolean;
                    _eventsCount: number;
                    _rotate: number;
                    _updateID: number;
                    height: number;
                    resolution: number;
                    rotate: number;
                    width: number;
                    trim: null;
                    uvMatrix: null;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    clone(): any;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    onBaseTextureUpdated(t: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    update(): void;
                    updateUvs(): void;
                    _events: any /* too deep */;
                    _frame: any /* too deep */;
                    _uvs: any /* too deep */;
                    baseTexture: any /* too deep */;
                    defaultAnchor: any /* too deep */;
                    frame: any /* too deep */;
                    orig: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                };
                _trackedPointers: {};
                anchor: Player["_playerContainer"]["follow"]["tail"]["_anchor"];
                animations: never;
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                cameraOffset: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                children: never[];
                events: {
                    destroy(): void;
                    onAddedToGroup: any /* too deep */;
                    onAnimationComplete: any /* too deep */;
                    onAnimationLoop: any /* too deep */;
                    onAnimationStart: any /* too deep */;
                    onDestroy: any /* too deep */;
                    onDragStart: any /* too deep */;
                    onDragStop: any /* too deep */;
                    onDragUpdate: any /* too deep */;
                    onEnterBounds: any /* too deep */;
                    onInputDown: any /* too deep */;
                    onInputOut: any /* too deep */;
                    onInputOver: any /* too deep */;
                    onInputUp: any /* too deep */;
                    onOutOfBounds: any /* too deep */;
                    onRemovedFromGroup: any /* too deep */;
                    onRemovedFromWorld: any /* too deep */;
                    parent: Player["_playerContainer"]["follow"]["tail"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                parent: Player["_playerContainer"]["follow"]["body"]["parent"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                previousPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                texture: Player["_playerContainer"]["follow"]["tail"]["_texture"];
                trackedPointers: Player["_playerContainer"]["follow"]["tail"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["follow"]["tail"]["localTransform"];
                    pivot: Player["_playerContainer"]["follow"]["tail"]["pivot"];
                    position: Player["_playerContainer"]["follow"]["tail"]["position"];
                    scale: Player["_playerContainer"]["follow"]["tail"]["scale"];
                    skew: Player["_playerContainer"]["follow"]["tail"]["skew"];
                    worldTransform: any /* too deep */;
                };
                transformCallback: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["follow"]["tail"]["scale"];
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            trackedPointers: Player["_playerContainer"]["follow"]["_trackedPointers"];
            transform: Player["_playerContainer"]["follow"]["pivot"]["scope"];
            tt: {
                addPhrases(V: any, Y: any): void;
                getPhrase(V: any): any;
                getPhraseIndex(V: any): any;
                getPhrases(): any;
                _localizer: {
                    getText(V: any): any;
                    hasText(V: any): any;
                    setDataSource(V: any): void;
                    dataSource: any /* too deep */;
                };
                st: string[];
            };
            tweens: Player["_playerContainer"]["follow"]["standTween"];
            walkTween: any /* too deep */[];
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldGamePosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["follow"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        game: Player["_playerContainer"]["_game"];
        hair: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            frameName: null;
            loadingTween: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["hair"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["hair"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["hair"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["hair"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["hair"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["hair"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["hair"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            key: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hair"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["hair"]["tempDisplayObjectParent"];
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                multisample: number;
                resolution: number;
                rotate: number;
                width: number;
                filterFrame: null;
                filterPoolKey: null;
                uvMatrix: null;
                trim: undefined;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                resize(t: any, e: any, r: any): void;
                setResolution(t: any): void;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    resource: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    resize(t: any, e: any): void;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: any /* too deep */;
                    _glTextures: any /* too deep */;
                    clearColor: any /* too deep */;
                    filterStack: any /* too deep */;
                    framebuffer: any /* too deep */;
                    maskStack: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["hair"]["_texture"]["_frame"];
                framebuffer: {
                    depth: boolean;
                    stencil: boolean;
                    dirtyFormat: number;
                    dirtyId: number;
                    dirtySize: number;
                    height: number;
                    multisample: number;
                    width: number;
                    depthTexture: null;
                    addColorTexture(e: any, r: any): any;
                    addDepthTexture(e: any): any;
                    destroyDepthTexture(): void;
                    dispose(): void;
                    enableDepth(): any;
                    enableStencil(): any;
                    resize(t: any, e: any): void;
                    colorTexture: Player["_playerContainer"]["hair"]["_texture"]["baseTexture"];
                    colorTextures: any /* too deep */;
                    disposeRunner: any /* too deep */;
                    glFramebuffers: any /* too deep */;
                };
                orig: Player["_playerContainer"]["hair"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["hair"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["hair"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["eyes"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["hair"]["localTransform"];
                    pivot: Player["_playerContainer"]["hair"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hair"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hair"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hair"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["hair"]["_texture"];
            trackedPointers: Player["_playerContainer"]["hair"]["_trackedPointers"];
            transform: Player["_playerContainer"]["hair"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["hair"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        hairMetadata: {
            v: number;
            vIcon: number;
            x: number;
            y: number;
            type: string;
            pivot: {
                x: number;
                y: number;
            };
        };
        hat: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _loadingAsset: null;
            _localBounds: null;
            _updateFrame: null;
            loadingTween: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["hat"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["hat"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["hat"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["hat"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["hat"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["hat"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["hat"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hat"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["hat"]["tempDisplayObjectParent"];
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                trim: undefined;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: any /* too deep */;
                    _glTextures: any /* too deep */;
                    resource: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["hat"]["_texture"]["_frame"];
                orig: Player["_playerContainer"]["hat"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["hat"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                _recalculateMagnitude: boolean;
                _recalculateMagnitudeSq: boolean;
                _magnitude: number;
                _magnitudeSq: number;
                _x: number;
                _y: number;
                x: number;
                y: number;
                add(V: any): void;
                angle(V: any): any;
                ceil(): void;
                clamp(V: any, Y: any, q: any): void;
                clip(V: any): void;
                copyFrom(V: any): any;
                copyTo(V: any): any;
                cross(V: any): any;
                divide(V: any): void;
                dot(V: any): any;
                equals(V: any): any;
                floor(): void;
                getDistance(V: any): any;
                getDistanceSq(V: any): any;
                getMagnitude(): any;
                getMagnitudeSq(): any;
                interpolate(V: any, Y: any): void;
                invert(): void;
                isNearlyEqual(V: any, Y: any): any;
                isNearlyEqualToValues(V: any, Y: any, q: any): any;
                isZero(): any;
                multiply(V: any): void;
                negate(): void;
                normalize(): void;
                normalRightHand(): void;
                perpendicular(V: any): void;
                print(V: any): void;
                project(V: any, Y: any): void;
                recalculateMagnitude(): void;
                recalculateMagnitudeSq(): void;
                rotate(V: any, Y: any, q: any): void;
                round(): void;
                set(V: any, Y: any): void;
                setTo(V: any, Y: any): void;
                setToPolar(V: any, Y: any): void;
                subtract(V: any): void;
                toString(): any;
                trunc(): void;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["hat"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["eyes"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["hat"]["localTransform"];
                    pivot: Player["_playerContainer"]["hat"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hat"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hat"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hat"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["hat"]["_texture"];
            trackedPointers: Player["_playerContainer"]["hat"]["_trackedPointers"];
            transform: Player["_playerContainer"]["hat"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["hat"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        hatMetadata: {
            v: number;
            vIcon: number;
            x: number;
            y: number;
            hideReplace: string;
            type: string;
            hairHide: number[];
            pivot: {
                x: number;
                y: number;
            };
        };
        head: Player["_playerContainer"]["eyes"]["parent"];
        headElement: Player["_playerContainer"]["eyes"]["parent"]["parent"];
        headSprites: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _isModalWithTransparency: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isMask: boolean;
            isModalWithTransparency: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _eventsCount: number;
            _lastSortedIndex: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            length: number;
            offsetX: number;
            offsetY: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            _sortProperty: string;
            accessiblePointerEvents: string;
            accessibleType: string;
            name: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _enabledFilters: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            add(V: any, Y: any): any;
            addAt(V: any, Y: any): any;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            callAll(V: any, Y: any): void;
            callbackFromArray(V: any, Y: any): any;
            containerUpdateTransform(): void;
            containsPoint(arg0: any): void;
            destroy(t: any): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getAt(V: any): any;
            getBounds(t: any, e: any): any;
            getByName(V: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getIndex(V: any): any;
            getInjectedValue(V: any): any;
            getLocalBounds(): any;
            hasTooltip(): any;
            highlight(V: any, Y: any, q: any, Q: any): void;
            isHighlighted(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            moveDown(V: any): any;
            moveUp(V: any): any;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            remove(V: any, Y: any): any;
            removeAll(V: any): void;
            removeAllListeners(t: any): any;
            removeBetween(V: any, Y: any, q: any, Q: any): void;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            renderCanvas(t: any): void;
            sendChildToBack(V: any): void;
            setChildIndex(t: any, e: any): void;
            setElementAsModal(V: any): void;
            setParent(t: any): any;
            setRenderState(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            showTooltip(V: any, Y: any): void;
            sortChildren(): void;
            swap(V: any, Y: any): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateTransform(): void;
            updateZ(): void;
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _cacheData: {
                textureCacheId: string;
                originalFilterArea: null;
                originalMask: null;
                originalContainsPoint: undefined;
                originalRenderCanvas: undefined;
                originalCalculateBounds(): void;
                originalDestroy(Y: any): void;
                originalGetLocalBounds(e: any, r: any): any;
                originalRender(t: any): void;
                originalUpdateTransform(): void;
                sprite: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    _roundPixels: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    roundPixels: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _cachedTint: number;
                    _eventsCount: number;
                    _height: number;
                    _lastSortedIndex: number;
                    _textureID: number;
                    _textureTrimmedID: number;
                    _tint: number;
                    _tintRGB: number;
                    _transformID: number;
                    _transformTrimmedID: number;
                    _width: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    blendMode: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    tint: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    pluginName: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    tempDisplayObjectParent: any /* too deep */;
                    vertexTrimmedData: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _onAnchorUpdate(): void;
                    _onTextureUpdate(): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    calculateTrimmedVertices(): any;
                    calculateVertices(): void;
                    containerUpdateTransform(): void;
                    containsPoint(t: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    indices: Uint16Array;
                    uvs: Float32Array;
                    vertexData: Float32Array;
                    _anchor: any /* too deep */;
                    _bounds: Player["_playerContainer"]["headSprites"]["_bounds"];
                    _events: any /* too deep */;
                    _localBoundsRect: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _texture: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    anchor: any /* too deep */;
                    children: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    texture: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            _events: {};
            _game: Player["_playerContainer"]["_game"];
            _localBounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["headSprites"]["_tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["headSprites"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["headSprites"]["_tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["headSprites"]["_tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["headSprites"]["_tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["headSprites"]["_tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["headSprites"]["_tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            children: Player["_playerContainer"]["eyes"]["parent"]["parent"][];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["headSprites"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            metricsManager: Player["_playerContainer"]["collisionBody"]["parent"]["metricsManager"];
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["headSprites"]["localTransform"];
                    pivot: Player["_playerContainer"]["headSprites"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["headSprites"]["pivot"]["scope"];
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["headSprites"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["headSprites"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["headSprites"]["_tempDisplayObjectParent"];
            trackedPointers: Player["_playerContainer"]["headSprites"]["_trackedPointers"];
            transform: Player["_playerContainer"]["headSprites"]["pivot"]["scope"];
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldGamePosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["headSprites"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        indicatorE: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _isModalWithTransparency: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isMask: boolean;
            isModalWithTransparency: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _eventsCount: number;
            _lastSortedIndex: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            length: number;
            offsetX: number;
            offsetY: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            _sortProperty: string;
            accessiblePointerEvents: string;
            accessibleType: string;
            name: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            add(V: any, Y: any): any;
            addAt(V: any, Y: any): any;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            callAll(V: any, Y: any): void;
            callbackFromArray(V: any, Y: any): any;
            containerUpdateTransform(): void;
            destroy(Y: any): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getAt(V: any): any;
            getBounds(t: any, e: any): any;
            getByName(V: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getIndex(V: any): any;
            getInjectedValue(V: any): any;
            getLocalBounds(e: any, r: any): any;
            hasTooltip(): any;
            highlight(V: any, Y: any, q: any, Q: any): void;
            isHighlighted(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            moveDown(V: any): any;
            moveUp(V: any): any;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            remove(V: any, Y: any): any;
            removeAll(V: any): void;
            removeAllListeners(t: any): any;
            removeBetween(V: any, Y: any, q: any, Q: any): void;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            sendChildToBack(V: any): void;
            setChildIndex(t: any, e: any): void;
            setElementAsModal(V: any): void;
            setParent(t: any): any;
            setRenderState(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            showTooltip(V: any, Y: any): void;
            sortChildren(): void;
            swap(V: any, Y: any): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateTransform(): void;
            updateZ(): void;
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _game: Player["_playerContainer"]["_game"];
            _localBounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["indicatorE"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            metricsManager: Player["_playerContainer"]["collisionBody"]["parent"]["metricsManager"];
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            parent: Player["_playerContainer"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["indicatorE"]["localTransform"];
                    pivot: Player["_playerContainer"]["indicatorE"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"];
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"];
            trackedPointers: Player["_playerContainer"]["indicatorE"]["_trackedPointers"];
            transform: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"];
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldGamePosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["indicatorE"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        leftArm: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _loadingAsset: null;
            _localBounds: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            _updateFrame: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["leftArm"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["leftArm"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["leftArm"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["leftArm"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["leftArm"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["leftArm"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["leftArm"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["leftArm"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["leftArm"]["tempDisplayObjectParent"];
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: any /* too deep */;
                    _glTextures: any /* too deep */;
                    resource: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["leftArm"]["_texture"]["_frame"];
                orig: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                textureCacheIds: never[];
                trim: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["leftArm"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                _recalculateMagnitude: boolean;
                _recalculateMagnitudeSq: boolean;
                _magnitude: number;
                _magnitudeSq: number;
                _x: number;
                _y: number;
                x: number;
                y: number;
                add(V: any): void;
                angle(V: any): any;
                ceil(): void;
                clamp(V: any, Y: any, q: any): void;
                clip(V: any): void;
                copyFrom(V: any): any;
                copyTo(V: any): any;
                cross(V: any): any;
                divide(V: any): void;
                dot(V: any): any;
                equals(V: any): any;
                floor(): void;
                getDistance(V: any): any;
                getDistanceSq(V: any): any;
                getMagnitude(): any;
                getMagnitudeSq(): any;
                interpolate(V: any, Y: any): void;
                invert(): void;
                isNearlyEqual(V: any, Y: any): any;
                isNearlyEqualToValues(V: any, Y: any, q: any): any;
                isZero(): any;
                multiply(V: any): void;
                negate(): void;
                normalize(): void;
                normalRightHand(): void;
                perpendicular(V: any): void;
                print(V: any): void;
                project(V: any, Y: any): void;
                recalculateMagnitude(): void;
                recalculateMagnitudeSq(): void;
                rotate(V: any, Y: any, q: any): void;
                round(): void;
                set(V: any, Y: any): void;
                setTo(V: any, Y: any): void;
                setToPolar(V: any, Y: any): void;
                subtract(V: any): void;
                toString(): any;
                trunc(): void;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["leftArm"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["leftArm"]["localTransform"];
                    pivot: Player["_playerContainer"]["leftArm"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["leftArm"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["leftArm"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["leftArm"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["leftArm"]["_texture"];
            trackedPointers: Player["_playerContainer"]["leftArm"]["_trackedPointers"];
            transform: Player["_playerContainer"]["leftArm"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["leftArm"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        legs: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _loadingAsset: null;
            _localBounds: null;
            _updateFrame: null;
            loadingTween: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["legs"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["legs"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["legs"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["legs"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["legs"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["legs"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["legs"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["legs"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["legs"]["tempDisplayObjectParent"];
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                trim: null;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: Player["_playerContainer"]["leftArm"]["_texture"]["baseTexture"];
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["legs"]["_texture"]["_frame"];
                orig: Player["_playerContainer"]["legs"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["legs"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                _recalculateMagnitude: boolean;
                _recalculateMagnitudeSq: boolean;
                _magnitude: number;
                _magnitudeSq: number;
                _x: number;
                _y: number;
                x: number;
                y: number;
                add(V: any): void;
                angle(V: any): any;
                ceil(): void;
                clamp(V: any, Y: any, q: any): void;
                clip(V: any): void;
                copyFrom(V: any): any;
                copyTo(V: any): any;
                cross(V: any): any;
                divide(V: any): void;
                dot(V: any): any;
                equals(V: any): any;
                floor(): void;
                getDistance(V: any): any;
                getDistanceSq(V: any): any;
                getMagnitude(): any;
                getMagnitudeSq(): any;
                interpolate(V: any, Y: any): void;
                invert(): void;
                isNearlyEqual(V: any, Y: any): any;
                isNearlyEqualToValues(V: any, Y: any, q: any): any;
                isZero(): any;
                multiply(V: any): void;
                negate(): void;
                normalize(): void;
                normalRightHand(): void;
                perpendicular(V: any): void;
                print(V: any): void;
                project(V: any, Y: any): void;
                recalculateMagnitude(): void;
                recalculateMagnitudeSq(): void;
                rotate(V: any, Y: any, q: any): void;
                round(): void;
                set(V: any, Y: any): void;
                setTo(V: any, Y: any): void;
                setToPolar(V: any, Y: any): void;
                subtract(V: any): void;
                toString(): any;
                trunc(): void;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["legs"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["legs"]["localTransform"];
                    pivot: Player["_playerContainer"]["legs"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["legs"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["legs"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["legs"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["legs"]["_texture"];
            trackedPointers: Player["_playerContainer"]["legs"]["_trackedPointers"];
            transform: Player["_playerContainer"]["legs"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["legs"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        localTransform: {
            a: number;
            b: number;
            c: number;
            d: number;
            tx: number;
            ty: number;
            array: null;
            append(t: any): any;
            apply(t: any, e: any): any;
            applyInverse(t: any, e: any): any;
            clone(): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            decompose(t: any): any;
            fromArray(t: any): void;
            identity(): any;
            invert(): any;
            prepend(t: any): any;
            rotate(t: any): any;
            scale(t: any, e: any): any;
            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            toArray(t: any, e: any): any;
            translate(t: any, e: any): any;
        };
        locomotion: {
            isMainPlayer: boolean;
            lastUpdateCount: number;
            broadcastPosition(): void;
            destroy(): void;
            onFindPath(V: any): void;
            onGetTarget(V: any): any;
            onMovePlayer(V: any, Y: any): any;
            onStopPlayer(): void;
            onStopPlayerBound(): void;
            setNewTarget(V: any, Y: any): void;
            setup(V: any, Y: any, q: any): void;
            update(): void;
            creatureContainer: Player["_playerContainer"];
            game: Player["_playerContainer"]["_game"];
            lastTargetBroadcasted: {
                x: number;
                y: number;
            };
            screen: Player["_playerContainer"]["_game"]["_state"]["_current"];
            target: {
                x: number;
                y: number;
            };
        };
        metricsManager: Player["_playerContainer"]["collisionBody"]["parent"]["metricsManager"];
        moveTween: never;
        nameText: {
            _isCreated: boolean;
            Active: boolean;
            isActive: boolean;
            IsActiveInHierarchy: boolean;
            isCreated: boolean;
            alignment: number;
            Alignment: number;
            BlendMode: number;
            FontSize: number;
            FontStyle: number;
            LineSpacing: number;
            ShadowAlpha: number;
            ShadowAngle: number;
            ShadowBlur: number;
            ShadowDistance: number;
            StrokeThickness: number;
            TextHeight: number;
            TextWidth: number;
            FillColor: string;
            Font: string;
            ShadowColor: string;
            StrokeColor: string;
            TextConfig: undefined;
            create(): any;
            customDeserialize(V: any): void;
            destroy(): void;
            firstUpdate(): void;
            getInjectedValue(V: any): any;
            isValidColor(V: any): any;
            onDisable(): void;
            onEnable(): void;
            postCreate(): void;
            postDeserialize(): void;
            preDeserialize(V: any): void;
            setText(V: any): void;
            update(): void;
            updateAlignment(): void;
            updateFunction(): void;
            updateText(): void;
            gameObject: {
                _destroyed: boolean;
                _isActive: boolean;
                _isActiveInHierarchy: boolean;
                active: boolean;
                activeInHierarchy: boolean;
                isDestroyed: boolean;
                _name: string;
                layer: string;
                name: string;
                _parent: null;
                _transform: null;
                parent: null;
                transform: null;
                activeInHierarchyChanged(): void;
                addChild(V: any): void;
                addChildAt(V: any, Y: any): void;
                addComponent(V: any, Y: any): any;
                bringToFront(): void;
                destroy(): void;
                destroyDeferred(): void;
                dispatchComponentAddedInHierarchy(V: any, Y: any): void;
                findChildByName(V: any): any;
                findComponent(V: any): any;
                findComponentInChildren(V: any, Y: any): any;
                findComponentInParent(V: any, Y: any): any;
                findComponents(V: any): any;
                findComponentsInChildren(V: any, Y: any): any;
                firstUpdate(): void;
                getRenderOrder(): any;
                hasComponent(V: any): any;
                isActiveInHierarchy(): any;
                isInBack(): any;
                isInFront(): any;
                removeComponent(V: any): void;
                removeFromParent(): any;
                sendToBack(): void;
                setLayer(V: any, Y: any): void;
                setParent(V: any, Y: any): any;
                setRenderOrder(V: any): void;
                update(): void;
                updateFunction(): void;
                _children: never[];
                _components: (any /* too deep */ | Player["_playerContainer"]["nameText"])[];
                _legacyTransform: {
                    _isCreated: boolean;
                    Active: boolean;
                    isActive: boolean;
                    IsActiveInHierarchy: boolean;
                    isCreated: boolean;
                    roundRelativeValues: boolean;
                    RoundRelativeValues: boolean;
                    anchorX: number;
                    anchorY: number;
                    height: number;
                    relativeHeight: number;
                    relativeWidth: number;
                    relativeX: number;
                    relativeY: number;
                    roundedHeight: number;
                    roundedWidth: number;
                    roundedX: number;
                    roundedY: number;
                    scaleX: number;
                    scaleY: number;
                    width: number;
                    x: number;
                    y: number;
                    cachedRelativeHeight: null;
                    cachedRelativeWidth: null;
                    cachedRelativeX: null;
                    cachedRelativeY: null;
                    dimensionPlaceholder: null;
                    create(): void;
                    customDeserialize(Y: any): void;
                    destroy(): void;
                    firstUpdate(): void;
                    getInjectedValue(V: any): any;
                    onDisable(): void;
                    onEnable(): void;
                    postCreate(): void;
                    postDeserialize(): void;
                    preDeserialize(V: any): void;
                    reapplyChildRelativeValues(): void;
                    update(): void;
                    updateFunction(): void;
                    updateGroupVisibility(): void;
                    updateParentGroup(): void;
                    updatePivotXFromAnchorX(): void;
                    updatePivotYFromAnchorY(): void;
                    _group: any /* too deep */;
                    anchor: any /* too deep */;
                    gameObject: Player["_playerContainer"]["nameText"]["gameObject"];
                    GameObject: Player["_playerContainer"]["nameText"]["gameObject"];
                    group: any /* too deep */;
                    onActiveChanged: any /* too deep */;
                    OnActiveChanged: any /* too deep */;
                    onDestroy: any /* too deep */;
                    OnDestroy: any /* too deep */;
                };
                children: Player["_playerContainer"]["nameText"]["gameObject"]["_children"];
                components: Player["_playerContainer"]["nameText"]["gameObject"]["_components"];
                legacyTransform: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onActiveInHierarchyChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onChildAdded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onChildRemoved: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onComponentAdded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onComponentAddedToHierarchy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onComponentRemoved: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onHierarchyChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onLayerChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
            };
            GameObject: Player["_playerContainer"]["nameText"]["gameObject"];
            onActiveChanged: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            OnActiveChanged: Player["_playerContainer"]["nameText"]["onActiveChanged"];
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            OnDestroy: Player["_playerContainer"]["nameText"]["onDestroy"];
            Source: {
                source: string;
                cleanUp(): void;
                getText(): any;
                setText(V: any): void;
                onTextChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnTextChanged: Player["_playerContainer"]["nameText"]["Source"]["onTextChanged"];
            };
            textObject: {
                _isCreated: boolean;
                _underline: boolean;
                Active: boolean;
                isActive: boolean;
                IsActiveInHierarchy: boolean;
                isCreated: boolean;
                resizeRectTransform: boolean;
                underline: boolean;
                wordWrap: boolean;
                _paddingX: number;
                _paddingY: number;
                blendMode: number;
                dropShadowAlpha: number;
                dropShadowAngle: number;
                dropShadowBlur: number;
                dropShadowDistance: number;
                fontSize: number;
                lineSpacing: number;
                paddingX: number;
                paddingY: number;
                strokeThickness: number;
                tint: number;
                wordWrapWidth: number;
                _boundsAlignH: string;
                _boundsAlignV: string;
                align: string;
                boundsAlignH: string;
                boundsAlignV: string;
                dropShadowColor: string;
                fill: string;
                font: string;
                fontStyle: string;
                fontWeight: string;
                stroke: string;
                text: string;
                _filter: null;
                _parentRenderComponent: null;
                _underlineEndIndex: null;
                _underlineStartIndex: null;
                underlineEndIndex: null;
                underlineStartIndex: null;
                applyScalingToTransform(V: any, Y: any, q: any): void;
                applyTextPivot(): void;
                applyToMatrix(V: any, Y: any): void;
                attachRootContainer(): void;
                attachRootToCurrentLayer(): void;
                attachRootToRenderComponentParent(): void;
                buildRenderComponentOrder(V: any): any;
                clearListeners(): void;
                clearParentRenderComponent(): void;
                componentAddedToHierarchy(V: any, Y: any): void;
                create(): any;
                createPixiTransformOverride(): any;
                createTextObject(): void;
                customDeserialize(V: any): void;
                destroy(): void;
                drawUnderline(V: any, Y: any): void;
                findChildIndex(): any;
                firstUpdate(): void;
                gameObjectHierarchyChanged(): void;
                getDimensions(): any;
                getInjectedValue(V: any): any;
                getOverriddenTransform(): any;
                getParentContainer(): any;
                getRootContainer(): any;
                isValidColor(V: any): any;
                onDisable(): void;
                onEnable(): void;
                onLegacyTransformDestroyed(): void;
                onOverrideTransformDestroyed(): void;
                onParentRenderComponentDestroyed(): void;
                onRenderComponentContainerWasSet(): void;
                overridePIXIUpdateFunction(): void;
                postCreate(): void;
                postDeserialize(): void;
                preDeserialize(V: any): void;
                resetPIXIUpdateFunction(): void;
                resizeRectTransformUponTextChange(): void;
                setFilter(V: any): void;
                setRootContainer(V: any): void;
                setUpDisplayObject(V: any): void;
                trackTransformAddingToOverride(V: any): void;
                update(): void;
                updateFunction(): void;
                updateText(): void;
                updateTextSize(): void;
                updateVisibility(): void;
                _rootContainer: {
                    _accessibleActive: boolean;
                    _autoResolution: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    _ownCanvas: boolean;
                    _roundPixels: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    dirty: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    roundPixels: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _cachedTint: number;
                    _eventsCount: number;
                    _height: number;
                    _lastSortedIndex: number;
                    _resolution: number;
                    _textureID: number;
                    _textureTrimmedID: number;
                    _tint: number;
                    _tintRGB: number;
                    _transformID: number;
                    _transformTrimmedID: number;
                    _width: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    blendMode: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    localStyleID: number;
                    renderId: number;
                    resolution: number;
                    rotation: number;
                    tabIndex: number;
                    tint: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    _font: string;
                    _text: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    pluginName: string;
                    text: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    _styleListener: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    vertexTrimmedData: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _generateFillStyle(e: any, r: any, i: any): any;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _onAnchorUpdate(): void;
                    _onTextureUpdate(): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    calculateTrimmedVertices(): any;
                    calculateVertices(): void;
                    containerUpdateTransform(): void;
                    containsPoint(t: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    drawLetterSpacing(t: any, e: any, r: any, i: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateText(t: any): void;
                    updateTexture(): void;
                    updateTransform(): void;
                    canvas: HTMLCanvasElement;
                    context: CanvasRenderingContext2D;
                    indices: Uint16Array;
                    uvs: Float32Array;
                    vertexData: Float32Array;
                    _anchor: any /* too deep */;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _style: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _texture: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    anchor: any /* too deep */;
                    children: any /* too deep */;
                    localTransform: any /* too deep */;
                    parent: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    style: any /* too deep */;
                    tempDisplayObjectParent: any /* too deep */;
                    texture: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _textBounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _textSize: {
                    _halfHeight: number;
                    _halfWidth: number;
                    _height: number;
                    _width: number;
                    height: number;
                    width: number;
                    copyFrom(V: any): void;
                    getHalfHeight(): any;
                    getHalfWidth(): any;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    setTo(V: any, Y: any): void;
                };
                _underlines: never[];
                gameObject: Player["_playerContainer"]["nameText"]["gameObject"];
                GameObject: Player["_playerContainer"]["nameText"]["gameObject"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnActiveChanged: Player["_playerContainer"]["nameText"]["textObject"]["onActiveChanged"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                OnDestroy: Player["_playerContainer"]["nameText"]["textObject"]["onDestroy"];
                onRootContainerSet: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                Source: {
                    source: string;
                    cleanUp(): void;
                    getText(): any;
                    setText(V: any): void;
                    onTextChanged: any /* too deep */;
                    OnTextChanged: any /* too deep */;
                };
                textObject: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"];
                TextObject: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"];
                textSource: Player["_playerContainer"]["nameText"]["textObject"]["Source"];
            };
            TextObject: Player["_playerContainer"]["nameText"]["textObject"];
            textSource: Player["_playerContainer"]["nameText"]["Source"];
        };
        neck: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            frameName: null;
            loadingTween: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["neck"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["neck"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["neck"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["neck"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["neck"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["neck"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["neck"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            key: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["neck"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["neck"]["tempDisplayObjectParent"];
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                multisample: number;
                resolution: number;
                rotate: number;
                width: number;
                filterFrame: null;
                filterPoolKey: null;
                uvMatrix: null;
                trim: undefined;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                resize(t: any, e: any, r: any): void;
                setResolution(t: any): void;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    resource: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    resize(t: any, e: any): void;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: any /* too deep */;
                    _glTextures: any /* too deep */;
                    clearColor: any /* too deep */;
                    filterStack: any /* too deep */;
                    framebuffer: any /* too deep */;
                    maskStack: any /* too deep */;
                    textureCacheIds: any /* too deep */;
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["neck"]["_texture"]["_frame"];
                framebuffer: {
                    depth: boolean;
                    stencil: boolean;
                    dirtyFormat: number;
                    dirtyId: number;
                    dirtySize: number;
                    height: number;
                    multisample: number;
                    width: number;
                    depthTexture: null;
                    addColorTexture(e: any, r: any): any;
                    addDepthTexture(e: any): any;
                    destroyDepthTexture(): void;
                    dispose(): void;
                    enableDepth(): any;
                    enableStencil(): any;
                    resize(t: any, e: any): void;
                    colorTexture: Player["_playerContainer"]["neck"]["_texture"]["baseTexture"];
                    colorTextures: any /* too deep */;
                    disposeRunner: any /* too deep */;
                    glFramebuffers: any /* too deep */;
                };
                orig: Player["_playerContainer"]["neck"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["neck"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["neck"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["neck"]["localTransform"];
                    pivot: Player["_playerContainer"]["neck"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["neck"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["neck"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["neck"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["neck"]["_texture"];
            trackedPointers: Player["_playerContainer"]["neck"]["_trackedPointers"];
            transform: Player["_playerContainer"]["neck"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["neck"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        onDestroy: {
            _shouldPropagate: boolean;
            active: boolean;
            add(V: any, Y: any, q: any): any;
            addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
            addOnce(V: any, Y: any, q: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(V: any, Y: any): any;
            indexOfListener(V: any, Y: any): any;
            remove(V: any, Y: any): void;
            removeAll(V: any): void;
            removeAtIndex(V: any): void;
            toString(): any;
            validateListener(V: any, Y: any): void;
            _bindings: any /* too deep */[];
        };
        OnLoad: Player["_playerContainer"]["_onLoad"];
        onPathFound: {
            _shouldPropagate: boolean;
            active: boolean;
            add(V: any, Y: any, q: any): any;
            addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
            addOnce(V: any, Y: any, q: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(V: any, Y: any): any;
            indexOfListener(V: any, Y: any): any;
            remove(V: any, Y: any): void;
            removeAll(V: any): void;
            removeAtIndex(V: any): void;
            toString(): any;
            validateListener(V: any, Y: any): void;
            _bindings: any /* too deep */[];
        };
        onStand: {
            _shouldPropagate: boolean;
            active: boolean;
            add(V: any, Y: any, q: any): any;
            addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
            addOnce(V: any, Y: any, q: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(V: any, Y: any): any;
            indexOfListener(V: any, Y: any): any;
            remove(V: any, Y: any): void;
            removeAll(V: any): void;
            removeAtIndex(V: any): void;
            toString(): any;
            validateListener(V: any, Y: any): void;
            _bindings: never[];
        };
        onStopped: {
            _shouldPropagate: boolean;
            active: boolean;
            add(V: any, Y: any, q: any): any;
            addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
            addOnce(V: any, Y: any, q: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(V: any, Y: any): any;
            indexOfListener(V: any, Y: any): any;
            remove(V: any, Y: any): void;
            removeAll(V: any): void;
            removeAtIndex(V: any): void;
            toString(): any;
            validateListener(V: any, Y: any): void;
            _bindings: any /* too deep */[];
        };
        onTransformTimerCreate: {
            _shouldPropagate: boolean;
            active: boolean;
            add(V: any, Y: any, q: any): any;
            addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
            addOnce(V: any, Y: any, q: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(V: any, Y: any): any;
            indexOfListener(V: any, Y: any): any;
            remove(V: any, Y: any): void;
            removeAll(V: any): void;
            removeAtIndex(V: any): void;
            toString(): any;
            validateListener(V: any, Y: any): void;
            _bindings: never[];
        };
        OnTransformTimerCreate: Player["_playerContainer"]["onTransformTimerCreate"];
        outfitMetadata: {
            v: number;
            type: string;
            leftArm: {
                x: number;
                y: number;
                handIK: {
                    x: number;
                    y: number;
                };
                pivot: {
                    x: number;
                    y: number;
                };
            };
            legs: {
                x: number;
                y: number;
                pivot: {
                    x: number;
                    y: number;
                };
            };
            rightArm: {
                x: number;
                y: number;
                pivot: {
                    x: number;
                    y: number;
                };
            };
            shirt: {
                x: number;
                y: number;
                pivot: {
                    x: number;
                    y: number;
                };
            };
        };
        parent: Player["_playerContainer"]["follow"]["parent"];
        pivot: {
            _x: number;
            _y: number;
            x: number;
            y: number;
            cb(): void;
            clone(e: any, r: any): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            equals(t: any): any;
            set(t: any, e: any): any;
            scope: {
                _currentLocalID: number;
                _cx: number;
                _cy: number;
                _localID: number;
                _parentID: number;
                _rotation: number;
                _sx: number;
                _sy: number;
                _worldID: number;
                rotation: number;
                onChange(): void;
                setFromMatrix(t: any): void;
                updateLocalTransform(): void;
                updateSkew(): void;
                updateTransform(t: any): void;
                localTransform: Player["_playerContainer"]["localTransform"];
                pivot: Player["_playerContainer"]["pivot"];
                position: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"];
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["pivot"]["scope"];
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["pivot"]["scope"];
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
        };
        playerDataSchema: {
            allowsHouseVisitors: boolean;
            battleCounter: number;
            bountyScore: number;
            daysToConvert: number;
            energy: number;
            gold: number;
            grade: number;
            hp: number;
            level: number;
            loss: number;
            membershipVideoTimeStamp: number;
            memberStarsExpirationDate: number;
            nm: number;
            numSpins1: number;
            spinDate1: number;
            stars: number;
            startDate: number;
            storedMemberStars: number;
            team: number;
            tower: number;
            versionID: number;
            win: number;
            wwCooldownTime: number;
            previousZone: string;
            school: string;
            zone: string;
            academyTowersFunnelsData: any /* too deep */[];
            daily: {
                isComplete: boolean;
                viewedProgressMenu: boolean;
                lastStarted: number;
                monsterID: number;
                progressPoints: number;
                seenProgressPoints: number;
                festivalName: string;
                location: string;
            };
            playerTitanData: {
                seenTitanBattleProgress: number;
                titanBattleProgress: number;
                titanID: number;
            };
            settings: {
                bgmVolume: number;
                sfxVolume: number;
                voiceVolume: number;
            };
            spellbook: number[];
            ultimatesFTUEFunnelData: any /* too deep */[];
        };
        position: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"];
        rightArm: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _loadingAsset: null;
            _localBounds: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            _updateFrame: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["rightArm"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["rightArm"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["rightArm"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["rightArm"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["rightArm"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["rightArm"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["rightArm"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["rightArm"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["rightArm"]["tempDisplayObjectParent"];
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: Player["_playerContainer"]["leftArm"]["_texture"]["baseTexture"];
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["rightArm"]["_texture"]["_frame"];
                orig: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                textureCacheIds: never[];
                trim: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["rightArm"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                _recalculateMagnitude: boolean;
                _recalculateMagnitudeSq: boolean;
                _magnitude: number;
                _magnitudeSq: number;
                _x: number;
                _y: number;
                x: number;
                y: number;
                add(V: any): void;
                angle(V: any): any;
                ceil(): void;
                clamp(V: any, Y: any, q: any): void;
                clip(V: any): void;
                copyFrom(V: any): any;
                copyTo(V: any): any;
                cross(V: any): any;
                divide(V: any): void;
                dot(V: any): any;
                equals(V: any): any;
                floor(): void;
                getDistance(V: any): any;
                getDistanceSq(V: any): any;
                getMagnitude(): any;
                getMagnitudeSq(): any;
                interpolate(V: any, Y: any): void;
                invert(): void;
                isNearlyEqual(V: any, Y: any): any;
                isNearlyEqualToValues(V: any, Y: any, q: any): any;
                isZero(): any;
                multiply(V: any): void;
                negate(): void;
                normalize(): void;
                normalRightHand(): void;
                perpendicular(V: any): void;
                print(V: any): void;
                project(V: any, Y: any): void;
                recalculateMagnitude(): void;
                recalculateMagnitudeSq(): void;
                rotate(V: any, Y: any, q: any): void;
                round(): void;
                set(V: any, Y: any): void;
                setTo(V: any, Y: any): void;
                setToPolar(V: any, Y: any): void;
                subtract(V: any): void;
                toString(): any;
                trunc(): void;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["rightArm"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["rightArm"]["localTransform"];
                    pivot: Player["_playerContainer"]["rightArm"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["rightArm"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["rightArm"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["rightArm"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["rightArm"]["_texture"];
            trackedPointers: Player["_playerContainer"]["rightArm"]["_trackedPointers"];
            transform: Player["_playerContainer"]["rightArm"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["rightArm"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        scale: Player["_playerContainer"]["pivot"]["scope"]["scale"];
        shirt: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _loadingAsset: null;
            _localBounds: null;
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _mask: null;
            _updateFrame: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    tempDisplayObjectParent: any /* too deep */;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: Player["_playerContainer"]["shirt"]["tempDisplayObjectParent"]["tempDisplayObjectParent"];
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                trackedPointers: Player["_playerContainer"]["shirt"]["tempDisplayObjectParent"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["shirt"]["tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["shirt"]["tempDisplayObjectParent"]["pivot"];
                    position: Player["_playerContainer"]["shirt"]["tempDisplayObjectParent"]["position"];
                    scale: Player["_playerContainer"]["shirt"]["tempDisplayObjectParent"]["scale"];
                    skew: Player["_playerContainer"]["shirt"]["tempDisplayObjectParent"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            transformCallbackContext: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(V: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(V: any, Y: any, q: any, Q: any): void;
            loadTexture(V: any, Y: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(V: any, Y: any, q: any, Q: any, J: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(V: any): void;
            sendChildToBack(V: any): void;
            setActive(V: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(V: any): void;
            setParent(t: any): any;
            setTexture(V: any, Y: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(Y: any): void;
            updateTexture(V: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["shirt"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: Player["_playerContainer"]["shirt"]["tempDisplayObjectParent"];
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: Player["_playerContainer"]["leftArm"]["_texture"]["baseTexture"];
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["shirt"]["_texture"]["_frame"];
                orig: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                textureCacheIds: never[];
                trim: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["shirt"]["_anchor"];
            animations: never;
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                _recalculateMagnitude: boolean;
                _recalculateMagnitudeSq: boolean;
                _magnitude: number;
                _magnitudeSq: number;
                _x: number;
                _y: number;
                x: number;
                y: number;
                add(V: any): void;
                angle(V: any): any;
                ceil(): void;
                clamp(V: any, Y: any, q: any): void;
                clip(V: any): void;
                copyFrom(V: any): any;
                copyTo(V: any): any;
                cross(V: any): any;
                divide(V: any): void;
                dot(V: any): any;
                equals(V: any): any;
                floor(): void;
                getDistance(V: any): any;
                getDistanceSq(V: any): any;
                getMagnitude(): any;
                getMagnitudeSq(): any;
                interpolate(V: any, Y: any): void;
                invert(): void;
                isNearlyEqual(V: any, Y: any): any;
                isNearlyEqualToValues(V: any, Y: any, q: any): any;
                isZero(): any;
                multiply(V: any): void;
                negate(): void;
                normalize(): void;
                normalRightHand(): void;
                perpendicular(V: any): void;
                print(V: any): void;
                project(V: any, Y: any): void;
                recalculateMagnitude(): void;
                recalculateMagnitudeSq(): void;
                rotate(V: any, Y: any, q: any): void;
                round(): void;
                set(V: any, Y: any): void;
                setTo(V: any, Y: any): void;
                setToPolar(V: any, Y: any): void;
                subtract(V: any): void;
                toString(): any;
                trunc(): void;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Player["_playerContainer"]["shirt"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["shirt"]["localTransform"];
                    pivot: Player["_playerContainer"]["shirt"]["pivot"];
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            position: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["shirt"]["pivot"]["scope"];
            };
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["shirt"]["pivot"]["scope"];
            };
            skew: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["shirt"]["pivot"]["scope"];
            };
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            texture: Player["_playerContainer"]["shirt"]["_texture"];
            trackedPointers: Player["_playerContainer"]["shirt"]["_trackedPointers"];
            transform: Player["_playerContainer"]["shirt"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["shirt"]["scale"];
            worldTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
        };
        skew: Player["_playerContainer"]["pivot"]["scope"]["skew"];
        source: never;
        sprites: Player["_playerContainer"]["collisionBody"]["parent"];
        stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
        trackedPointers: Player["_playerContainer"]["_trackedPointers"];
        transform: Player["_playerContainer"]["pivot"]["scope"];
        tt: Player["_playerContainer"]["follow"]["tt"];
        tweenAnimations: {
            attack: any /* too deep */[];
            attackBig: any /* too deep */[];
            attackFloat: any /* too deep */[];
            dabfemale: any /* too deep */[];
            dabmale: any /* too deep */[];
            dig: any /* too deep */[];
            floatDig: never[];
            hammerfemale: any /* too deep */[];
            hammermale: any /* too deep */[];
            moonwalkfemale: any /* too deep */[];
            moonwalkmale: any /* too deep */[];
            runningMan: any /* too deep */[];
            setup: never[];
            shimmy: any /* too deep */[];
            stand: any /* too deep */[];
            standFloat: any /* too deep */[];
            walk: any /* too deep */[];
            walkfemale: any /* too deep */[];
            walkFloat: any /* too deep */[];
            walkmale: any /* too deep */[];
        };
        weaponMetadata: {
            angle: number;
            size: number;
            v: number;
            vIcon: number;
            type: string;
            anchor: {
                x: number;
                y: number;
            };
        };
        world: {
            x: number;
            y: number;
            clone(): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            equals(t: any): any;
            set(t: any, e: any): any;
        };
        worldGamePosition: {
            x: number;
            y: number;
            clone(): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            equals(t: any): any;
            set(t: any, e: any): any;
        };
        worldPosition: {
            x: number;
            y: number;
            clone(): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            equals(t: any): any;
            set(t: any, e: any): any;
        };
        worldScale: Player["_playerContainer"]["pivot"]["scope"]["scale"];
        worldTransform: Player["_playerContainer"]["pivot"]["scope"]["worldTransform"];
    };
    _remoteLogger: {
        isLoggingEnabled(): any;
        logData(V: any, Y: any): void;
        logStat(V: any, Y: any): void;
        authProvider: {
            _renewalFailureWait: number;
            _renewalTimer: null;
            authenticateRequest(V: any): void;
            getToken(): any;
            handleErrorCallback(): void;
            isLoggedIn(): any;
            logout(): void;
            renewToken(): any;
            setToken(V: any): void;
            validate(V: any): any;
            _httpClient: {
                _baseURI: string;
                clearDefaultResponseHandler(V: any): void;
                getBaseURI(): any;
                getDefaultHeaders(): any;
                getRequestInitData(V: any): any;
                retryRequest(V: any, Y: any, q: any, Q: any): any;
                sendFetchRequest(V: any, Y: any, q: any, Q: any): any;
                sendRequest(V: any): any;
                setBaseURI(V: any): void;
                setDefaultHeader(V: any, Y: any, q: any): void;
                setDefaultResponseHandler(V: any, Y: any, q: any): void;
                _defaultHeaders: Map<never, never>;
                _defaultResponseHandler: Map<string, any /* too deep */>;
            };
            _sessionTokenAuth: {
                _userID: number;
                _token: string;
                authenticateRequest(V: any): void;
                getSessionToken(): any;
                getUserID(): any;
                isLoggedIn(): any;
                logout(): void;
                setSessionToken(V: any, Y: any): void;
            };
            timeManager: {
                isServerDeltaSet: boolean;
                _timezoneOffset: number;
                serverTimeDeltaMs: number;
                getIsServerDeltaSet(): any;
                getLocalTimeMs(): any;
                getServerTimeDeltaMs(): any;
                getServerTimeMs(): any;
                getUTCOffset(): any;
                setServerTime(V: any): void;
            };
        };
        currentPlayer: {
            addStars(V: any): void;
            dispatchStatChange(V: any, Y: any, q: any): void;
            getAppearance(): any;
            getBaseHearts(): any;
            getFirstName(): any;
            getLastName(): any;
            getLevel(): any;
            getMiddleName(): any;
            getNickname(): any;
            getStars(): any;
            getUserID(): any;
            giveItem(V: any, Y: any, q: any): void;
            hasParentLinkedEmail(): any;
            initialize(V: any): void;
            isActivePlayer(): any;
            isMember(): any;
            logout(): void;
            setSavingEnabled(V: any): void;
            _player: Player["_playerContainer"]["source"];
            onStatChanged: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: never[];
            };
            player: Player["_playerContainer"]["source"];
        };
        featureFlags: {
            getAssetsDataURI(): any;
            getAssetURLSuffix(V: any): any;
            getBaseAssetsURL(): any;
            getClassCodePromptCurriculumBlacklist(): any;
            getFeatureRevisionsURIs(): any;
            getItemsDataURI(): any;
            getLocalAssetVersion(): any;
            getMobilePurchaseProductOverride(): any;
            getMultiplayerClusterForWorld(V: any): any;
            getPrefabsURIs(): any;
            getValue(V: any, Y: any): any;
            getWorkerPath(V: any): any;
            initializeWithJson(V: any): void;
            isEventEnabled(V: any): any;
            isFeatureEnabled(V: any): any;
            environment: {
                getCurrentEnvironment(): any;
                getCurrentEnvironmentByHost(): any;
                getEnvironmentString(): any;
                getWindowHost(): any;
                getWindowQueryString(): any;
            };
            jsonData: {
                allOutAttackDisabled: boolean;
                autoAttackDisabled: boolean;
                coOpTitanDisabled: boolean;
                disableMembershipVideoAdDuringSchoolHours: boolean;
                disableParentAttach5: boolean;
                disableTrialMembership: boolean;
                enableElementalGuardianZone: boolean;
                enableMembershipVideoAd: boolean;
                enableUserReportingButton: boolean;
                enableVerboseAnalytics: boolean;
                enableVerboseGameServer: boolean;
                enableYouTubeAd: boolean;
                enableYouTubeTimeCheck: boolean;
                experimentLE2: boolean;
                experimentLE3LaneB: boolean;
                experimentLE3LaneC: boolean;
                "launcher-bypassSelectionScreen": boolean;
                "launcher-isOptimizelyEnabled": boolean;
                "launcher-performEarlyAccessCheck": boolean;
                "loader-allowedOverrideIps": boolean;
                "loader-gameClientOverride": boolean;
                "loader-newMembershipFlow": boolean;
                maintenance: boolean;
                removeAssets: boolean;
                showClassCodeInOptionsMenu: boolean;
                showClassCodeOnLogin: boolean;
                showClassCodeOnLoginIfNotInAClass: boolean;
                showMembershipPromptsAtSchool: boolean;
                ultimates: boolean;
                useNewAnswersURL: boolean;
                useServerTimeForVideoLockout: boolean;
                videoLessonInstantWin: boolean;
                gameAssetsVersion: number;
                gameDataVersion: number;
                gameServerRollout: number;
                "loader-gameDataVersionOverride": number;
                localAssetsVersion: number;
                morePetsInShopsExperimentNewLabelExpiry: number;
                sentrySampleRate: number;
                setFest: number;
                surveyCheckIntervalMinutes: number;
                debugPassword: string;
                gameAssetsMetaDataPath: string;
                gameClientVersion: string;
                gameCodePath: string;
                gameDataPath: string;
                gameLibPath: string;
                "loader-gameCodePathOverride": string;
                maintenanceMessage: string;
                mobileProductOverride: string;
                ServerGameVersion: string;
                splashScreen: string;
                classCodePromptCurriculumBlacklist: number[];
                enabledEvents: {
                    anonymous_game_complete_v3: boolean;
                    anonymous_game_discovery: boolean;
                    "battle-start-type": boolean;
                    "conversion-funnel-event": boolean;
                    "create-character": boolean;
                    education_lesson_encounter_v3: boolean;
                    education_question_interface_v3: boolean;
                    epicAttacks: boolean;
                    game_avatar: boolean;
                    game_avatar_v3: boolean;
                    game_battle_v3: boolean;
                    game_complete: boolean;
                    game_complete_v3: boolean;
                    game_discovery_v3: boolean;
                    game_level_up: boolean;
                    game_mod: boolean;
                    game_question_v3: boolean;
                    game_session_start: boolean;
                    game_session_start_v3: boolean;
                    game_sink: boolean;
                    game_sink_v3: boolean;
                    game_social: boolean;
                    game_social_v3: boolean;
                    game_source: boolean;
                    game_source_v3: boolean;
                    "item-change-event": boolean;
                    login: boolean;
                    "member-ad": boolean;
                    "new-member": boolean;
                    PVP: boolean;
                    "pvp-season-reward": boolean;
                    "survey-results": boolean;
                    "toy-event": boolean;
                    "zone-event": boolean;
                };
                enableReporting: {
                    houseReportButton: boolean;
                    playerCardReportButton: boolean;
                };
                googleLoginSettings: {
                    amazon: boolean;
                    google: boolean;
                };
                "loader-allowedIps": string[];
                "loader-windowVarBlacklist": string[];
                lockoutTrial: {
                    trialLengthDays: number;
                    endDate: string;
                    startDate: string;
                };
                multiplayerClusterLocations: any /* too deep */[];
                parentAttachTrial: {
                    trialLengthDays: number;
                    endDate: string;
                    startDate: string;
                    exclusionLanes: any /* too deep */;
                };
                prodigyGameFlags: {
                    allOutAttackDisabled: boolean;
                    autoAttackDisabled: boolean;
                    coOpTitanDisabled: boolean;
                    disableMembershipVideoAdDuringSchoolHours: boolean;
                    disableParentAttach5: boolean;
                    disableTrialMembership: boolean;
                    enableElementalGuardianZone: boolean;
                    enableMembershipVideoAd: boolean;
                    enableUserReportingButton: boolean;
                    enableVerboseAnalytics: boolean;
                    enableVerboseGameServer: boolean;
                    enableYouTubeAd: boolean;
                    enableYouTubeTimeCheck: boolean;
                    experimentLE2: boolean;
                    experimentLE3LaneB: boolean;
                    experimentLE3LaneC: boolean;
                    "launcher-bypassSelectionScreen": boolean;
                    "launcher-isOptimizelyEnabled": boolean;
                    "launcher-performEarlyAccessCheck": boolean;
                    "loader-allowedOverrideIps": boolean;
                    "loader-gameClientOverride": boolean;
                    "loader-newMembershipFlow": boolean;
                    removeAssets: boolean;
                    showClassCodeInOptionsMenu: boolean;
                    showClassCodeOnLogin: boolean;
                    showClassCodeOnLoginIfNotInAClass: boolean;
                    showMembershipPromptsAtSchool: boolean;
                    ultimates: boolean;
                    useNewAnswersURL: boolean;
                    useServerTimeForVideoLockout: boolean;
                    videoLessonInstantWin: boolean;
                    gameAssetsVersion: number;
                    gameDataVersion: number;
                    gameServerRollout: number;
                    "loader-gameDataVersionOverride": number;
                    localAssetsVersion: number;
                    morePetsInShopsExperimentNewLabelExpiry: number;
                    sentrySampleRate: number;
                    setFest: number;
                    surveyCheckIntervalMinutes: number;
                    debugPassword: string;
                    gameAssetsMetaDataPath: string;
                    gameDataPath: string;
                    "loader-gameCodePathOverride": string;
                    mobileProductOverride: string;
                    splashScreen: string;
                    classCodePromptCurriculumBlacklist: Player["_remoteLogger"]["featureFlags"]["jsonData"]["classCodePromptCurriculumBlacklist"];
                    enabledEvents: Player["_remoteLogger"]["featureFlags"]["jsonData"]["enabledEvents"];
                    enableReporting: Player["_remoteLogger"]["featureFlags"]["jsonData"]["enableReporting"];
                    googleLoginSettings: Player["_remoteLogger"]["featureFlags"]["jsonData"]["googleLoginSettings"];
                    "loader-allowedIps": Player["_remoteLogger"]["featureFlags"]["jsonData"]["loader-allowedIps"];
                    "loader-windowVarBlacklist": Player["_remoteLogger"]["featureFlags"]["jsonData"]["loader-windowVarBlacklist"];
                    lockoutTrial: Player["_remoteLogger"]["featureFlags"]["jsonData"]["lockoutTrial"];
                    multiplayerClusterLocations: Player["_remoteLogger"]["featureFlags"]["jsonData"]["multiplayerClusterLocations"];
                    parentAttachTrial: Player["_remoteLogger"]["featureFlags"]["jsonData"]["parentAttachTrial"];
                    recordingFeatures: any /* too deep */;
                    titanShardMultiplier: any /* too deep */;
                    useCatalystSDK: any /* too deep */;
                    xpMultiplier: any /* too deep */;
                };
                recordingFeatures: {
                    "archives-run": boolean;
                    "post-tutorial": boolean;
                };
                titanShardMultiplier: {
                    bonusMultiplier: number;
                    endDate: string;
                    startDate: string;
                };
                useCatalystSDK: string[];
                xpMultiplier: {
                    bonusMultiplier: number;
                    endDate: string;
                    startDate: string;
                    zone: string;
                };
            };
        };
        httpClient: Player["_remoteLogger"]["authProvider"]["_httpClient"];
    };
    achievements: {
        updated: boolean;
        complete(V: any): void;
        getDataAndClear(): any;
        getProgress(V: any): any;
        getTag(V: any): any;
        increment(V: any, Y: any): void;
        init(V: any): void;
        setProgress(V: any, Y: any): void;
        setTag(V: any, Y: any): void;
        data: {
            "0": number;
            "1": number;
            "2": number;
            "3": number;
            progress: {
                "1": number;
                "11": number;
                "15": number;
                "16": number;
                "19": number;
                "2": number;
                "20": number;
                "24": number;
                "25": number;
                "28": number;
                "29": number;
                "31": number;
                "33": number;
                "34": number;
                "37": number;
                "38": number;
                "4": number;
                "42": number;
                "44": number;
                "49": number;
                "5": number;
                "56": number;
                "6": number;
                "8": number;
                "9": number;
            };
        };
    };
    appearance: {
        updated: boolean;
        eyeColor: number;
        face: number;
        hairColor: number;
        hairStyle: number;
        skinColor: number;
        gender: string;
        generateRandom(): void;
        getData(): any;
        getDataAndClear(): any;
        getEyeColor(): any;
        getFace(): any;
        getGender(): any;
        getHair(): any;
        getName(): any;
        getSkinColor(): any;
        init(Y: any): void;
        randomize(): void;
        setEyeColor(Y: any): void;
        setFace(Y: any): void;
        setGender(Y: any): void;
        setHair(Y: any, q: any): void;
        setName(V: any): void;
        setSkinColor(Y: any): void;
        _name: {
            firstName: number;
            lastName: number;
            middleName: number;
            nickname: number | null;
            getFirstName(): any;
            getLastName(): any;
            getMiddleName(): any;
            getNickname(): any;
            isValid(): any;
            setFirstName(V: any): void;
            setLastName(V: any): void;
            setMiddleName(V: any): void;
            setNickname(V: any): void;
        };
        name: Player["appearance"]["_name"];
        playerService: {
            getAppearance(V: any): any;
            getPlayer(V: any): any;
            factoriesContainer: {
                guid: string;
                _middleware: null;
                parent: null;
                _get(t: any, n: any, e: any, i: any, o: any, a: any): any;
                _planAndResolve(): any;
                applyCustomMetadataReader(t: any): void;
                applyMiddleware(): any;
                bind(t: any): any;
                createChild(): any;
                get(t: any): any;
                getAll(t: any): any;
                getAllNamed(t: any, n: any): any;
                getAllTagged(t: any, n: any, e: any): any;
                getNamed(t: any, n: any): any;
                getTagged(t: any, n: any, e: any): any;
                isBound(t: any): any;
                isBoundNamed(t: any, n: any): any;
                isBoundTagged(t: any, n: any, e: any): any;
                load(): any;
                rebind(t: any): any;
                resolve(n: any): any;
                restore(): void;
                snapshot(): void;
                unbind(t: any): void;
                unbindAll(): void;
                unload(): any;
                _bindingDictionary: {
                    add(t: any, n: any): void;
                    clone(): any;
                    get(t: any): any;
                    getMap(): any;
                    hasKey(t: any): any;
                    remove(t: any): void;
                    removeByCondition(t: any): any;
                    traverse(t: any): void;
                    _map: Map<string, any /* too deep */>;
                };
                _metadataReader: {
                    getConstructorMetadata(t: any): any;
                    getPropertiesMetadata(t: any): any;
                };
                _snapshots: never[];
                options: {
                    autoBindInjectable: boolean;
                    defaultScope: string;
                };
            };
        };
    };
    backpack: {
        updated: boolean;
        add(V: any, Y: any, q: any, Q: any): any;
        addBountyNote(V: any, Y: any, q: any): void;
        addKeyItem(V: any, Y: any, q: any): any;
        canCraft(V: any, Y: any): any;
        consume(V: any, Y: any, q: any): any;
        consumeLegacyBounties(): void;
        craft(V: any, Y: any): void;
        getBackpackItemsByType(V: any): any;
        getBattleItems(V: any): any;
        getDataAndClear(): any;
        getItem(V: any, Y: any): any;
        getItemCount(V: any): any;
        getItemData(V: any, Y: any): any;
        getKeyItemData(V: any, Y: any): any;
        getTotalUnique(): any;
        hasItem(V: any, Y: any): any;
        hasItems(V: any): any;
        hasItemsOfType(V: any): any;
        hasMaxQuantityOfItem(V: any, Y: any): any;
        setItemData(V: any, Y: any, q: any): void;
        setItems(V: any): void;
        setKeyItemData(V: any, Y: any, q: any): void;
        unlockAllItems(): void;
        data: {
            boots: any /* too deep */[];
            currency: any /* too deep */[];
            follow: any /* too deep */[];
            fossil: any /* too deep */[];
            hat: any /* too deep */[];
            item: any /* too deep */[];
            key: any /* too deep */[];
            mathTownFrame: any /* too deep */[];
            mathTownInterior: any /* too deep */[];
            mount: any /* too deep */[];
            outfit: any /* too deep */[];
            relic: never[];
            spellRelic: any /* too deep */[];
            weapon: any /* too deep */[];
        };
        onKeyAddedToBackpack: {
            _shouldPropagate: boolean;
            active: boolean;
            add(V: any, Y: any, q: any): any;
            addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
            addOnce(V: any, Y: any, q: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(V: any, Y: any): any;
            indexOfListener(V: any, Y: any): any;
            remove(V: any, Y: any): void;
            removeAll(V: any): void;
            removeAtIndex(V: any): void;
            toString(): any;
            validateListener(V: any, Y: any): void;
            _bindings: any /* too deep */[];
        };
    };
    classIDs: never[];
    daily: {
        _isComplete: boolean;
        _updated: boolean;
        isComplete: boolean;
        updated: boolean;
        viewedProgressMenu: boolean;
        _monsterID: number;
        monsterID: number;
        progressPoints: number;
        seenProgressPoints: number;
        _festivalName: string;
        _location: string;
        festivalName: string;
        location: string;
        addProgressPoints(V: any, Y: any): any;
        complete(): void;
        getData(): any;
        getDataAndClear(): any;
        getFestivalProgress(): void;
        incrementProgressPoints(): any;
        init(V: any): void;
        isExpired(V: any): any;
        reset(): void;
        setFestival(V: any): void;
        setFestivalProgress(V: any, Y: any, q: any): void;
        start(V: any, Y: any, q: any): void;
        updateSeenProgressPoints(): void;
        _lastStarted: Date;
        lastStarted: Date;
        _festivalProgress: {
            viewedProgressMenu: boolean;
            progressPoints: number;
            seenProgressPoints: number;
            instanceID: null;
        };
    };
    dailyQuestions: {
        currentDay: number;
        previousData: null;
        adjustNumAnswered(V: any): void;
        clearPreviousData(): void;
        createValidData(Y: any): any;
        getCurrentDay(): any;
        getDataAndClear(V: any): any;
        getNumAnsweredToday(): any;
        getNumRequired(Y: any): any;
        getNumRequiredToday(): any;
        getPreviousNumAnsweredToday(): any;
        getResetDayIndex(): any;
        getRewards(V: any, Y: any): any;
        getStartedChallenge(): any;
        giveReward(V: any, Y: any, q: any, Q: any): void;
        hasPreviousData(): any;
        init(V: any, Y: any, q: any, X: any, J: any): void;
        isCurrentDayComplete(): any;
        isDayComplete(V: any): any;
        onQuestonAnswered(V: any, Y: any, q: any, J: any): void;
        postNotification(V: any): void;
        processDate(Y: any, q: any): void;
        resetData(): void;
        setCurrentDay(V: any): void;
        setDayComplete(V: any, Y: any): void;
        setNumQuestionsAnswered(V: any): void;
        setStartedChallenge(V: any): void;
        data: {
            startedChallenge: boolean;
            completedDays: number;
            numAnsweredToday: number;
        };
        onDataUpdated: {
            _shouldPropagate: boolean;
            active: boolean;
            add(V: any, Y: any, q: any): any;
            addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
            addOnce(V: any, Y: any, q: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(V: any, Y: any): any;
            indexOfListener(V: any, Y: any): any;
            remove(V: any, Y: any): void;
            removeAll(V: any): void;
            removeAtIndex(V: any): void;
            toString(): any;
            validateListener(V: any, Y: any): void;
            _bindings: any /* too deep */[];
        };
        rewards: {
            resetDayIndex: number;
            name: string;
            days: any /* too deep */[];
        };
    };
    data: Player["_playerContainer"]["playerDataSchema"];
    encounters: {
        updated: boolean;
        addToPetRescueAttempts(V: any, Y: any): void;
        addToPetTimesBattled(V: any, Y: any): void;
        addToPetTimesRescued(V: any, Y: any): void;
        createNewPetEncounter(V: any): void;
        getAllTotalPetsRecused(): any;
        getDataAndClear(): any;
        getPetEncounterByID(V: any): any;
        getPetRescueAttempts(V: any): any;
        getPetTimesBattled(V: any): any;
        getPetTimesRescued(V: any): any;
        getSeenAds(): any;
        hasPetBeenEncountered(V: any): any;
        hasSeenAd(V: any): any;
        onPetEncountered(V: any): void;
        setData(V: any): void;
        setSeenAds(V: any): void;
        _data: {
            ads: number[];
            pets: any /* too deep */[];
        };
        _timeManager: Player["_remoteLogger"]["authProvider"]["timeManager"];
    };
    equipment: {
        updated: boolean;
        _lastEquippedMount: number;
        boots: number;
        follow: number;
        hat: number;
        lastEquippedMount: number;
        outfit: number;
        spellRelic: number;
        weapon: number;
        mount: undefined;
        calculateAffixBonus(V: any): any;
        clearData(): void;
        getAffixes(V: any, Y: any): any;
        getBoots(): any;
        getDamageBonuses(): any;
        getData(): any;
        getDataAndClear(): any;
        getEquipment(V: any): any;
        getFollow(): any;
        getHat(): any;
        getHeartBonuses(): any;
        getMount(): any;
        getOutfit(): any;
        getSpellRelic(): any;
        getWeapon(): any;
        handleItemEquip(V: any, Y: any, q: any): void;
        handleItemUnequip(): void;
        init(V: any): void;
        randomize(): void;
        setBoots(Y: any, q: any, Q: any): void;
        setFollow(Y: any): void;
        setHat(Y: any, q: any, Q: any): void;
        setMount(Y: any, q: any, Q: any): void;
        setOutfit(Y: any, q: any, Q: any): void;
        setSpellRelic(Y: any, q: any, Q: any): void;
        setWeapon(Y: any, q: any, Q: any): void;
        unequipLevelLockedItem(V: any, Y: any): void;
        unequipLevelLockedItems(): void;
    };
    game: Player["_playerContainer"]["_game"];
    house: {
        updated: boolean;
        add(V: any): void;
        getActive(V: any): any;
        getActiveCount(): any;
        getBackground(): any;
        getCurrentHouseTag(): any;
        getDataAndClear(): any;
        getItemCount(): any;
        getItems(): any;
        getOwned(V: any): any;
        getSortedActive(): any;
        getUnplacedItems(): any;
        hasItems(V: any): any;
        hasMaxQuantityOfItem(V: any): any;
        setActive(V: any, Y: any, q: any, Q: any, J: any, Z: any, $: any, tt: any): any;
        setAllInactive(): void;
        setCurrentHouseTag(V: any): void;
        setInactive(V: any): void;
        setItems(V: any): void;
        updateActive(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any, $: any, tt: any): void;
        data: {
            currentHouseTag: string;
            active: any /* too deep */[];
            bg: {
                active: number;
                own: number[];
            };
            items: {
                "1": {
                    N: number;
                    A: any /* too deep */;
                };
                "10": {
                    N: number;
                    A: any /* too deep */;
                };
                "100": {
                    N: number;
                    A: any /* too deep */;
                };
                "101": {
                    N: number;
                    A: any /* too deep */;
                };
                "102": {
                    N: number;
                    A: any /* too deep */;
                };
                "103": {
                    N: number;
                    A: any /* too deep */;
                };
                "104": {
                    N: number;
                    A: any /* too deep */;
                };
                "105": {
                    N: number;
                    A: any /* too deep */;
                };
                "106": {
                    N: number;
                    A: any /* too deep */;
                };
                "107": {
                    N: number;
                    A: any /* too deep */;
                };
                "108": {
                    N: number;
                    A: any /* too deep */;
                };
                "109": {
                    N: number;
                    A: any /* too deep */;
                };
                "11": {
                    N: number;
                    A: any /* too deep */;
                };
                "110": {
                    N: number;
                    A: any /* too deep */;
                };
                "111": {
                    N: number;
                    A: any /* too deep */;
                };
                "112": {
                    N: number;
                    A: any /* too deep */;
                };
                "113": {
                    N: number;
                    A: any /* too deep */;
                };
                "114": {
                    N: number;
                    A: any /* too deep */;
                };
                "115": {
                    N: number;
                    A: any /* too deep */;
                };
                "116": {
                    N: number;
                    A: any /* too deep */;
                };
                "117": {
                    N: number;
                    A: any /* too deep */;
                };
                "118": {
                    N: number;
                    A: any /* too deep */;
                };
                "119": {
                    N: number;
                    A: any /* too deep */;
                };
                "12": {
                    N: number;
                    A: any /* too deep */;
                };
                "120": {
                    N: number;
                    A: any /* too deep */;
                };
                "121": {
                    N: number;
                    A: any /* too deep */;
                };
                "122": {
                    N: number;
                    A: any /* too deep */;
                };
                "123": {
                    N: number;
                    A: any /* too deep */;
                };
                "124": {
                    N: number;
                    A: any /* too deep */;
                };
                "125": {
                    N: number;
                    A: any /* too deep */;
                };
                "126": {
                    N: number;
                    A: any /* too deep */;
                };
                "127": {
                    N: number;
                    A: any /* too deep */;
                };
                "128": {
                    N: number;
                    A: any /* too deep */;
                };
                "129": {
                    N: number;
                    A: any /* too deep */;
                };
                "13": {
                    N: number;
                    A: any /* too deep */;
                };
                "130": {
                    N: number;
                    A: any /* too deep */;
                };
                "131": {
                    N: number;
                    A: any /* too deep */;
                };
                "132": {
                    N: number;
                    A: any /* too deep */;
                };
                "133": {
                    N: number;
                    A: any /* too deep */;
                };
                "134": {
                    N: number;
                    A: any /* too deep */;
                };
                "135": {
                    N: number;
                    A: any /* too deep */;
                };
                "136": {
                    N: number;
                    A: any /* too deep */;
                };
                "137": {
                    N: number;
                    A: any /* too deep */;
                };
                "138": {
                    N: number;
                    A: any /* too deep */;
                };
                "139": {
                    N: number;
                    A: any /* too deep */;
                };
                "14": {
                    N: number;
                    A: any /* too deep */;
                };
                "140": {
                    N: number;
                    A: any /* too deep */;
                };
                "141": {
                    N: number;
                    A: any /* too deep */;
                };
                "142": {
                    N: number;
                    A: any /* too deep */;
                };
                "143": {
                    N: number;
                    A: any /* too deep */;
                };
                "144": {
                    N: number;
                    A: any /* too deep */;
                };
                "145": {
                    N: number;
                    A: any /* too deep */;
                };
                "146": {
                    N: number;
                    A: any /* too deep */;
                };
                "147": {
                    N: number;
                    A: any /* too deep */;
                };
                "149": {
                    N: number;
                    A: any /* too deep */;
                };
                "15": {
                    N: number;
                    A: any /* too deep */;
                };
                "150": {
                    N: number;
                    A: any /* too deep */;
                };
                "151": {
                    N: number;
                    A: any /* too deep */;
                };
                "152": {
                    N: number;
                    A: any /* too deep */;
                };
                "153": {
                    N: number;
                    A: any /* too deep */;
                };
                "154": {
                    N: number;
                    A: any /* too deep */;
                };
                "156": {
                    N: number;
                    A: any /* too deep */;
                };
                "157": {
                    N: number;
                    A: any /* too deep */;
                };
                "159": {
                    N: number;
                    A: any /* too deep */;
                };
                "16": {
                    N: number;
                    A: any /* too deep */;
                };
                "160": {
                    N: number;
                    A: any /* too deep */;
                };
                "161": {
                    N: number;
                    A: any /* too deep */;
                };
                "162": {
                    N: number;
                    A: any /* too deep */;
                };
                "164": {
                    N: number;
                    A: any /* too deep */;
                };
                "165": {
                    N: number;
                    A: any /* too deep */;
                };
                "166": {
                    N: number;
                    A: any /* too deep */;
                };
                "167": {
                    N: number;
                    A: any /* too deep */;
                };
                "168": {
                    N: number;
                    A: any /* too deep */;
                };
                "169": {
                    N: number;
                    A: any /* too deep */;
                };
                "17": {
                    N: number;
                    A: any /* too deep */;
                };
                "170": {
                    N: number;
                    A: any /* too deep */;
                };
                "171": {
                    N: number;
                    A: any /* too deep */;
                };
                "172": {
                    N: number;
                    A: any /* too deep */;
                };
                "173": {
                    N: number;
                    A: any /* too deep */;
                };
                "174": {
                    N: number;
                    A: any /* too deep */;
                };
                "175": {
                    N: number;
                    A: any /* too deep */;
                };
                "176": {
                    N: number;
                    A: any /* too deep */;
                };
                "177": {
                    N: number;
                    A: any /* too deep */;
                };
                "178": {
                    N: number;
                    A: any /* too deep */;
                };
                "179": {
                    N: number;
                    A: any /* too deep */;
                };
                "18": {
                    N: number;
                    A: any /* too deep */;
                };
                "180": {
                    N: number;
                    A: any /* too deep */;
                };
                "181": {
                    N: number;
                    A: any /* too deep */;
                };
                "182": {
                    N: number;
                    A: any /* too deep */;
                };
                "183": {
                    N: number;
                    A: any /* too deep */;
                };
                "184": {
                    N: number;
                    A: any /* too deep */;
                };
                "185": {
                    N: number;
                    A: any /* too deep */;
                };
                "186": {
                    N: number;
                    A: any /* too deep */;
                };
                "187": {
                    N: number;
                    A: any /* too deep */;
                };
                "188": {
                    N: number;
                    A: any /* too deep */;
                };
                "189": {
                    N: number;
                    A: any /* too deep */;
                };
                "19": {
                    N: number;
                    A: any /* too deep */;
                };
                "191": {
                    N: number;
                    A: any /* too deep */;
                };
                "192": {
                    N: number;
                    A: any /* too deep */;
                };
                "193": {
                    N: number;
                    A: any /* too deep */;
                };
                "194": {
                    N: number;
                    A: any /* too deep */;
                };
                "195": {
                    N: number;
                    A: any /* too deep */;
                };
                "196": {
                    N: number;
                    A: any /* too deep */;
                };
                "197": {
                    N: number;
                    A: any /* too deep */;
                };
                "198": {
                    N: number;
                    A: any /* too deep */;
                };
                "199": {
                    N: number;
                    A: any /* too deep */;
                };
                "2": {
                    N: number;
                    A: any /* too deep */;
                };
                "20": {
                    N: number;
                    A: any /* too deep */;
                };
                "202": {
                    N: number;
                    A: any /* too deep */;
                };
                "203": {
                    N: number;
                    A: any /* too deep */;
                };
                "204": {
                    N: number;
                    A: any /* too deep */;
                };
                "205": {
                    N: number;
                    A: any /* too deep */;
                };
                "206": {
                    N: number;
                    A: any /* too deep */;
                };
                "207": {
                    N: number;
                    A: any /* too deep */;
                };
                "208": {
                    N: number;
                    A: any /* too deep */;
                };
                "209": {
                    N: number;
                    A: any /* too deep */;
                };
                "21": {
                    N: number;
                    A: any /* too deep */;
                };
                "210": {
                    N: number;
                    A: any /* too deep */;
                };
                "212": {
                    N: number;
                    A: any /* too deep */;
                };
                "213": {
                    N: number;
                    A: any /* too deep */;
                };
                "214": {
                    N: number;
                    A: any /* too deep */;
                };
                "215": {
                    N: number;
                    A: any /* too deep */;
                };
                "216": {
                    N: number;
                    A: any /* too deep */;
                };
                "218": {
                    N: number;
                    A: any /* too deep */;
                };
                "219": {
                    N: number;
                    A: any /* too deep */;
                };
                "22": {
                    N: number;
                    A: any /* too deep */;
                };
                "220": {
                    N: number;
                    A: any /* too deep */;
                };
                "221": {
                    N: number;
                    A: any /* too deep */;
                };
                "222": {
                    N: number;
                    A: any /* too deep */;
                };
                "223": {
                    N: number;
                    A: any /* too deep */;
                };
                "224": {
                    N: number;
                    A: any /* too deep */;
                };
                "225": {
                    N: number;
                    A: any /* too deep */;
                };
                "227": {
                    N: number;
                    A: any /* too deep */;
                };
                "228": {
                    N: number;
                    A: any /* too deep */;
                };
                "229": {
                    N: number;
                    A: any /* too deep */;
                };
                "23": {
                    N: number;
                    A: any /* too deep */;
                };
                "230": {
                    N: number;
                    A: any /* too deep */;
                };
                "231": {
                    N: number;
                    A: any /* too deep */;
                };
                "232": {
                    N: number;
                    A: any /* too deep */;
                };
                "234": {
                    N: number;
                    A: any /* too deep */;
                };
                "235": {
                    N: number;
                    A: any /* too deep */;
                };
                "236": {
                    N: number;
                    A: any /* too deep */;
                };
                "237": {
                    N: number;
                    A: any /* too deep */;
                };
                "238": {
                    N: number;
                    A: any /* too deep */;
                };
                "239": {
                    N: number;
                    A: any /* too deep */;
                };
                "24": {
                    N: number;
                    A: any /* too deep */;
                };
                "240": {
                    N: number;
                    A: any /* too deep */;
                };
                "241": {
                    N: number;
                    A: any /* too deep */;
                };
                "242": {
                    N: number;
                    A: any /* too deep */;
                };
                "243": {
                    N: number;
                    A: any /* too deep */;
                };
                "244": {
                    N: number;
                    A: any /* too deep */;
                };
                "247": {
                    N: number;
                    A: any /* too deep */;
                };
                "248": {
                    N: number;
                    A: any /* too deep */;
                };
                "25": {
                    N: number;
                    A: any /* too deep */;
                };
                "251": {
                    N: number;
                    A: any /* too deep */;
                };
                "252": {
                    N: number;
                    A: any /* too deep */;
                };
                "253": {
                    N: number;
                    A: any /* too deep */;
                };
                "255": {
                    N: number;
                    A: any /* too deep */;
                };
                "256": {
                    N: number;
                    A: any /* too deep */;
                };
                "26": {
                    N: number;
                    A: any /* too deep */;
                };
                "27": {
                    N: number;
                    A: any /* too deep */;
                };
                "28": {
                    N: number;
                    A: any /* too deep */;
                };
                "29": {
                    N: number;
                    A: any /* too deep */;
                };
                "3": {
                    N: number;
                    A: any /* too deep */;
                };
                "30": {
                    N: number;
                    A: any /* too deep */;
                };
                "31": {
                    N: number;
                    A: any /* too deep */;
                };
                "32": {
                    N: number;
                    A: any /* too deep */;
                };
                "33": {
                    N: number;
                    A: any /* too deep */;
                };
                "34": {
                    N: number;
                    A: any /* too deep */;
                };
                "35": {
                    N: number;
                    A: any /* too deep */;
                };
                "36": {
                    N: number;
                    A: any /* too deep */;
                };
                "37": {
                    N: number;
                    A: any /* too deep */;
                };
                "38": {
                    N: number;
                    A: any /* too deep */;
                };
                "39": {
                    N: number;
                    A: any /* too deep */;
                };
                "4": {
                    N: number;
                    A: any /* too deep */;
                };
                "40": {
                    N: number;
                    A: any /* too deep */;
                };
                "41": {
                    N: number;
                    A: any /* too deep */;
                };
                "42": {
                    N: number;
                    A: any /* too deep */;
                };
                "43": {
                    N: number;
                    A: any /* too deep */;
                };
                "44": {
                    N: number;
                    A: any /* too deep */;
                };
                "45": {
                    N: number;
                    A: any /* too deep */;
                };
                "46": {
                    N: number;
                    A: any /* too deep */;
                };
                "47": {
                    N: number;
                    A: any /* too deep */;
                };
                "48": {
                    N: number;
                    A: any /* too deep */;
                };
                "49": {
                    N: number;
                    A: any /* too deep */;
                };
                "5": {
                    N: number;
                    A: any /* too deep */;
                };
                "50": {
                    N: number;
                    A: any /* too deep */;
                };
                "51": {
                    N: number;
                    A: any /* too deep */;
                };
                "52": {
                    N: number;
                    A: any /* too deep */;
                };
                "53": {
                    N: number;
                    A: any /* too deep */;
                };
                "54": {
                    N: number;
                    A: any /* too deep */;
                };
                "55": {
                    N: number;
                    A: any /* too deep */;
                };
                "56": {
                    N: number;
                    A: any /* too deep */;
                };
                "57": {
                    N: number;
                    A: any /* too deep */;
                };
                "58": {
                    N: number;
                    A: any /* too deep */;
                };
                "59": {
                    N: number;
                    A: any /* too deep */;
                };
                "6": {
                    N: number;
                    A: any /* too deep */;
                };
                "60": {
                    N: number;
                    A: any /* too deep */;
                };
                "61": {
                    N: number;
                    A: any /* too deep */;
                };
                "62": {
                    N: number;
                    A: any /* too deep */;
                };
                "63": {
                    N: number;
                    A: any /* too deep */;
                };
                "64": {
                    N: number;
                    A: any /* too deep */;
                };
                "65": {
                    N: number;
                    A: any /* too deep */;
                };
                "66": {
                    N: number;
                    A: any /* too deep */;
                };
                "67": {
                    N: number;
                    A: any /* too deep */;
                };
                "68": {
                    N: number;
                    A: any /* too deep */;
                };
                "69": {
                    N: number;
                    A: any /* too deep */;
                };
                "7": {
                    N: number;
                    A: any /* too deep */;
                };
                "70": {
                    N: number;
                    A: any /* too deep */;
                };
                "71": {
                    N: number;
                    A: any /* too deep */;
                };
                "72": {
                    N: number;
                    A: any /* too deep */;
                };
                "73": {
                    N: number;
                    A: any /* too deep */;
                };
                "74": {
                    N: number;
                    A: any /* too deep */;
                };
                "75": {
                    N: number;
                    A: any /* too deep */;
                };
                "76": {
                    N: number;
                    A: any /* too deep */;
                };
                "77": {
                    N: number;
                    A: any /* too deep */;
                };
                "78": {
                    N: number;
                    A: any /* too deep */;
                };
                "79": {
                    N: number;
                    A: any /* too deep */;
                };
                "8": {
                    N: number;
                    A: any /* too deep */;
                };
                "80": {
                    N: number;
                    A: any /* too deep */;
                };
                "81": {
                    N: number;
                    A: any /* too deep */;
                };
                "82": {
                    N: number;
                    A: any /* too deep */;
                };
                "83": {
                    N: number;
                    A: any /* too deep */;
                };
                "84": {
                    N: number;
                    A: any /* too deep */;
                };
                "85": {
                    N: number;
                    A: any /* too deep */;
                };
                "86": {
                    N: number;
                    A: any /* too deep */;
                };
                "87": {
                    N: number;
                    A: any /* too deep */;
                };
                "88": {
                    N: number;
                    A: any /* too deep */;
                };
                "89": {
                    N: number;
                    A: any /* too deep */;
                };
                "9": {
                    N: number;
                    A: any /* too deep */;
                };
                "90": {
                    N: number;
                    A: any /* too deep */;
                };
                "91": {
                    N: number;
                    A: any /* too deep */;
                };
                "92": {
                    N: number;
                    A: any /* too deep */;
                };
                "93": {
                    N: number;
                    A: any /* too deep */;
                };
                "94": {
                    N: number;
                    A: any /* too deep */;
                };
                "95": {
                    N: number;
                    A: any /* too deep */;
                };
                "96": {
                    N: number;
                    A: any /* too deep */;
                };
                "97": {
                    N: number;
                    A: any /* too deep */;
                };
                "98": {
                    N: number;
                    A: any /* too deep */;
                };
                "99": {
                    N: number;
                    A: any /* too deep */;
                };
            };
        };
    };
    kennel: {
        updated: boolean;
        addPet(V?: any, Y?: any, q?: any, Q?: any, J?: any): void;
        amountOfPet(V: any): any;
        canSwapPositions(V: any, Y: any): any;
        createNewPet(V: any): any;
        findEmptyTeamIndex(): any;
        findFirstFilledIndex(): any;
        getDataAndClear(): any;
        getNumPets(V: any, Y: any): any;
        getPetByID(V: any): any;
        getPets(V: any, Y: any): any;
        getPetTeamIDs(): any;
        getTeamPosition(V: any): any;
        hasMaxNonMemberPets(): any;
        hasPet(V: any): any;
        hasUltimate(): any;
        isCreatureCurrentPlayer(V: any): any;
        isFull(): any;
        populateKennel(V: any): void;
        removeAtTeamPosition(V: any): void;
        removePet(V: any): void;
        setTeamPosition(V: any, Y: any): void;
        swapTeamPositions(V: any, Y: any): void;
        _encounterInfo: Player["encounters"];
        _petData: ({ catchDate: number; ID: number; level: number; levelCaught: number; stars: number; foreignSpells: any /* too deep */; } | { catchDate: number; ID: number; level: number; levelCaught: number; stars: number; team: number; foreignSpells: any /* too deep */; } | { catchDate: number; hp: number; ID: number; level: number; levelCaught: number; stars: number; foreignSpells: any /* too deep */; } | { catchDate: number; hp: number; level: number; levelCaught: number; stars: number; ID: string; foreignSpells: any /* too deep */; })[];
        _petTeam: ({ inPVP: boolean; isOpponent: boolean; justLeveled: boolean; showHealthBar: boolean; aoaTier: number; catchAttempt: number; pvpHP: number; starsEarned: number; starsReward: number; starsRewardBase: number; starsToProcess: number; team: number; type: string; immortal: undefined; nickname: undefined; addStars(Y: any, q: any, X: any): any; assignRandomSpells(): any; canCatch(): any; changeCurrentHearts(V: any, Y: any): void; changeCurrentHeartsPercent(V: any): void; createDataClone(): any; diffAttackSlots(V: any): any; evolve(V: any, Y: any): void; generate(V: any, Y: any): void; getAllEvolutions(): any; getAttacks(V: any): any; getAvailableEvolutions(): any; getBamSpells(V: any): any; getBaseMaxHearts(V: any): any; getCurrentBamSpells(): any; getCurrentHearts(): any; getDamageBonus(): any; getDataAndClear(): any; getDrops(): any; getElement(): any; getFirstName(): any; getForeignSpell(V: any, q: any, Q: any): any; getID(): any; getLevel(): any; getLevelingCurve(V: any): any; getMaxHearts(V: any): any; getName(): any; getNameWithoutNickname(): any; getNativeSpell(V: any, q: any, Q: any): any; getPercentToLevel(): any; getSpellAssets(): any; getStarReward(): any; getStarRewardByDamage(V: any): any; getStars(): any; getStarsToLevel(): any; getStatHealth(): any; getStatPower(): any; init(V: any): any; isKnockedOut(): any; processStars(): void; registerIncomingAttack(V: any, Y: any, q: any, Q: any): void; removeTeam(): void; resetModifiers(): void; setCurrentHearts(V: any, Y: any): void; setData(Y: any): void; updateModifier(V: any, Y: any): void; bench: any /* too deep */; data: any /* too deep */; game: Player["_playerContainer"]["_game"]; modifiers: any /* too deep */; onHPChange: any /* too deep */; source: any /* too deep */; } | Player["_playerContainer"]["source"])[];
        _timeManager: Player["_remoteLogger"]["authProvider"]["timeManager"];
        data: Player["kennel"]["_petData"];
        petTeam: Player["kennel"]["_petTeam"];
        player: Player["_playerContainer"]["source"];
    };
    modifiers: {
        damage: number;
        ignoreElement: number;
        maxHearts: number;
        miss: number;
        barrier: null;
        potion: null;
    };
    name: {
        gender: string;
        generateRandomName(): void;
        getData(): any;
        getFirstName(): any;
        getFullName(): any;
        getName(): any;
        getNameWithoutNickname(): any;
        init(V: any, Y: any): void;
        initFromProtobuf(V: any, Y: any): void;
        validateNameData(): any;
        data: Player["appearance"]["_name"];
        localizer: Player["_playerContainer"]["follow"]["tt"]["_localizer"];
    };
    onEquipmentChange: {
        _shouldPropagate: boolean;
        active: boolean;
        add(V: any, Y: any, q: any): any;
        addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
        addOnce(V: any, Y: any, q: any): any;
        dispatch(): void;
        dispose(): void;
        getBindingsCount(): any;
        halt(): void;
        has(V: any, Y: any): any;
        indexOfListener(V: any, Y: any): any;
        remove(V: any, Y: any): void;
        removeAll(V: any): void;
        removeAtIndex(V: any): void;
        toString(): any;
        validateListener(V: any, Y: any): void;
        _bindings: never[];
    };
    onHPChange: {
        _shouldPropagate: boolean;
        active: boolean;
        add(V: any, Y: any, q: any): any;
        addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
        addOnce(V: any, Y: any, q: any): any;
        dispatch(): void;
        dispose(): void;
        getBindingsCount(): any;
        halt(): void;
        has(V: any, Y: any): any;
        indexOfListener(V: any, Y: any): any;
        remove(V: any, Y: any): void;
        removeAll(V: any): void;
        removeAtIndex(V: any): void;
        toString(): any;
        validateListener(V: any, Y: any): void;
        _bindings: never[];
    };
    onSessionStatusChange: {
        _shouldPropagate: boolean;
        active: boolean;
        add(V: any, Y: any, q: any): any;
        addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
        addOnce(V: any, Y: any, q: any): any;
        dispatch(): void;
        dispose(): void;
        getBindingsCount(): any;
        halt(): void;
        has(V: any, Y: any): any;
        indexOfListener(V: any, Y: any): any;
        remove(V: any, Y: any): void;
        removeAll(V: any): void;
        removeAtIndex(V: any): void;
        toString(): any;
        validateListener(V: any, Y: any): void;
        _bindings: never[];
    };
    owners: never[];
    playerParents: never[];
    playerTeachers: never[];
    quests: {
        updated: boolean;
        defeatBoss(V: any): void;
        defeatMonster(Y: any, q: any, Q: any): void;
        getDataAndClear(): any;
        setQuests(V: any): void;
        data: {};
    };
    state: {
        _updated: boolean;
        updated: boolean;
        get(V: any): any;
        getCompletedQuests(V: any): any;
        getDataAndClear(): any;
        getDungeonSchema(V: any): any;
        getDungeonState(V: any, Y: any): any;
        getZoneVars(V: any, Y: any, q: any): any;
        set(V: any, Y: any): void;
        setData(V: any): void;
        _dungeonStates: {};
        data: {
            breadcrumbs: {
                BREADCRUMB_TITAN_UNLOCKED_HUD_BUTTON: number;
                FEATURE_ACADEMY_TOWERS: number;
                FEATURE_BADGES: number;
                FEATURE_BATTLE_TUTORIAL: number;
                FEATURE_CLOUD_MOUNT: number;
                FEATURE_EG_ARENA: number;
                FEATURE_ELEMENTAL_GUARDIAN: number;
                FEATURE_HOUSE_MOVING: number;
                FEATURE_HOUSE_VISITING: number;
                FEATURE_SOCIAL_FEED: number;
                FEATURE_STYLIST: number;
                FEATURE_TOWERS_PROMPT: number;
            };
            dungeons: {
                crystal_caverns: {
                    persistentData: any /* too deep */;
                    phaseData: any /* too deep */;
                    runData: any /* too deep */;
                };
            };
            elementalGuardian: {
                global: {
                    favoriteLoadoutIndex: number;
                    torchesLit: number;
                    teamCurrentHP: any /* too deep */;
                };
            };
            towers: {
                earthtower: {
                    boss: boolean;
                    wardenSaved: boolean;
                    achievementMonstersCount: number;
                    achievementPagesCount: number;
                    floors: number;
                };
                icetower: {
                    achievementMonstersCount: number;
                    achievementPagesCount: number;
                };
            };
            tutorial: {
                "0": number;
            };
            world: {
                bounties: number[];
                dailyQuests: {
                    "0": any /* too deep */;
                };
            };
            zone: {
                academy: {
                    "0": any /* too deep */;
                    quest: any /* too deep */;
                };
                bonfire_spire: {
                    "9": number;
                    quest: any /* too deep */;
                };
                dyno: {
                    "0": any /* too deep */;
                };
                forest: {
                    "8": any /* too deep */;
                    quest: any /* too deep */;
                };
                house: {
                    "6": number;
                    "0": any /* too deep */;
                    quest: any /* too deep */;
                };
                lamplight: {
                    "2": string;
                    "3": any /* too deep */;
                    quest: any /* too deep */;
                };
                shipwreck_shore: {
                    "16": number;
                    quest: any /* too deep */;
                };
                shiverchill: {
                    "11": any /* too deep */;
                    quest: any /* too deep */;
                };
                skywatch: {
                    "7": any /* too deep */;
                    quest: any /* too deep */;
                };
            };
        };
    };
    tutorial: {
        updated: boolean;
        getDataAndClear(): any;
        getMenuValue(V: any): any;
        getValue(V: any, Y: any, q: any): any;
        setData(V: any): void;
        setMenuValue(V: any, Y: any): void;
        setValue(V: any, Y: any, q: any, Q: any): void;
        data: {
            menus: {
                "14": number[];
            };
            zones: {};
        };
    };
    world: {
        full: number;
        id: number;
        name: string;
        meta: {
            tag: string;
        };
    };
}
